// Code generated by cmd/generate. DO NOT EDIT.

package lucide

import "html/template"

func init() {
	registerIcon("a-arrow-down", AArrowDown)
	registerIcon("a-arrow-up", AArrowUp)
	registerIcon("a-large-small", ALargeSmall)
	registerIcon("accessibility", Accessibility)
	registerIcon("activity", Activity)
	registerIcon("air-vent", AirVent)
	registerIcon("airplay", Airplay)
	registerIcon("alarm-clock", AlarmClock)
	registerIcon("alarm-clock-check", AlarmClockCheck)
	registerIcon("alarm-clock-minus", AlarmClockMinus)
	registerIcon("alarm-clock-off", AlarmClockOff)
	registerIcon("alarm-clock-plus", AlarmClockPlus)
	registerIcon("alarm-smoke", AlarmSmoke)
	registerIcon("album", Album)
	registerIcon("align-center-horizontal", AlignCenterHorizontal)
	registerIcon("align-center-vertical", AlignCenterVertical)
	registerIcon("align-end-horizontal", AlignEndHorizontal)
	registerIcon("align-end-vertical", AlignEndVertical)
	registerIcon("align-horizontal-distribute-center", AlignHorizontalDistributeCenter)
	registerIcon("align-horizontal-distribute-end", AlignHorizontalDistributeEnd)
	registerIcon("align-horizontal-distribute-start", AlignHorizontalDistributeStart)
	registerIcon("align-horizontal-justify-center", AlignHorizontalJustifyCenter)
	registerIcon("align-horizontal-justify-end", AlignHorizontalJustifyEnd)
	registerIcon("align-horizontal-justify-start", AlignHorizontalJustifyStart)
	registerIcon("align-horizontal-space-around", AlignHorizontalSpaceAround)
	registerIcon("align-horizontal-space-between", AlignHorizontalSpaceBetween)
	registerIcon("align-start-horizontal", AlignStartHorizontal)
	registerIcon("align-start-vertical", AlignStartVertical)
	registerIcon("align-vertical-distribute-center", AlignVerticalDistributeCenter)
	registerIcon("align-vertical-distribute-end", AlignVerticalDistributeEnd)
	registerIcon("align-vertical-distribute-start", AlignVerticalDistributeStart)
	registerIcon("align-vertical-justify-center", AlignVerticalJustifyCenter)
	registerIcon("align-vertical-justify-end", AlignVerticalJustifyEnd)
	registerIcon("align-vertical-justify-start", AlignVerticalJustifyStart)
	registerIcon("align-vertical-space-around", AlignVerticalSpaceAround)
	registerIcon("align-vertical-space-between", AlignVerticalSpaceBetween)
	registerIcon("ambulance", Ambulance)
	registerIcon("ampersand", Ampersand)
	registerIcon("ampersands", Ampersands)
	registerIcon("amphora", Amphora)
	registerIcon("anchor", Anchor)
	registerIcon("angry", Angry)
	registerIcon("annoyed", Annoyed)
	registerIcon("antenna", Antenna)
	registerIcon("anvil", Anvil)
	registerIcon("aperture", Aperture)
	registerIcon("app-window", AppWindow)
	registerIcon("app-window-mac", AppWindowMac)
	registerIcon("apple", Apple)
	registerIcon("archive", Archive)
	registerIcon("archive-restore", ArchiveRestore)
	registerIcon("archive-x", ArchiveX)
	registerIcon("armchair", Armchair)
	registerIcon("arrow-big-down", ArrowBigDown)
	registerIcon("arrow-big-down-dash", ArrowBigDownDash)
	registerIcon("arrow-big-left", ArrowBigLeft)
	registerIcon("arrow-big-left-dash", ArrowBigLeftDash)
	registerIcon("arrow-big-right", ArrowBigRight)
	registerIcon("arrow-big-right-dash", ArrowBigRightDash)
	registerIcon("arrow-big-up", ArrowBigUp)
	registerIcon("arrow-big-up-dash", ArrowBigUpDash)
	registerIcon("arrow-down", ArrowDown)
	registerIcon("arrow-down-0-1", ArrowDown01)
	registerIcon("arrow-down-1-0", ArrowDown10)
	registerIcon("arrow-down-a-z", ArrowDownAZ)
	registerIcon("arrow-down-from-line", ArrowDownFromLine)
	registerIcon("arrow-down-left", ArrowDownLeft)
	registerIcon("arrow-down-narrow-wide", ArrowDownNarrowWide)
	registerIcon("arrow-down-right", ArrowDownRight)
	registerIcon("arrow-down-to-dot", ArrowDownToDot)
	registerIcon("arrow-down-to-line", ArrowDownToLine)
	registerIcon("arrow-down-up", ArrowDownUp)
	registerIcon("arrow-down-wide-narrow", ArrowDownWideNarrow)
	registerIcon("arrow-down-z-a", ArrowDownZA)
	registerIcon("arrow-left", ArrowLeft)
	registerIcon("arrow-left-from-line", ArrowLeftFromLine)
	registerIcon("arrow-left-right", ArrowLeftRight)
	registerIcon("arrow-left-to-line", ArrowLeftToLine)
	registerIcon("arrow-right", ArrowRight)
	registerIcon("arrow-right-from-line", ArrowRightFromLine)
	registerIcon("arrow-right-left", ArrowRightLeft)
	registerIcon("arrow-right-to-line", ArrowRightToLine)
	registerIcon("arrow-up", ArrowUp)
	registerIcon("arrow-up-0-1", ArrowUp01)
	registerIcon("arrow-up-1-0", ArrowUp10)
	registerIcon("arrow-up-a-z", ArrowUpAZ)
	registerIcon("arrow-up-down", ArrowUpDown)
	registerIcon("arrow-up-from-dot", ArrowUpFromDot)
	registerIcon("arrow-up-from-line", ArrowUpFromLine)
	registerIcon("arrow-up-left", ArrowUpLeft)
	registerIcon("arrow-up-narrow-wide", ArrowUpNarrowWide)
	registerIcon("arrow-up-right", ArrowUpRight)
	registerIcon("arrow-up-to-line", ArrowUpToLine)
	registerIcon("arrow-up-wide-narrow", ArrowUpWideNarrow)
	registerIcon("arrow-up-z-a", ArrowUpZA)
	registerIcon("arrows-up-from-line", ArrowsUpFromLine)
	registerIcon("asterisk", Asterisk)
	registerIcon("at-sign", AtSign)
	registerIcon("atom", Atom)
	registerIcon("audio-lines", AudioLines)
	registerIcon("audio-waveform", AudioWaveform)
	registerIcon("award", Award)
	registerIcon("axe", Axe)
	registerIcon("axis-3d", Axis3d)
	registerIcon("baby", Baby)
	registerIcon("backpack", Backpack)
	registerIcon("badge", Badge)
	registerIcon("badge-alert", BadgeAlert)
	registerIcon("badge-cent", BadgeCent)
	registerIcon("badge-check", BadgeCheck)
	registerIcon("badge-dollar-sign", BadgeDollarSign)
	registerIcon("badge-euro", BadgeEuro)
	registerIcon("badge-indian-rupee", BadgeIndianRupee)
	registerIcon("badge-info", BadgeInfo)
	registerIcon("badge-japanese-yen", BadgeJapaneseYen)
	registerIcon("badge-minus", BadgeMinus)
	registerIcon("badge-percent", BadgePercent)
	registerIcon("badge-plus", BadgePlus)
	registerIcon("badge-pound-sterling", BadgePoundSterling)
	registerIcon("badge-question-mark", BadgeQuestionMark)
	registerIcon("badge-russian-ruble", BadgeRussianRuble)
	registerIcon("badge-swiss-franc", BadgeSwissFranc)
	registerIcon("badge-turkish-lira", BadgeTurkishLira)
	registerIcon("badge-x", BadgeX)
	registerIcon("baggage-claim", BaggageClaim)
	registerIcon("ban", Ban)
	registerIcon("banana", Banana)
	registerIcon("bandage", Bandage)
	registerIcon("banknote", Banknote)
	registerIcon("banknote-arrow-down", BanknoteArrowDown)
	registerIcon("banknote-arrow-up", BanknoteArrowUp)
	registerIcon("banknote-x", BanknoteX)
	registerIcon("barcode", Barcode)
	registerIcon("barrel", Barrel)
	registerIcon("baseline", Baseline)
	registerIcon("bath", Bath)
	registerIcon("battery", Battery)
	registerIcon("battery-charging", BatteryCharging)
	registerIcon("battery-full", BatteryFull)
	registerIcon("battery-low", BatteryLow)
	registerIcon("battery-medium", BatteryMedium)
	registerIcon("battery-plus", BatteryPlus)
	registerIcon("battery-warning", BatteryWarning)
	registerIcon("beaker", Beaker)
	registerIcon("bean", Bean)
	registerIcon("bean-off", BeanOff)
	registerIcon("bed", Bed)
	registerIcon("bed-double", BedDouble)
	registerIcon("bed-single", BedSingle)
	registerIcon("beef", Beef)
	registerIcon("beer", Beer)
	registerIcon("beer-off", BeerOff)
	registerIcon("bell", Bell)
	registerIcon("bell-dot", BellDot)
	registerIcon("bell-electric", BellElectric)
	registerIcon("bell-minus", BellMinus)
	registerIcon("bell-off", BellOff)
	registerIcon("bell-plus", BellPlus)
	registerIcon("bell-ring", BellRing)
	registerIcon("between-horizontal-end", BetweenHorizontalEnd)
	registerIcon("between-horizontal-start", BetweenHorizontalStart)
	registerIcon("between-vertical-end", BetweenVerticalEnd)
	registerIcon("between-vertical-start", BetweenVerticalStart)
	registerIcon("biceps-flexed", BicepsFlexed)
	registerIcon("bike", Bike)
	registerIcon("binary", Binary)
	registerIcon("binoculars", Binoculars)
	registerIcon("biohazard", Biohazard)
	registerIcon("bird", Bird)
	registerIcon("birdhouse", Birdhouse)
	registerIcon("bitcoin", Bitcoin)
	registerIcon("blend", Blend)
	registerIcon("blinds", Blinds)
	registerIcon("blocks", Blocks)
	registerIcon("bluetooth", Bluetooth)
	registerIcon("bluetooth-connected", BluetoothConnected)
	registerIcon("bluetooth-off", BluetoothOff)
	registerIcon("bluetooth-searching", BluetoothSearching)
	registerIcon("bold", Bold)
	registerIcon("bolt", Bolt)
	registerIcon("bomb", Bomb)
	registerIcon("bone", Bone)
	registerIcon("book", Book)
	registerIcon("book-a", BookA)
	registerIcon("book-alert", BookAlert)
	registerIcon("book-audio", BookAudio)
	registerIcon("book-check", BookCheck)
	registerIcon("book-copy", BookCopy)
	registerIcon("book-dashed", BookDashed)
	registerIcon("book-down", BookDown)
	registerIcon("book-headphones", BookHeadphones)
	registerIcon("book-heart", BookHeart)
	registerIcon("book-image", BookImage)
	registerIcon("book-key", BookKey)
	registerIcon("book-lock", BookLock)
	registerIcon("book-marked", BookMarked)
	registerIcon("book-minus", BookMinus)
	registerIcon("book-open", BookOpen)
	registerIcon("book-open-check", BookOpenCheck)
	registerIcon("book-open-text", BookOpenText)
	registerIcon("book-plus", BookPlus)
	registerIcon("book-text", BookText)
	registerIcon("book-type", BookType)
	registerIcon("book-up", BookUp)
	registerIcon("book-up-2", BookUp2)
	registerIcon("book-user", BookUser)
	registerIcon("book-x", BookX)
	registerIcon("bookmark", Bookmark)
	registerIcon("bookmark-check", BookmarkCheck)
	registerIcon("bookmark-minus", BookmarkMinus)
	registerIcon("bookmark-plus", BookmarkPlus)
	registerIcon("bookmark-x", BookmarkX)
	registerIcon("boom-box", BoomBox)
	registerIcon("bot", Bot)
	registerIcon("bot-message-square", BotMessageSquare)
	registerIcon("bot-off", BotOff)
	registerIcon("bottle-wine", BottleWine)
	registerIcon("bow-arrow", BowArrow)
	registerIcon("box", Box)
	registerIcon("boxes", Boxes)
	registerIcon("braces", Braces)
	registerIcon("brackets", Brackets)
	registerIcon("brain", Brain)
	registerIcon("brain-circuit", BrainCircuit)
	registerIcon("brain-cog", BrainCog)
	registerIcon("brick-wall", BrickWall)
	registerIcon("brick-wall-fire", BrickWallFire)
	registerIcon("brick-wall-shield", BrickWallShield)
	registerIcon("briefcase", Briefcase)
	registerIcon("briefcase-business", BriefcaseBusiness)
	registerIcon("briefcase-conveyor-belt", BriefcaseConveyorBelt)
	registerIcon("briefcase-medical", BriefcaseMedical)
	registerIcon("bring-to-front", BringToFront)
	registerIcon("brush", Brush)
	registerIcon("brush-cleaning", BrushCleaning)
	registerIcon("bubbles", Bubbles)
	registerIcon("bug", Bug)
	registerIcon("bug-off", BugOff)
	registerIcon("bug-play", BugPlay)
	registerIcon("building", Building)
	registerIcon("building-2", Building2)
	registerIcon("bus", Bus)
	registerIcon("bus-front", BusFront)
	registerIcon("cable", Cable)
	registerIcon("cable-car", CableCar)
	registerIcon("cake", Cake)
	registerIcon("cake-slice", CakeSlice)
	registerIcon("calculator", Calculator)
	registerIcon("calendar", Calendar)
	registerIcon("calendar-1", Calendar1)
	registerIcon("calendar-arrow-down", CalendarArrowDown)
	registerIcon("calendar-arrow-up", CalendarArrowUp)
	registerIcon("calendar-check", CalendarCheck)
	registerIcon("calendar-check-2", CalendarCheck2)
	registerIcon("calendar-clock", CalendarClock)
	registerIcon("calendar-cog", CalendarCog)
	registerIcon("calendar-days", CalendarDays)
	registerIcon("calendar-fold", CalendarFold)
	registerIcon("calendar-heart", CalendarHeart)
	registerIcon("calendar-minus", CalendarMinus)
	registerIcon("calendar-minus-2", CalendarMinus2)
	registerIcon("calendar-off", CalendarOff)
	registerIcon("calendar-plus", CalendarPlus)
	registerIcon("calendar-plus-2", CalendarPlus2)
	registerIcon("calendar-range", CalendarRange)
	registerIcon("calendar-search", CalendarSearch)
	registerIcon("calendar-sync", CalendarSync)
	registerIcon("calendar-x", CalendarX)
	registerIcon("calendar-x-2", CalendarX2)
	registerIcon("camera", Camera)
	registerIcon("camera-off", CameraOff)
	registerIcon("candy", Candy)
	registerIcon("candy-cane", CandyCane)
	registerIcon("candy-off", CandyOff)
	registerIcon("cannabis", Cannabis)
	registerIcon("captions", Captions)
	registerIcon("captions-off", CaptionsOff)
	registerIcon("car", Car)
	registerIcon("car-front", CarFront)
	registerIcon("car-taxi-front", CarTaxiFront)
	registerIcon("caravan", Caravan)
	registerIcon("card-sim", CardSim)
	registerIcon("carrot", Carrot)
	registerIcon("case-lower", CaseLower)
	registerIcon("case-sensitive", CaseSensitive)
	registerIcon("case-upper", CaseUpper)
	registerIcon("cassette-tape", CassetteTape)
	registerIcon("cast", Cast)
	registerIcon("castle", Castle)
	registerIcon("cat", Cat)
	registerIcon("cctv", Cctv)
	registerIcon("chart-area", ChartArea)
	registerIcon("chart-bar", ChartBar)
	registerIcon("chart-bar-big", ChartBarBig)
	registerIcon("chart-bar-decreasing", ChartBarDecreasing)
	registerIcon("chart-bar-increasing", ChartBarIncreasing)
	registerIcon("chart-bar-stacked", ChartBarStacked)
	registerIcon("chart-candlestick", ChartCandlestick)
	registerIcon("chart-column", ChartColumn)
	registerIcon("chart-column-big", ChartColumnBig)
	registerIcon("chart-column-decreasing", ChartColumnDecreasing)
	registerIcon("chart-column-increasing", ChartColumnIncreasing)
	registerIcon("chart-column-stacked", ChartColumnStacked)
	registerIcon("chart-gantt", ChartGantt)
	registerIcon("chart-line", ChartLine)
	registerIcon("chart-network", ChartNetwork)
	registerIcon("chart-no-axes-column", ChartNoAxesColumn)
	registerIcon("chart-no-axes-column-decreasing", ChartNoAxesColumnDecreasing)
	registerIcon("chart-no-axes-column-increasing", ChartNoAxesColumnIncreasing)
	registerIcon("chart-no-axes-combined", ChartNoAxesCombined)
	registerIcon("chart-no-axes-gantt", ChartNoAxesGantt)
	registerIcon("chart-pie", ChartPie)
	registerIcon("chart-scatter", ChartScatter)
	registerIcon("chart-spline", ChartSpline)
	registerIcon("check", Check)
	registerIcon("check-check", CheckCheck)
	registerIcon("check-line", CheckLine)
	registerIcon("chef-hat", ChefHat)
	registerIcon("cherry", Cherry)
	registerIcon("chevron-down", ChevronDown)
	registerIcon("chevron-first", ChevronFirst)
	registerIcon("chevron-last", ChevronLast)
	registerIcon("chevron-left", ChevronLeft)
	registerIcon("chevron-right", ChevronRight)
	registerIcon("chevron-up", ChevronUp)
	registerIcon("chevrons-down", ChevronsDown)
	registerIcon("chevrons-down-up", ChevronsDownUp)
	registerIcon("chevrons-left", ChevronsLeft)
	registerIcon("chevrons-left-right", ChevronsLeftRight)
	registerIcon("chevrons-left-right-ellipsis", ChevronsLeftRightEllipsis)
	registerIcon("chevrons-right", ChevronsRight)
	registerIcon("chevrons-right-left", ChevronsRightLeft)
	registerIcon("chevrons-up", ChevronsUp)
	registerIcon("chevrons-up-down", ChevronsUpDown)
	registerIcon("chromium", Chromium)
	registerIcon("church", Church)
	registerIcon("cigarette", Cigarette)
	registerIcon("cigarette-off", CigaretteOff)
	registerIcon("circle", Circle)
	registerIcon("circle-alert", CircleAlert)
	registerIcon("circle-arrow-down", CircleArrowDown)
	registerIcon("circle-arrow-left", CircleArrowLeft)
	registerIcon("circle-arrow-out-down-left", CircleArrowOutDownLeft)
	registerIcon("circle-arrow-out-down-right", CircleArrowOutDownRight)
	registerIcon("circle-arrow-out-up-left", CircleArrowOutUpLeft)
	registerIcon("circle-arrow-out-up-right", CircleArrowOutUpRight)
	registerIcon("circle-arrow-right", CircleArrowRight)
	registerIcon("circle-arrow-up", CircleArrowUp)
	registerIcon("circle-check", CircleCheck)
	registerIcon("circle-check-big", CircleCheckBig)
	registerIcon("circle-chevron-down", CircleChevronDown)
	registerIcon("circle-chevron-left", CircleChevronLeft)
	registerIcon("circle-chevron-right", CircleChevronRight)
	registerIcon("circle-chevron-up", CircleChevronUp)
	registerIcon("circle-dashed", CircleDashed)
	registerIcon("circle-divide", CircleDivide)
	registerIcon("circle-dollar-sign", CircleDollarSign)
	registerIcon("circle-dot", CircleDot)
	registerIcon("circle-dot-dashed", CircleDotDashed)
	registerIcon("circle-ellipsis", CircleEllipsis)
	registerIcon("circle-equal", CircleEqual)
	registerIcon("circle-fading-arrow-up", CircleFadingArrowUp)
	registerIcon("circle-fading-plus", CircleFadingPlus)
	registerIcon("circle-gauge", CircleGauge)
	registerIcon("circle-minus", CircleMinus)
	registerIcon("circle-off", CircleOff)
	registerIcon("circle-parking", CircleParking)
	registerIcon("circle-parking-off", CircleParkingOff)
	registerIcon("circle-pause", CirclePause)
	registerIcon("circle-percent", CirclePercent)
	registerIcon("circle-play", CirclePlay)
	registerIcon("circle-plus", CirclePlus)
	registerIcon("circle-pound-sterling", CirclePoundSterling)
	registerIcon("circle-power", CirclePower)
	registerIcon("circle-question-mark", CircleQuestionMark)
	registerIcon("circle-slash", CircleSlash)
	registerIcon("circle-slash-2", CircleSlash2)
	registerIcon("circle-small", CircleSmall)
	registerIcon("circle-star", CircleStar)
	registerIcon("circle-stop", CircleStop)
	registerIcon("circle-user", CircleUser)
	registerIcon("circle-user-round", CircleUserRound)
	registerIcon("circle-x", CircleX)
	registerIcon("circuit-board", CircuitBoard)
	registerIcon("citrus", Citrus)
	registerIcon("clapperboard", Clapperboard)
	registerIcon("clipboard", Clipboard)
	registerIcon("clipboard-check", ClipboardCheck)
	registerIcon("clipboard-clock", ClipboardClock)
	registerIcon("clipboard-copy", ClipboardCopy)
	registerIcon("clipboard-list", ClipboardList)
	registerIcon("clipboard-minus", ClipboardMinus)
	registerIcon("clipboard-paste", ClipboardPaste)
	registerIcon("clipboard-pen", ClipboardPen)
	registerIcon("clipboard-pen-line", ClipboardPenLine)
	registerIcon("clipboard-plus", ClipboardPlus)
	registerIcon("clipboard-type", ClipboardType)
	registerIcon("clipboard-x", ClipboardX)
	registerIcon("clock", Clock)
	registerIcon("clock-1", Clock1)
	registerIcon("clock-10", Clock10)
	registerIcon("clock-11", Clock11)
	registerIcon("clock-12", Clock12)
	registerIcon("clock-2", Clock2)
	registerIcon("clock-3", Clock3)
	registerIcon("clock-4", Clock4)
	registerIcon("clock-5", Clock5)
	registerIcon("clock-6", Clock6)
	registerIcon("clock-7", Clock7)
	registerIcon("clock-8", Clock8)
	registerIcon("clock-9", Clock9)
	registerIcon("clock-alert", ClockAlert)
	registerIcon("clock-arrow-down", ClockArrowDown)
	registerIcon("clock-arrow-up", ClockArrowUp)
	registerIcon("clock-fading", ClockFading)
	registerIcon("clock-plus", ClockPlus)
	registerIcon("closed-caption", ClosedCaption)
	registerIcon("cloud", Cloud)
	registerIcon("cloud-alert", CloudAlert)
	registerIcon("cloud-check", CloudCheck)
	registerIcon("cloud-cog", CloudCog)
	registerIcon("cloud-download", CloudDownload)
	registerIcon("cloud-drizzle", CloudDrizzle)
	registerIcon("cloud-fog", CloudFog)
	registerIcon("cloud-hail", CloudHail)
	registerIcon("cloud-lightning", CloudLightning)
	registerIcon("cloud-moon", CloudMoon)
	registerIcon("cloud-moon-rain", CloudMoonRain)
	registerIcon("cloud-off", CloudOff)
	registerIcon("cloud-rain", CloudRain)
	registerIcon("cloud-rain-wind", CloudRainWind)
	registerIcon("cloud-snow", CloudSnow)
	registerIcon("cloud-sun", CloudSun)
	registerIcon("cloud-sun-rain", CloudSunRain)
	registerIcon("cloud-upload", CloudUpload)
	registerIcon("cloudy", Cloudy)
	registerIcon("clover", Clover)
	registerIcon("club", Club)
	registerIcon("code", Code)
	registerIcon("code-xml", CodeXml)
	registerIcon("codepen", Codepen)
	registerIcon("codesandbox", Codesandbox)
	registerIcon("coffee", Coffee)
	registerIcon("cog", Cog)
	registerIcon("coins", Coins)
	registerIcon("columns-2", Columns2)
	registerIcon("columns-3", Columns3)
	registerIcon("columns-3-cog", Columns3Cog)
	registerIcon("columns-4", Columns4)
	registerIcon("combine", Combine)
	registerIcon("command", Command)
	registerIcon("compass", Compass)
	registerIcon("component", Component)
	registerIcon("computer", Computer)
	registerIcon("concierge-bell", ConciergeBell)
	registerIcon("cone", Cone)
	registerIcon("construction", Construction)
	registerIcon("contact", Contact)
	registerIcon("contact-round", ContactRound)
	registerIcon("container", Container)
	registerIcon("contrast", Contrast)
	registerIcon("cookie", Cookie)
	registerIcon("cooking-pot", CookingPot)
	registerIcon("copy", Copy)
	registerIcon("copy-check", CopyCheck)
	registerIcon("copy-minus", CopyMinus)
	registerIcon("copy-plus", CopyPlus)
	registerIcon("copy-slash", CopySlash)
	registerIcon("copy-x", CopyX)
	registerIcon("copyleft", Copyleft)
	registerIcon("copyright", Copyright)
	registerIcon("corner-down-left", CornerDownLeft)
	registerIcon("corner-down-right", CornerDownRight)
	registerIcon("corner-left-down", CornerLeftDown)
	registerIcon("corner-left-up", CornerLeftUp)
	registerIcon("corner-right-down", CornerRightDown)
	registerIcon("corner-right-up", CornerRightUp)
	registerIcon("corner-up-left", CornerUpLeft)
	registerIcon("corner-up-right", CornerUpRight)
	registerIcon("cpu", Cpu)
	registerIcon("creative-commons", CreativeCommons)
	registerIcon("credit-card", CreditCard)
	registerIcon("croissant", Croissant)
	registerIcon("crop", Crop)
	registerIcon("cross", Cross)
	registerIcon("crosshair", Crosshair)
	registerIcon("crown", Crown)
	registerIcon("cuboid", Cuboid)
	registerIcon("cup-soda", CupSoda)
	registerIcon("currency", Currency)
	registerIcon("cylinder", Cylinder)
	registerIcon("dam", Dam)
	registerIcon("database", Database)
	registerIcon("database-backup", DatabaseBackup)
	registerIcon("database-zap", DatabaseZap)
	registerIcon("decimals-arrow-left", DecimalsArrowLeft)
	registerIcon("decimals-arrow-right", DecimalsArrowRight)
	registerIcon("delete", Delete)
	registerIcon("dessert", Dessert)
	registerIcon("diameter", Diameter)
	registerIcon("diamond", Diamond)
	registerIcon("diamond-minus", DiamondMinus)
	registerIcon("diamond-percent", DiamondPercent)
	registerIcon("diamond-plus", DiamondPlus)
	registerIcon("dice-1", Dice1)
	registerIcon("dice-2", Dice2)
	registerIcon("dice-3", Dice3)
	registerIcon("dice-4", Dice4)
	registerIcon("dice-5", Dice5)
	registerIcon("dice-6", Dice6)
	registerIcon("dices", Dices)
	registerIcon("diff", Diff)
	registerIcon("disc", Disc)
	registerIcon("disc-2", Disc2)
	registerIcon("disc-3", Disc3)
	registerIcon("disc-album", DiscAlbum)
	registerIcon("divide", Divide)
	registerIcon("dna", Dna)
	registerIcon("dna-off", DnaOff)
	registerIcon("dock", Dock)
	registerIcon("dog", Dog)
	registerIcon("dollar-sign", DollarSign)
	registerIcon("donut", Donut)
	registerIcon("door-closed", DoorClosed)
	registerIcon("door-closed-locked", DoorClosedLocked)
	registerIcon("door-open", DoorOpen)
	registerIcon("dot", Dot)
	registerIcon("download", Download)
	registerIcon("drafting-compass", DraftingCompass)
	registerIcon("drama", Drama)
	registerIcon("dribbble", Dribbble)
	registerIcon("drill", Drill)
	registerIcon("drone", Drone)
	registerIcon("droplet", Droplet)
	registerIcon("droplet-off", DropletOff)
	registerIcon("droplets", Droplets)
	registerIcon("drum", Drum)
	registerIcon("drumstick", Drumstick)
	registerIcon("dumbbell", Dumbbell)
	registerIcon("ear", Ear)
	registerIcon("ear-off", EarOff)
	registerIcon("earth", Earth)
	registerIcon("earth-lock", EarthLock)
	registerIcon("eclipse", Eclipse)
	registerIcon("egg", Egg)
	registerIcon("egg-fried", EggFried)
	registerIcon("egg-off", EggOff)
	registerIcon("ellipsis", Ellipsis)
	registerIcon("ellipsis-vertical", EllipsisVertical)
	registerIcon("equal", Equal)
	registerIcon("equal-approximately", EqualApproximately)
	registerIcon("equal-not", EqualNot)
	registerIcon("eraser", Eraser)
	registerIcon("ethernet-port", EthernetPort)
	registerIcon("euro", Euro)
	registerIcon("ev-charger", EvCharger)
	registerIcon("expand", Expand)
	registerIcon("external-link", ExternalLink)
	registerIcon("eye", Eye)
	registerIcon("eye-closed", EyeClosed)
	registerIcon("eye-off", EyeOff)
	registerIcon("facebook", Facebook)
	registerIcon("factory", Factory)
	registerIcon("fan", Fan)
	registerIcon("fast-forward", FastForward)
	registerIcon("feather", Feather)
	registerIcon("fence", Fence)
	registerIcon("ferris-wheel", FerrisWheel)
	registerIcon("figma", Figma)
	registerIcon("file", File)
	registerIcon("file-archive", FileArchive)
	registerIcon("file-audio", FileAudio)
	registerIcon("file-audio-2", FileAudio2)
	registerIcon("file-axis-3d", FileAxis3d)
	registerIcon("file-badge", FileBadge)
	registerIcon("file-badge-2", FileBadge2)
	registerIcon("file-box", FileBox)
	registerIcon("file-chart-column", FileChartColumn)
	registerIcon("file-chart-column-increasing", FileChartColumnIncreasing)
	registerIcon("file-chart-line", FileChartLine)
	registerIcon("file-chart-pie", FileChartPie)
	registerIcon("file-check", FileCheck)
	registerIcon("file-check-2", FileCheck2)
	registerIcon("file-clock", FileClock)
	registerIcon("file-code", FileCode)
	registerIcon("file-code-2", FileCode2)
	registerIcon("file-cog", FileCog)
	registerIcon("file-diff", FileDiff)
	registerIcon("file-digit", FileDigit)
	registerIcon("file-down", FileDown)
	registerIcon("file-heart", FileHeart)
	registerIcon("file-image", FileImage)
	registerIcon("file-input", FileInput)
	registerIcon("file-json", FileJson)
	registerIcon("file-json-2", FileJson2)
	registerIcon("file-key", FileKey)
	registerIcon("file-key-2", FileKey2)
	registerIcon("file-lock", FileLock)
	registerIcon("file-lock-2", FileLock2)
	registerIcon("file-minus", FileMinus)
	registerIcon("file-minus-2", FileMinus2)
	registerIcon("file-music", FileMusic)
	registerIcon("file-output", FileOutput)
	registerIcon("file-pen", FilePen)
	registerIcon("file-pen-line", FilePenLine)
	registerIcon("file-play", FilePlay)
	registerIcon("file-plus", FilePlus)
	registerIcon("file-plus-2", FilePlus2)
	registerIcon("file-question-mark", FileQuestionMark)
	registerIcon("file-scan", FileScan)
	registerIcon("file-search", FileSearch)
	registerIcon("file-search-2", FileSearch2)
	registerIcon("file-sliders", FileSliders)
	registerIcon("file-spreadsheet", FileSpreadsheet)
	registerIcon("file-stack", FileStack)
	registerIcon("file-symlink", FileSymlink)
	registerIcon("file-terminal", FileTerminal)
	registerIcon("file-text", FileText)
	registerIcon("file-type", FileType)
	registerIcon("file-type-2", FileType2)
	registerIcon("file-up", FileUp)
	registerIcon("file-user", FileUser)
	registerIcon("file-video-camera", FileVideoCamera)
	registerIcon("file-volume", FileVolume)
	registerIcon("file-volume-2", FileVolume2)
	registerIcon("file-warning", FileWarning)
	registerIcon("file-x", FileX)
	registerIcon("file-x-2", FileX2)
	registerIcon("files", Files)
	registerIcon("film", Film)
	registerIcon("fingerprint", Fingerprint)
	registerIcon("fire-extinguisher", FireExtinguisher)
	registerIcon("fish", Fish)
	registerIcon("fish-off", FishOff)
	registerIcon("fish-symbol", FishSymbol)
	registerIcon("flag", Flag)
	registerIcon("flag-off", FlagOff)
	registerIcon("flag-triangle-left", FlagTriangleLeft)
	registerIcon("flag-triangle-right", FlagTriangleRight)
	registerIcon("flame", Flame)
	registerIcon("flame-kindling", FlameKindling)
	registerIcon("flashlight", Flashlight)
	registerIcon("flashlight-off", FlashlightOff)
	registerIcon("flask-conical", FlaskConical)
	registerIcon("flask-conical-off", FlaskConicalOff)
	registerIcon("flask-round", FlaskRound)
	registerIcon("flip-horizontal", FlipHorizontal)
	registerIcon("flip-horizontal-2", FlipHorizontal2)
	registerIcon("flip-vertical", FlipVertical)
	registerIcon("flip-vertical-2", FlipVertical2)
	registerIcon("flower", Flower)
	registerIcon("flower-2", Flower2)
	registerIcon("focus", Focus)
	registerIcon("fold-horizontal", FoldHorizontal)
	registerIcon("fold-vertical", FoldVertical)
	registerIcon("folder", Folder)
	registerIcon("folder-archive", FolderArchive)
	registerIcon("folder-check", FolderCheck)
	registerIcon("folder-clock", FolderClock)
	registerIcon("folder-closed", FolderClosed)
	registerIcon("folder-code", FolderCode)
	registerIcon("folder-cog", FolderCog)
	registerIcon("folder-dot", FolderDot)
	registerIcon("folder-down", FolderDown)
	registerIcon("folder-git", FolderGit)
	registerIcon("folder-git-2", FolderGit2)
	registerIcon("folder-heart", FolderHeart)
	registerIcon("folder-input", FolderInput)
	registerIcon("folder-kanban", FolderKanban)
	registerIcon("folder-key", FolderKey)
	registerIcon("folder-lock", FolderLock)
	registerIcon("folder-minus", FolderMinus)
	registerIcon("folder-open", FolderOpen)
	registerIcon("folder-open-dot", FolderOpenDot)
	registerIcon("folder-output", FolderOutput)
	registerIcon("folder-pen", FolderPen)
	registerIcon("folder-plus", FolderPlus)
	registerIcon("folder-root", FolderRoot)
	registerIcon("folder-search", FolderSearch)
	registerIcon("folder-search-2", FolderSearch2)
	registerIcon("folder-symlink", FolderSymlink)
	registerIcon("folder-sync", FolderSync)
	registerIcon("folder-tree", FolderTree)
	registerIcon("folder-up", FolderUp)
	registerIcon("folder-x", FolderX)
	registerIcon("folders", Folders)
	registerIcon("footprints", Footprints)
	registerIcon("forklift", Forklift)
	registerIcon("forward", Forward)
	registerIcon("frame", Frame)
	registerIcon("framer", Framer)
	registerIcon("frown", Frown)
	registerIcon("fuel", Fuel)
	registerIcon("fullscreen", Fullscreen)
	registerIcon("funnel", Funnel)
	registerIcon("funnel-plus", FunnelPlus)
	registerIcon("funnel-x", FunnelX)
	registerIcon("gallery-horizontal", GalleryHorizontal)
	registerIcon("gallery-horizontal-end", GalleryHorizontalEnd)
	registerIcon("gallery-thumbnails", GalleryThumbnails)
	registerIcon("gallery-vertical", GalleryVertical)
	registerIcon("gallery-vertical-end", GalleryVerticalEnd)
	registerIcon("gamepad", Gamepad)
	registerIcon("gamepad-2", Gamepad2)
	registerIcon("gamepad-directional", GamepadDirectional)
	registerIcon("gauge", Gauge)
	registerIcon("gavel", Gavel)
	registerIcon("gem", Gem)
	registerIcon("georgian-lari", GeorgianLari)
	registerIcon("ghost", Ghost)
	registerIcon("gift", Gift)
	registerIcon("git-branch", GitBranch)
	registerIcon("git-branch-plus", GitBranchPlus)
	registerIcon("git-commit-horizontal", GitCommitHorizontal)
	registerIcon("git-commit-vertical", GitCommitVertical)
	registerIcon("git-compare", GitCompare)
	registerIcon("git-compare-arrows", GitCompareArrows)
	registerIcon("git-fork", GitFork)
	registerIcon("git-graph", GitGraph)
	registerIcon("git-merge", GitMerge)
	registerIcon("git-pull-request", GitPullRequest)
	registerIcon("git-pull-request-arrow", GitPullRequestArrow)
	registerIcon("git-pull-request-closed", GitPullRequestClosed)
	registerIcon("git-pull-request-create", GitPullRequestCreate)
	registerIcon("git-pull-request-create-arrow", GitPullRequestCreateArrow)
	registerIcon("git-pull-request-draft", GitPullRequestDraft)
	registerIcon("github", Github)
	registerIcon("gitlab", Gitlab)
	registerIcon("glass-water", GlassWater)
	registerIcon("glasses", Glasses)
	registerIcon("globe", Globe)
	registerIcon("globe-lock", GlobeLock)
	registerIcon("goal", Goal)
	registerIcon("gpu", Gpu)
	registerIcon("graduation-cap", GraduationCap)
	registerIcon("grape", Grape)
	registerIcon("grid-2x2", Grid2x2)
	registerIcon("grid-2x2-check", Grid2x2Check)
	registerIcon("grid-2x2-plus", Grid2x2Plus)
	registerIcon("grid-2x2-x", Grid2x2X)
	registerIcon("grid-3x2", Grid3x2)
	registerIcon("grid-3x3", Grid3x3)
	registerIcon("grip", Grip)
	registerIcon("grip-horizontal", GripHorizontal)
	registerIcon("grip-vertical", GripVertical)
	registerIcon("group", Group)
	registerIcon("guitar", Guitar)
	registerIcon("ham", Ham)
	registerIcon("hamburger", Hamburger)
	registerIcon("hammer", Hammer)
	registerIcon("hand", Hand)
	registerIcon("hand-coins", HandCoins)
	registerIcon("hand-fist", HandFist)
	registerIcon("hand-grab", HandGrab)
	registerIcon("hand-heart", HandHeart)
	registerIcon("hand-helping", HandHelping)
	registerIcon("hand-metal", HandMetal)
	registerIcon("hand-platter", HandPlatter)
	registerIcon("handbag", Handbag)
	registerIcon("handshake", Handshake)
	registerIcon("hard-drive", HardDrive)
	registerIcon("hard-drive-download", HardDriveDownload)
	registerIcon("hard-drive-upload", HardDriveUpload)
	registerIcon("hard-hat", HardHat)
	registerIcon("hash", Hash)
	registerIcon("hat-glasses", HatGlasses)
	registerIcon("haze", Haze)
	registerIcon("hdmi-port", HdmiPort)
	registerIcon("heading", Heading)
	registerIcon("heading-1", Heading1)
	registerIcon("heading-2", Heading2)
	registerIcon("heading-3", Heading3)
	registerIcon("heading-4", Heading4)
	registerIcon("heading-5", Heading5)
	registerIcon("heading-6", Heading6)
	registerIcon("headphone-off", HeadphoneOff)
	registerIcon("headphones", Headphones)
	registerIcon("headset", Headset)
	registerIcon("heart", Heart)
	registerIcon("heart-crack", HeartCrack)
	registerIcon("heart-handshake", HeartHandshake)
	registerIcon("heart-minus", HeartMinus)
	registerIcon("heart-off", HeartOff)
	registerIcon("heart-plus", HeartPlus)
	registerIcon("heart-pulse", HeartPulse)
	registerIcon("heater", Heater)
	registerIcon("hexagon", Hexagon)
	registerIcon("highlighter", Highlighter)
	registerIcon("history", History)
	registerIcon("hop", Hop)
	registerIcon("hop-off", HopOff)
	registerIcon("hospital", Hospital)
	registerIcon("hotel", Hotel)
	registerIcon("hourglass", Hourglass)
	registerIcon("house", House)
	registerIcon("house-heart", HouseHeart)
	registerIcon("house-plug", HousePlug)
	registerIcon("house-plus", HousePlus)
	registerIcon("house-wifi", HouseWifi)
	registerIcon("ice-cream-bowl", IceCreamBowl)
	registerIcon("ice-cream-cone", IceCreamCone)
	registerIcon("id-card", IdCard)
	registerIcon("id-card-lanyard", IdCardLanyard)
	registerIcon("image", Image)
	registerIcon("image-down", ImageDown)
	registerIcon("image-minus", ImageMinus)
	registerIcon("image-off", ImageOff)
	registerIcon("image-play", ImagePlay)
	registerIcon("image-plus", ImagePlus)
	registerIcon("image-up", ImageUp)
	registerIcon("image-upscale", ImageUpscale)
	registerIcon("images", Images)
	registerIcon("import", Import)
	registerIcon("inbox", Inbox)
	registerIcon("indian-rupee", IndianRupee)
	registerIcon("infinity", Infinity)
	registerIcon("info", Info)
	registerIcon("inspection-panel", InspectionPanel)
	registerIcon("instagram", Instagram)
	registerIcon("italic", Italic)
	registerIcon("iteration-ccw", IterationCcw)
	registerIcon("iteration-cw", IterationCw)
	registerIcon("japanese-yen", JapaneseYen)
	registerIcon("joystick", Joystick)
	registerIcon("kanban", Kanban)
	registerIcon("kayak", Kayak)
	registerIcon("key", Key)
	registerIcon("key-round", KeyRound)
	registerIcon("key-square", KeySquare)
	registerIcon("keyboard", Keyboard)
	registerIcon("keyboard-music", KeyboardMusic)
	registerIcon("keyboard-off", KeyboardOff)
	registerIcon("lamp", Lamp)
	registerIcon("lamp-ceiling", LampCeiling)
	registerIcon("lamp-desk", LampDesk)
	registerIcon("lamp-floor", LampFloor)
	registerIcon("lamp-wall-down", LampWallDown)
	registerIcon("lamp-wall-up", LampWallUp)
	registerIcon("land-plot", LandPlot)
	registerIcon("landmark", Landmark)
	registerIcon("languages", Languages)
	registerIcon("laptop", Laptop)
	registerIcon("laptop-minimal", LaptopMinimal)
	registerIcon("laptop-minimal-check", LaptopMinimalCheck)
	registerIcon("lasso", Lasso)
	registerIcon("lasso-select", LassoSelect)
	registerIcon("laugh", Laugh)
	registerIcon("layers", Layers)
	registerIcon("layers-2", Layers2)
	registerIcon("layout-dashboard", LayoutDashboard)
	registerIcon("layout-grid", LayoutGrid)
	registerIcon("layout-list", LayoutList)
	registerIcon("layout-panel-left", LayoutPanelLeft)
	registerIcon("layout-panel-top", LayoutPanelTop)
	registerIcon("layout-template", LayoutTemplate)
	registerIcon("leaf", Leaf)
	registerIcon("leafy-green", LeafyGreen)
	registerIcon("lectern", Lectern)
	registerIcon("library", Library)
	registerIcon("library-big", LibraryBig)
	registerIcon("life-buoy", LifeBuoy)
	registerIcon("ligature", Ligature)
	registerIcon("lightbulb", Lightbulb)
	registerIcon("lightbulb-off", LightbulbOff)
	registerIcon("line-squiggle", LineSquiggle)
	registerIcon("link", Link)
	registerIcon("link-2", Link2)
	registerIcon("link-2-off", Link2Off)
	registerIcon("linkedin", Linkedin)
	registerIcon("list", List)
	registerIcon("list-check", ListCheck)
	registerIcon("list-checks", ListChecks)
	registerIcon("list-chevrons-down-up", ListChevronsDownUp)
	registerIcon("list-chevrons-up-down", ListChevronsUpDown)
	registerIcon("list-collapse", ListCollapse)
	registerIcon("list-end", ListEnd)
	registerIcon("list-filter", ListFilter)
	registerIcon("list-filter-plus", ListFilterPlus)
	registerIcon("list-indent-decrease", ListIndentDecrease)
	registerIcon("list-indent-increase", ListIndentIncrease)
	registerIcon("list-minus", ListMinus)
	registerIcon("list-music", ListMusic)
	registerIcon("list-ordered", ListOrdered)
	registerIcon("list-plus", ListPlus)
	registerIcon("list-restart", ListRestart)
	registerIcon("list-start", ListStart)
	registerIcon("list-todo", ListTodo)
	registerIcon("list-tree", ListTree)
	registerIcon("list-video", ListVideo)
	registerIcon("list-x", ListX)
	registerIcon("loader", Loader)
	registerIcon("loader-circle", LoaderCircle)
	registerIcon("loader-pinwheel", LoaderPinwheel)
	registerIcon("locate", Locate)
	registerIcon("locate-fixed", LocateFixed)
	registerIcon("locate-off", LocateOff)
	registerIcon("lock", Lock)
	registerIcon("lock-keyhole", LockKeyhole)
	registerIcon("lock-keyhole-open", LockKeyholeOpen)
	registerIcon("lock-open", LockOpen)
	registerIcon("log-in", LogIn)
	registerIcon("log-out", LogOut)
	registerIcon("logs", Logs)
	registerIcon("lollipop", Lollipop)
	registerIcon("luggage", Luggage)
	registerIcon("magnet", Magnet)
	registerIcon("mail", Mail)
	registerIcon("mail-check", MailCheck)
	registerIcon("mail-minus", MailMinus)
	registerIcon("mail-open", MailOpen)
	registerIcon("mail-plus", MailPlus)
	registerIcon("mail-question-mark", MailQuestionMark)
	registerIcon("mail-search", MailSearch)
	registerIcon("mail-warning", MailWarning)
	registerIcon("mail-x", MailX)
	registerIcon("mailbox", Mailbox)
	registerIcon("mails", Mails)
	registerIcon("map", Map)
	registerIcon("map-minus", MapMinus)
	registerIcon("map-pin", MapPin)
	registerIcon("map-pin-check", MapPinCheck)
	registerIcon("map-pin-check-inside", MapPinCheckInside)
	registerIcon("map-pin-house", MapPinHouse)
	registerIcon("map-pin-minus", MapPinMinus)
	registerIcon("map-pin-minus-inside", MapPinMinusInside)
	registerIcon("map-pin-off", MapPinOff)
	registerIcon("map-pin-pen", MapPinPen)
	registerIcon("map-pin-plus", MapPinPlus)
	registerIcon("map-pin-plus-inside", MapPinPlusInside)
	registerIcon("map-pin-x", MapPinX)
	registerIcon("map-pin-x-inside", MapPinXInside)
	registerIcon("map-pinned", MapPinned)
	registerIcon("map-plus", MapPlus)
	registerIcon("mars", Mars)
	registerIcon("mars-stroke", MarsStroke)
	registerIcon("martini", Martini)
	registerIcon("maximize", Maximize)
	registerIcon("maximize-2", Maximize2)
	registerIcon("medal", Medal)
	registerIcon("megaphone", Megaphone)
	registerIcon("megaphone-off", MegaphoneOff)
	registerIcon("meh", Meh)
	registerIcon("memory-stick", MemoryStick)
	registerIcon("menu", Menu)
	registerIcon("merge", Merge)
	registerIcon("message-circle", MessageCircle)
	registerIcon("message-circle-code", MessageCircleCode)
	registerIcon("message-circle-dashed", MessageCircleDashed)
	registerIcon("message-circle-heart", MessageCircleHeart)
	registerIcon("message-circle-more", MessageCircleMore)
	registerIcon("message-circle-off", MessageCircleOff)
	registerIcon("message-circle-plus", MessageCirclePlus)
	registerIcon("message-circle-question-mark", MessageCircleQuestionMark)
	registerIcon("message-circle-reply", MessageCircleReply)
	registerIcon("message-circle-warning", MessageCircleWarning)
	registerIcon("message-circle-x", MessageCircleX)
	registerIcon("message-square", MessageSquare)
	registerIcon("message-square-code", MessageSquareCode)
	registerIcon("message-square-dashed", MessageSquareDashed)
	registerIcon("message-square-diff", MessageSquareDiff)
	registerIcon("message-square-dot", MessageSquareDot)
	registerIcon("message-square-heart", MessageSquareHeart)
	registerIcon("message-square-lock", MessageSquareLock)
	registerIcon("message-square-more", MessageSquareMore)
	registerIcon("message-square-off", MessageSquareOff)
	registerIcon("message-square-plus", MessageSquarePlus)
	registerIcon("message-square-quote", MessageSquareQuote)
	registerIcon("message-square-reply", MessageSquareReply)
	registerIcon("message-square-share", MessageSquareShare)
	registerIcon("message-square-text", MessageSquareText)
	registerIcon("message-square-warning", MessageSquareWarning)
	registerIcon("message-square-x", MessageSquareX)
	registerIcon("messages-square", MessagesSquare)
	registerIcon("mic", Mic)
	registerIcon("mic-off", MicOff)
	registerIcon("mic-vocal", MicVocal)
	registerIcon("microchip", Microchip)
	registerIcon("microscope", Microscope)
	registerIcon("microwave", Microwave)
	registerIcon("milestone", Milestone)
	registerIcon("milk", Milk)
	registerIcon("milk-off", MilkOff)
	registerIcon("minimize", Minimize)
	registerIcon("minimize-2", Minimize2)
	registerIcon("minus", Minus)
	registerIcon("monitor", Monitor)
	registerIcon("monitor-check", MonitorCheck)
	registerIcon("monitor-cloud", MonitorCloud)
	registerIcon("monitor-cog", MonitorCog)
	registerIcon("monitor-dot", MonitorDot)
	registerIcon("monitor-down", MonitorDown)
	registerIcon("monitor-off", MonitorOff)
	registerIcon("monitor-pause", MonitorPause)
	registerIcon("monitor-play", MonitorPlay)
	registerIcon("monitor-smartphone", MonitorSmartphone)
	registerIcon("monitor-speaker", MonitorSpeaker)
	registerIcon("monitor-stop", MonitorStop)
	registerIcon("monitor-up", MonitorUp)
	registerIcon("monitor-x", MonitorX)
	registerIcon("moon", Moon)
	registerIcon("moon-star", MoonStar)
	registerIcon("motorbike", Motorbike)
	registerIcon("mountain", Mountain)
	registerIcon("mountain-snow", MountainSnow)
	registerIcon("mouse", Mouse)
	registerIcon("mouse-off", MouseOff)
	registerIcon("mouse-pointer", MousePointer)
	registerIcon("mouse-pointer-2", MousePointer2)
	registerIcon("mouse-pointer-ban", MousePointerBan)
	registerIcon("mouse-pointer-click", MousePointerClick)
	registerIcon("move", Move)
	registerIcon("move-3d", Move3d)
	registerIcon("move-diagonal", MoveDiagonal)
	registerIcon("move-diagonal-2", MoveDiagonal2)
	registerIcon("move-down", MoveDown)
	registerIcon("move-down-left", MoveDownLeft)
	registerIcon("move-down-right", MoveDownRight)
	registerIcon("move-horizontal", MoveHorizontal)
	registerIcon("move-left", MoveLeft)
	registerIcon("move-right", MoveRight)
	registerIcon("move-up", MoveUp)
	registerIcon("move-up-left", MoveUpLeft)
	registerIcon("move-up-right", MoveUpRight)
	registerIcon("move-vertical", MoveVertical)
	registerIcon("music", Music)
	registerIcon("music-2", Music2)
	registerIcon("music-3", Music3)
	registerIcon("music-4", Music4)
	registerIcon("navigation", Navigation)
	registerIcon("navigation-2", Navigation2)
	registerIcon("navigation-2-off", Navigation2Off)
	registerIcon("navigation-off", NavigationOff)
	registerIcon("network", Network)
	registerIcon("newspaper", Newspaper)
	registerIcon("nfc", Nfc)
	registerIcon("non-binary", NonBinary)
	registerIcon("notebook", Notebook)
	registerIcon("notebook-pen", NotebookPen)
	registerIcon("notebook-tabs", NotebookTabs)
	registerIcon("notebook-text", NotebookText)
	registerIcon("notepad-text", NotepadText)
	registerIcon("notepad-text-dashed", NotepadTextDashed)
	registerIcon("nut", Nut)
	registerIcon("nut-off", NutOff)
	registerIcon("octagon", Octagon)
	registerIcon("octagon-alert", OctagonAlert)
	registerIcon("octagon-minus", OctagonMinus)
	registerIcon("octagon-pause", OctagonPause)
	registerIcon("octagon-x", OctagonX)
	registerIcon("omega", Omega)
	registerIcon("option", Option)
	registerIcon("orbit", Orbit)
	registerIcon("origami", Origami)
	registerIcon("package", Package)
	registerIcon("package-2", Package2)
	registerIcon("package-check", PackageCheck)
	registerIcon("package-minus", PackageMinus)
	registerIcon("package-open", PackageOpen)
	registerIcon("package-plus", PackagePlus)
	registerIcon("package-search", PackageSearch)
	registerIcon("package-x", PackageX)
	registerIcon("paint-bucket", PaintBucket)
	registerIcon("paint-roller", PaintRoller)
	registerIcon("paintbrush", Paintbrush)
	registerIcon("paintbrush-vertical", PaintbrushVertical)
	registerIcon("palette", Palette)
	registerIcon("panda", Panda)
	registerIcon("panel-bottom", PanelBottom)
	registerIcon("panel-bottom-close", PanelBottomClose)
	registerIcon("panel-bottom-dashed", PanelBottomDashed)
	registerIcon("panel-bottom-open", PanelBottomOpen)
	registerIcon("panel-left", PanelLeft)
	registerIcon("panel-left-close", PanelLeftClose)
	registerIcon("panel-left-dashed", PanelLeftDashed)
	registerIcon("panel-left-open", PanelLeftOpen)
	registerIcon("panel-left-right-dashed", PanelLeftRightDashed)
	registerIcon("panel-right", PanelRight)
	registerIcon("panel-right-close", PanelRightClose)
	registerIcon("panel-right-dashed", PanelRightDashed)
	registerIcon("panel-right-open", PanelRightOpen)
	registerIcon("panel-top", PanelTop)
	registerIcon("panel-top-bottom-dashed", PanelTopBottomDashed)
	registerIcon("panel-top-close", PanelTopClose)
	registerIcon("panel-top-dashed", PanelTopDashed)
	registerIcon("panel-top-open", PanelTopOpen)
	registerIcon("panels-left-bottom", PanelsLeftBottom)
	registerIcon("panels-right-bottom", PanelsRightBottom)
	registerIcon("panels-top-left", PanelsTopLeft)
	registerIcon("paperclip", Paperclip)
	registerIcon("parentheses", Parentheses)
	registerIcon("parking-meter", ParkingMeter)
	registerIcon("party-popper", PartyPopper)
	registerIcon("pause", Pause)
	registerIcon("paw-print", PawPrint)
	registerIcon("pc-case", PcCase)
	registerIcon("pen", Pen)
	registerIcon("pen-line", PenLine)
	registerIcon("pen-off", PenOff)
	registerIcon("pen-tool", PenTool)
	registerIcon("pencil", Pencil)
	registerIcon("pencil-line", PencilLine)
	registerIcon("pencil-off", PencilOff)
	registerIcon("pencil-ruler", PencilRuler)
	registerIcon("pentagon", Pentagon)
	registerIcon("percent", Percent)
	registerIcon("person-standing", PersonStanding)
	registerIcon("philippine-peso", PhilippinePeso)
	registerIcon("phone", Phone)
	registerIcon("phone-call", PhoneCall)
	registerIcon("phone-forwarded", PhoneForwarded)
	registerIcon("phone-incoming", PhoneIncoming)
	registerIcon("phone-missed", PhoneMissed)
	registerIcon("phone-off", PhoneOff)
	registerIcon("phone-outgoing", PhoneOutgoing)
	registerIcon("pi", Pi)
	registerIcon("piano", Piano)
	registerIcon("pickaxe", Pickaxe)
	registerIcon("picture-in-picture", PictureInPicture)
	registerIcon("picture-in-picture-2", PictureInPicture2)
	registerIcon("piggy-bank", PiggyBank)
	registerIcon("pilcrow", Pilcrow)
	registerIcon("pilcrow-left", PilcrowLeft)
	registerIcon("pilcrow-right", PilcrowRight)
	registerIcon("pill", Pill)
	registerIcon("pill-bottle", PillBottle)
	registerIcon("pin", Pin)
	registerIcon("pin-off", PinOff)
	registerIcon("pipette", Pipette)
	registerIcon("pizza", Pizza)
	registerIcon("plane", Plane)
	registerIcon("plane-landing", PlaneLanding)
	registerIcon("plane-takeoff", PlaneTakeoff)
	registerIcon("play", Play)
	registerIcon("plug", Plug)
	registerIcon("plug-2", Plug2)
	registerIcon("plug-zap", PlugZap)
	registerIcon("plus", Plus)
	registerIcon("pocket", Pocket)
	registerIcon("pocket-knife", PocketKnife)
	registerIcon("podcast", Podcast)
	registerIcon("pointer", Pointer)
	registerIcon("pointer-off", PointerOff)
	registerIcon("popcorn", Popcorn)
	registerIcon("popsicle", Popsicle)
	registerIcon("pound-sterling", PoundSterling)
	registerIcon("power", Power)
	registerIcon("power-off", PowerOff)
	registerIcon("presentation", Presentation)
	registerIcon("printer", Printer)
	registerIcon("printer-check", PrinterCheck)
	registerIcon("projector", Projector)
	registerIcon("proportions", Proportions)
	registerIcon("puzzle", Puzzle)
	registerIcon("pyramid", Pyramid)
	registerIcon("qr-code", QrCode)
	registerIcon("quote", Quote)
	registerIcon("rabbit", Rabbit)
	registerIcon("radar", Radar)
	registerIcon("radiation", Radiation)
	registerIcon("radical", Radical)
	registerIcon("radio", Radio)
	registerIcon("radio-receiver", RadioReceiver)
	registerIcon("radio-tower", RadioTower)
	registerIcon("radius", Radius)
	registerIcon("rail-symbol", RailSymbol)
	registerIcon("rainbow", Rainbow)
	registerIcon("rat", Rat)
	registerIcon("ratio", Ratio)
	registerIcon("receipt", Receipt)
	registerIcon("receipt-cent", ReceiptCent)
	registerIcon("receipt-euro", ReceiptEuro)
	registerIcon("receipt-indian-rupee", ReceiptIndianRupee)
	registerIcon("receipt-japanese-yen", ReceiptJapaneseYen)
	registerIcon("receipt-pound-sterling", ReceiptPoundSterling)
	registerIcon("receipt-russian-ruble", ReceiptRussianRuble)
	registerIcon("receipt-swiss-franc", ReceiptSwissFranc)
	registerIcon("receipt-text", ReceiptText)
	registerIcon("receipt-turkish-lira", ReceiptTurkishLira)
	registerIcon("rectangle-circle", RectangleCircle)
	registerIcon("rectangle-ellipsis", RectangleEllipsis)
	registerIcon("rectangle-goggles", RectangleGoggles)
	registerIcon("rectangle-horizontal", RectangleHorizontal)
	registerIcon("rectangle-vertical", RectangleVertical)
	registerIcon("recycle", Recycle)
	registerIcon("redo", Redo)
	registerIcon("redo-2", Redo2)
	registerIcon("redo-dot", RedoDot)
	registerIcon("refresh-ccw", RefreshCcw)
	registerIcon("refresh-ccw-dot", RefreshCcwDot)
	registerIcon("refresh-cw", RefreshCw)
	registerIcon("refresh-cw-off", RefreshCwOff)
	registerIcon("refrigerator", Refrigerator)
	registerIcon("regex", Regex)
	registerIcon("remove-formatting", RemoveFormatting)
	registerIcon("repeat", Repeat)
	registerIcon("repeat-1", Repeat1)
	registerIcon("repeat-2", Repeat2)
	registerIcon("replace", Replace)
	registerIcon("replace-all", ReplaceAll)
	registerIcon("reply", Reply)
	registerIcon("reply-all", ReplyAll)
	registerIcon("rewind", Rewind)
	registerIcon("ribbon", Ribbon)
	registerIcon("rocket", Rocket)
	registerIcon("rocking-chair", RockingChair)
	registerIcon("roller-coaster", RollerCoaster)
	registerIcon("rose", Rose)
	registerIcon("rotate-3d", Rotate3d)
	registerIcon("rotate-ccw", RotateCcw)
	registerIcon("rotate-ccw-key", RotateCcwKey)
	registerIcon("rotate-ccw-square", RotateCcwSquare)
	registerIcon("rotate-cw", RotateCw)
	registerIcon("rotate-cw-square", RotateCwSquare)
	registerIcon("route", Route)
	registerIcon("route-off", RouteOff)
	registerIcon("router", Router)
	registerIcon("rows-2", Rows2)
	registerIcon("rows-3", Rows3)
	registerIcon("rows-4", Rows4)
	registerIcon("rss", Rss)
	registerIcon("ruler", Ruler)
	registerIcon("ruler-dimension-line", RulerDimensionLine)
	registerIcon("russian-ruble", RussianRuble)
	registerIcon("sailboat", Sailboat)
	registerIcon("salad", Salad)
	registerIcon("sandwich", Sandwich)
	registerIcon("satellite", Satellite)
	registerIcon("satellite-dish", SatelliteDish)
	registerIcon("saudi-riyal", SaudiRiyal)
	registerIcon("save", Save)
	registerIcon("save-all", SaveAll)
	registerIcon("save-off", SaveOff)
	registerIcon("scale", Scale)
	registerIcon("scale-3d", Scale3d)
	registerIcon("scaling", Scaling)
	registerIcon("scan", Scan)
	registerIcon("scan-barcode", ScanBarcode)
	registerIcon("scan-eye", ScanEye)
	registerIcon("scan-face", ScanFace)
	registerIcon("scan-heart", ScanHeart)
	registerIcon("scan-line", ScanLine)
	registerIcon("scan-qr-code", ScanQrCode)
	registerIcon("scan-search", ScanSearch)
	registerIcon("scan-text", ScanText)
	registerIcon("school", School)
	registerIcon("scissors", Scissors)
	registerIcon("scissors-line-dashed", ScissorsLineDashed)
	registerIcon("screen-share", ScreenShare)
	registerIcon("screen-share-off", ScreenShareOff)
	registerIcon("scroll", Scroll)
	registerIcon("scroll-text", ScrollText)
	registerIcon("search", Search)
	registerIcon("search-check", SearchCheck)
	registerIcon("search-code", SearchCode)
	registerIcon("search-slash", SearchSlash)
	registerIcon("search-x", SearchX)
	registerIcon("section", Section)
	registerIcon("send", Send)
	registerIcon("send-horizontal", SendHorizontal)
	registerIcon("send-to-back", SendToBack)
	registerIcon("separator-horizontal", SeparatorHorizontal)
	registerIcon("separator-vertical", SeparatorVertical)
	registerIcon("server", Server)
	registerIcon("server-cog", ServerCog)
	registerIcon("server-crash", ServerCrash)
	registerIcon("server-off", ServerOff)
	registerIcon("settings", Settings)
	registerIcon("settings-2", Settings2)
	registerIcon("shapes", Shapes)
	registerIcon("share", Share)
	registerIcon("share-2", Share2)
	registerIcon("sheet", Sheet)
	registerIcon("shell", Shell)
	registerIcon("shield", Shield)
	registerIcon("shield-alert", ShieldAlert)
	registerIcon("shield-ban", ShieldBan)
	registerIcon("shield-check", ShieldCheck)
	registerIcon("shield-ellipsis", ShieldEllipsis)
	registerIcon("shield-half", ShieldHalf)
	registerIcon("shield-minus", ShieldMinus)
	registerIcon("shield-off", ShieldOff)
	registerIcon("shield-plus", ShieldPlus)
	registerIcon("shield-question-mark", ShieldQuestionMark)
	registerIcon("shield-user", ShieldUser)
	registerIcon("shield-x", ShieldX)
	registerIcon("ship", Ship)
	registerIcon("ship-wheel", ShipWheel)
	registerIcon("shirt", Shirt)
	registerIcon("shopping-bag", ShoppingBag)
	registerIcon("shopping-basket", ShoppingBasket)
	registerIcon("shopping-cart", ShoppingCart)
	registerIcon("shovel", Shovel)
	registerIcon("shower-head", ShowerHead)
	registerIcon("shredder", Shredder)
	registerIcon("shrimp", Shrimp)
	registerIcon("shrink", Shrink)
	registerIcon("shrub", Shrub)
	registerIcon("shuffle", Shuffle)
	registerIcon("sigma", Sigma)
	registerIcon("signal", Signal)
	registerIcon("signal-high", SignalHigh)
	registerIcon("signal-low", SignalLow)
	registerIcon("signal-medium", SignalMedium)
	registerIcon("signal-zero", SignalZero)
	registerIcon("signature", Signature)
	registerIcon("signpost", Signpost)
	registerIcon("signpost-big", SignpostBig)
	registerIcon("siren", Siren)
	registerIcon("skip-back", SkipBack)
	registerIcon("skip-forward", SkipForward)
	registerIcon("skull", Skull)
	registerIcon("slack", Slack)
	registerIcon("slash", Slash)
	registerIcon("slice", Slice)
	registerIcon("sliders-horizontal", SlidersHorizontal)
	registerIcon("sliders-vertical", SlidersVertical)
	registerIcon("smartphone", Smartphone)
	registerIcon("smartphone-charging", SmartphoneCharging)
	registerIcon("smartphone-nfc", SmartphoneNfc)
	registerIcon("smile", Smile)
	registerIcon("smile-plus", SmilePlus)
	registerIcon("snail", Snail)
	registerIcon("snowflake", Snowflake)
	registerIcon("soap-dispenser-droplet", SoapDispenserDroplet)
	registerIcon("sofa", Sofa)
	registerIcon("soup", Soup)
	registerIcon("space", Space)
	registerIcon("spade", Spade)
	registerIcon("sparkle", Sparkle)
	registerIcon("sparkles", Sparkles)
	registerIcon("speaker", Speaker)
	registerIcon("speech", Speech)
	registerIcon("spell-check", SpellCheck)
	registerIcon("spell-check-2", SpellCheck2)
	registerIcon("spline", Spline)
	registerIcon("spline-pointer", SplinePointer)
	registerIcon("split", Split)
	registerIcon("spool", Spool)
	registerIcon("spotlight", Spotlight)
	registerIcon("spray-can", SprayCan)
	registerIcon("sprout", Sprout)
	registerIcon("square", Square)
	registerIcon("square-activity", SquareActivity)
	registerIcon("square-arrow-down", SquareArrowDown)
	registerIcon("square-arrow-down-left", SquareArrowDownLeft)
	registerIcon("square-arrow-down-right", SquareArrowDownRight)
	registerIcon("square-arrow-left", SquareArrowLeft)
	registerIcon("square-arrow-out-down-left", SquareArrowOutDownLeft)
	registerIcon("square-arrow-out-down-right", SquareArrowOutDownRight)
	registerIcon("square-arrow-out-up-left", SquareArrowOutUpLeft)
	registerIcon("square-arrow-out-up-right", SquareArrowOutUpRight)
	registerIcon("square-arrow-right", SquareArrowRight)
	registerIcon("square-arrow-up", SquareArrowUp)
	registerIcon("square-arrow-up-left", SquareArrowUpLeft)
	registerIcon("square-arrow-up-right", SquareArrowUpRight)
	registerIcon("square-asterisk", SquareAsterisk)
	registerIcon("square-bottom-dashed-scissors", SquareBottomDashedScissors)
	registerIcon("square-chart-gantt", SquareChartGantt)
	registerIcon("square-check", SquareCheck)
	registerIcon("square-check-big", SquareCheckBig)
	registerIcon("square-chevron-down", SquareChevronDown)
	registerIcon("square-chevron-left", SquareChevronLeft)
	registerIcon("square-chevron-right", SquareChevronRight)
	registerIcon("square-chevron-up", SquareChevronUp)
	registerIcon("square-code", SquareCode)
	registerIcon("square-dashed", SquareDashed)
	registerIcon("square-dashed-bottom", SquareDashedBottom)
	registerIcon("square-dashed-bottom-code", SquareDashedBottomCode)
	registerIcon("square-dashed-kanban", SquareDashedKanban)
	registerIcon("square-dashed-mouse-pointer", SquareDashedMousePointer)
	registerIcon("square-dashed-top-solid", SquareDashedTopSolid)
	registerIcon("square-divide", SquareDivide)
	registerIcon("square-dot", SquareDot)
	registerIcon("square-equal", SquareEqual)
	registerIcon("square-function", SquareFunction)
	registerIcon("square-kanban", SquareKanban)
	registerIcon("square-library", SquareLibrary)
	registerIcon("square-m", SquareM)
	registerIcon("square-menu", SquareMenu)
	registerIcon("square-minus", SquareMinus)
	registerIcon("square-mouse-pointer", SquareMousePointer)
	registerIcon("square-parking", SquareParking)
	registerIcon("square-parking-off", SquareParkingOff)
	registerIcon("square-pause", SquarePause)
	registerIcon("square-pen", SquarePen)
	registerIcon("square-percent", SquarePercent)
	registerIcon("square-pi", SquarePi)
	registerIcon("square-pilcrow", SquarePilcrow)
	registerIcon("square-play", SquarePlay)
	registerIcon("square-plus", SquarePlus)
	registerIcon("square-power", SquarePower)
	registerIcon("square-radical", SquareRadical)
	registerIcon("square-round-corner", SquareRoundCorner)
	registerIcon("square-scissors", SquareScissors)
	registerIcon("square-sigma", SquareSigma)
	registerIcon("square-slash", SquareSlash)
	registerIcon("square-split-horizontal", SquareSplitHorizontal)
	registerIcon("square-split-vertical", SquareSplitVertical)
	registerIcon("square-square", SquareSquare)
	registerIcon("square-stack", SquareStack)
	registerIcon("square-star", SquareStar)
	registerIcon("square-stop", SquareStop)
	registerIcon("square-terminal", SquareTerminal)
	registerIcon("square-user", SquareUser)
	registerIcon("square-user-round", SquareUserRound)
	registerIcon("square-x", SquareX)
	registerIcon("squares-exclude", SquaresExclude)
	registerIcon("squares-intersect", SquaresIntersect)
	registerIcon("squares-subtract", SquaresSubtract)
	registerIcon("squares-unite", SquaresUnite)
	registerIcon("squircle", Squircle)
	registerIcon("squircle-dashed", SquircleDashed)
	registerIcon("squirrel", Squirrel)
	registerIcon("stamp", Stamp)
	registerIcon("star", Star)
	registerIcon("star-half", StarHalf)
	registerIcon("star-off", StarOff)
	registerIcon("step-back", StepBack)
	registerIcon("step-forward", StepForward)
	registerIcon("stethoscope", Stethoscope)
	registerIcon("sticker", Sticker)
	registerIcon("sticky-note", StickyNote)
	registerIcon("store", Store)
	registerIcon("stretch-horizontal", StretchHorizontal)
	registerIcon("stretch-vertical", StretchVertical)
	registerIcon("strikethrough", Strikethrough)
	registerIcon("subscript", Subscript)
	registerIcon("sun", Sun)
	registerIcon("sun-dim", SunDim)
	registerIcon("sun-medium", SunMedium)
	registerIcon("sun-moon", SunMoon)
	registerIcon("sun-snow", SunSnow)
	registerIcon("sunrise", Sunrise)
	registerIcon("sunset", Sunset)
	registerIcon("superscript", Superscript)
	registerIcon("swatch-book", SwatchBook)
	registerIcon("swiss-franc", SwissFranc)
	registerIcon("switch-camera", SwitchCamera)
	registerIcon("sword", Sword)
	registerIcon("swords", Swords)
	registerIcon("syringe", Syringe)
	registerIcon("table", Table)
	registerIcon("table-2", Table2)
	registerIcon("table-cells-merge", TableCellsMerge)
	registerIcon("table-cells-split", TableCellsSplit)
	registerIcon("table-columns-split", TableColumnsSplit)
	registerIcon("table-of-contents", TableOfContents)
	registerIcon("table-properties", TableProperties)
	registerIcon("table-rows-split", TableRowsSplit)
	registerIcon("tablet", Tablet)
	registerIcon("tablet-smartphone", TabletSmartphone)
	registerIcon("tablets", Tablets)
	registerIcon("tag", Tag)
	registerIcon("tags", Tags)
	registerIcon("tally-1", Tally1)
	registerIcon("tally-2", Tally2)
	registerIcon("tally-3", Tally3)
	registerIcon("tally-4", Tally4)
	registerIcon("tally-5", Tally5)
	registerIcon("tangent", Tangent)
	registerIcon("target", Target)
	registerIcon("telescope", Telescope)
	registerIcon("tent", Tent)
	registerIcon("tent-tree", TentTree)
	registerIcon("terminal", Terminal)
	registerIcon("test-tube", TestTube)
	registerIcon("test-tube-diagonal", TestTubeDiagonal)
	registerIcon("test-tubes", TestTubes)
	registerIcon("text-align-center", TextAlignCenter)
	registerIcon("text-align-end", TextAlignEnd)
	registerIcon("text-align-justify", TextAlignJustify)
	registerIcon("text-align-start", TextAlignStart)
	registerIcon("text-cursor", TextCursor)
	registerIcon("text-cursor-input", TextCursorInput)
	registerIcon("text-initial", TextInitial)
	registerIcon("text-quote", TextQuote)
	registerIcon("text-search", TextSearch)
	registerIcon("text-select", TextSelect)
	registerIcon("text-wrap", TextWrap)
	registerIcon("theater", Theater)
	registerIcon("thermometer", Thermometer)
	registerIcon("thermometer-snowflake", ThermometerSnowflake)
	registerIcon("thermometer-sun", ThermometerSun)
	registerIcon("thumbs-down", ThumbsDown)
	registerIcon("thumbs-up", ThumbsUp)
	registerIcon("ticket", Ticket)
	registerIcon("ticket-check", TicketCheck)
	registerIcon("ticket-minus", TicketMinus)
	registerIcon("ticket-percent", TicketPercent)
	registerIcon("ticket-plus", TicketPlus)
	registerIcon("ticket-slash", TicketSlash)
	registerIcon("ticket-x", TicketX)
	registerIcon("tickets", Tickets)
	registerIcon("tickets-plane", TicketsPlane)
	registerIcon("timer", Timer)
	registerIcon("timer-off", TimerOff)
	registerIcon("timer-reset", TimerReset)
	registerIcon("toggle-left", ToggleLeft)
	registerIcon("toggle-right", ToggleRight)
	registerIcon("toilet", Toilet)
	registerIcon("tool-case", ToolCase)
	registerIcon("tornado", Tornado)
	registerIcon("torus", Torus)
	registerIcon("touchpad", Touchpad)
	registerIcon("touchpad-off", TouchpadOff)
	registerIcon("tower-control", TowerControl)
	registerIcon("toy-brick", ToyBrick)
	registerIcon("tractor", Tractor)
	registerIcon("traffic-cone", TrafficCone)
	registerIcon("train-front", TrainFront)
	registerIcon("train-front-tunnel", TrainFrontTunnel)
	registerIcon("train-track", TrainTrack)
	registerIcon("tram-front", TramFront)
	registerIcon("transgender", Transgender)
	registerIcon("trash", Trash)
	registerIcon("trash-2", Trash2)
	registerIcon("tree-deciduous", TreeDeciduous)
	registerIcon("tree-palm", TreePalm)
	registerIcon("tree-pine", TreePine)
	registerIcon("trees", Trees)
	registerIcon("trello", Trello)
	registerIcon("trending-down", TrendingDown)
	registerIcon("trending-up", TrendingUp)
	registerIcon("trending-up-down", TrendingUpDown)
	registerIcon("triangle", Triangle)
	registerIcon("triangle-alert", TriangleAlert)
	registerIcon("triangle-dashed", TriangleDashed)
	registerIcon("triangle-right", TriangleRight)
	registerIcon("trophy", Trophy)
	registerIcon("truck", Truck)
	registerIcon("truck-electric", TruckElectric)
	registerIcon("turkish-lira", TurkishLira)
	registerIcon("turntable", Turntable)
	registerIcon("turtle", Turtle)
	registerIcon("tv", Tv)
	registerIcon("tv-minimal", TvMinimal)
	registerIcon("tv-minimal-play", TvMinimalPlay)
	registerIcon("twitch", Twitch)
	registerIcon("twitter", Twitter)
	registerIcon("type", Type)
	registerIcon("type-outline", TypeOutline)
	registerIcon("umbrella", Umbrella)
	registerIcon("umbrella-off", UmbrellaOff)
	registerIcon("underline", Underline)
	registerIcon("undo", Undo)
	registerIcon("undo-2", Undo2)
	registerIcon("undo-dot", UndoDot)
	registerIcon("unfold-horizontal", UnfoldHorizontal)
	registerIcon("unfold-vertical", UnfoldVertical)
	registerIcon("ungroup", Ungroup)
	registerIcon("university", University)
	registerIcon("unlink", Unlink)
	registerIcon("unlink-2", Unlink2)
	registerIcon("unplug", Unplug)
	registerIcon("upload", Upload)
	registerIcon("usb", Usb)
	registerIcon("user", User)
	registerIcon("user-check", UserCheck)
	registerIcon("user-cog", UserCog)
	registerIcon("user-lock", UserLock)
	registerIcon("user-minus", UserMinus)
	registerIcon("user-pen", UserPen)
	registerIcon("user-plus", UserPlus)
	registerIcon("user-round", UserRound)
	registerIcon("user-round-check", UserRoundCheck)
	registerIcon("user-round-cog", UserRoundCog)
	registerIcon("user-round-minus", UserRoundMinus)
	registerIcon("user-round-pen", UserRoundPen)
	registerIcon("user-round-plus", UserRoundPlus)
	registerIcon("user-round-search", UserRoundSearch)
	registerIcon("user-round-x", UserRoundX)
	registerIcon("user-search", UserSearch)
	registerIcon("user-star", UserStar)
	registerIcon("user-x", UserX)
	registerIcon("users", Users)
	registerIcon("users-round", UsersRound)
	registerIcon("utensils", Utensils)
	registerIcon("utensils-crossed", UtensilsCrossed)
	registerIcon("utility-pole", UtilityPole)
	registerIcon("variable", Variable)
	registerIcon("vault", Vault)
	registerIcon("vector-square", VectorSquare)
	registerIcon("vegan", Vegan)
	registerIcon("venetian-mask", VenetianMask)
	registerIcon("venus", Venus)
	registerIcon("venus-and-mars", VenusAndMars)
	registerIcon("vibrate", Vibrate)
	registerIcon("vibrate-off", VibrateOff)
	registerIcon("video", Video)
	registerIcon("video-off", VideoOff)
	registerIcon("videotape", Videotape)
	registerIcon("view", View)
	registerIcon("voicemail", Voicemail)
	registerIcon("volleyball", Volleyball)
	registerIcon("volume", Volume)
	registerIcon("volume-1", Volume1)
	registerIcon("volume-2", Volume2)
	registerIcon("volume-off", VolumeOff)
	registerIcon("volume-x", VolumeX)
	registerIcon("vote", Vote)
	registerIcon("wallet", Wallet)
	registerIcon("wallet-cards", WalletCards)
	registerIcon("wallet-minimal", WalletMinimal)
	registerIcon("wallpaper", Wallpaper)
	registerIcon("wand", Wand)
	registerIcon("wand-sparkles", WandSparkles)
	registerIcon("warehouse", Warehouse)
	registerIcon("washing-machine", WashingMachine)
	registerIcon("watch", Watch)
	registerIcon("waves", Waves)
	registerIcon("waves-ladder", WavesLadder)
	registerIcon("waypoints", Waypoints)
	registerIcon("webcam", Webcam)
	registerIcon("webhook", Webhook)
	registerIcon("webhook-off", WebhookOff)
	registerIcon("weight", Weight)
	registerIcon("wheat", Wheat)
	registerIcon("wheat-off", WheatOff)
	registerIcon("whole-word", WholeWord)
	registerIcon("wifi", Wifi)
	registerIcon("wifi-cog", WifiCog)
	registerIcon("wifi-high", WifiHigh)
	registerIcon("wifi-low", WifiLow)
	registerIcon("wifi-off", WifiOff)
	registerIcon("wifi-pen", WifiPen)
	registerIcon("wifi-sync", WifiSync)
	registerIcon("wifi-zero", WifiZero)
	registerIcon("wind", Wind)
	registerIcon("wind-arrow-down", WindArrowDown)
	registerIcon("wine", Wine)
	registerIcon("wine-off", WineOff)
	registerIcon("workflow", Workflow)
	registerIcon("worm", Worm)
	registerIcon("wrench", Wrench)
	registerIcon("x", X)
	registerIcon("youtube", Youtube)
	registerIcon("zap", Zap)
	registerIcon("zap-off", ZapOff)
	registerIcon("zoom-in", ZoomIn)
	registerIcon("zoom-out", ZoomOut)
}

// AArrowDown renders the "a-arrow-down" icon.
//
// Usage in templates:
//
//	{{ lucide "a-arrow-down" }}
//
// Direct usage in Go:
//
//	lucide.AArrowDown()
//	lucide.AArrowDown(lucide.Options{Size: 32, Class: "my-icon"})
func AArrowDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 12 4 4 4-4" /> <path d="M18 16V7" /> <path d="m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" /> <path d="M3.304 13h6.392" />`, opt)
}

// AArrowUp renders the "a-arrow-up" icon.
//
// Usage in templates:
//
//	{{ lucide "a-arrow-up" }}
//
// Direct usage in Go:
//
//	lucide.AArrowUp()
//	lucide.AArrowUp(lucide.Options{Size: 32, Class: "my-icon"})
func AArrowUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 11 4-4 4 4" /> <path d="M18 16V7" /> <path d="m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" /> <path d="M3.304 13h6.392" />`, opt)
}

// ALargeSmall renders the "a-large-small" icon.
//
// Usage in templates:
//
//	{{ lucide "a-large-small" }}
//
// Direct usage in Go:
//
//	lucide.ALargeSmall()
//	lucide.ALargeSmall(lucide.Options{Size: 32, Class: "my-icon"})
func ALargeSmall(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 16 2.536-7.328a1.02 1.02 1 0 1 1.928 0L22 16" /> <path d="M15.697 14h5.606" /> <path d="m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" /> <path d="M3.304 13h6.392" />`, opt)
}

// Accessibility renders the "accessibility" icon.
//
// Usage in templates:
//
//	{{ lucide "accessibility" }}
//
// Direct usage in Go:
//
//	lucide.Accessibility()
//	lucide.Accessibility(lucide.Options{Size: 32, Class: "my-icon"})
func Accessibility(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="16" cy="4" r="1" /> <path d="m18 19 1-7-6 1" /> <path d="m5 8 3-3 5.5 3-2.36 3.5" /> <path d="M4.24 14.5a5 5 0 0 0 6.88 6" /> <path d="M13.76 17.5a5 5 0 0 0-6.88-6" />`, opt)
}

// Activity renders the "activity" icon.
//
// Usage in templates:
//
//	{{ lucide "activity" }}
//
// Direct usage in Go:
//
//	lucide.Activity()
//	lucide.Activity(lucide.Options{Size: 32, Class: "my-icon"})
func Activity(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2" />`, opt)
}

// AirVent renders the "air-vent" icon.
//
// Usage in templates:
//
//	{{ lucide "air-vent" }}
//
// Direct usage in Go:
//
//	lucide.AirVent()
//	lucide.AirVent(lucide.Options{Size: 32, Class: "my-icon"})
func AirVent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 17.5a2.5 2.5 0 1 1-4 2.03V12" /> <path d="M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2" /> <path d="M6 8h12" /> <path d="M6.6 15.572A2 2 0 1 0 10 17v-5" />`, opt)
}

// Airplay renders the "airplay" icon.
//
// Usage in templates:
//
//	{{ lucide "airplay" }}
//
// Direct usage in Go:
//
//	lucide.Airplay()
//	lucide.Airplay(lucide.Options{Size: 32, Class: "my-icon"})
func Airplay(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1" /> <path d="m12 15 5 6H7Z" />`, opt)
}

// AlarmClock renders the "alarm-clock" icon.
//
// Usage in templates:
//
//	{{ lucide "alarm-clock" }}
//
// Direct usage in Go:
//
//	lucide.AlarmClock()
//	lucide.AlarmClock(lucide.Options{Size: 32, Class: "my-icon"})
func AlarmClock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="13" r="8" /> <path d="M12 9v4l2 2" /> <path d="M5 3 2 6" /> <path d="m22 6-3-3" /> <path d="M6.38 18.7 4 21" /> <path d="M17.64 18.67 20 21" />`, opt)
}

// AlarmClockCheck renders the "alarm-clock-check" icon.
//
// Usage in templates:
//
//	{{ lucide "alarm-clock-check" }}
//
// Direct usage in Go:
//
//	lucide.AlarmClockCheck()
//	lucide.AlarmClockCheck(lucide.Options{Size: 32, Class: "my-icon"})
func AlarmClockCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="13" r="8" /> <path d="M5 3 2 6" /> <path d="m22 6-3-3" /> <path d="M6.38 18.7 4 21" /> <path d="M17.64 18.67 20 21" /> <path d="m9 13 2 2 4-4" />`, opt)
}

// AlarmClockMinus renders the "alarm-clock-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "alarm-clock-minus" }}
//
// Direct usage in Go:
//
//	lucide.AlarmClockMinus()
//	lucide.AlarmClockMinus(lucide.Options{Size: 32, Class: "my-icon"})
func AlarmClockMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="13" r="8" /> <path d="M5 3 2 6" /> <path d="m22 6-3-3" /> <path d="M6.38 18.7 4 21" /> <path d="M17.64 18.67 20 21" /> <path d="M9 13h6" />`, opt)
}

// AlarmClockOff renders the "alarm-clock-off" icon.
//
// Usage in templates:
//
//	{{ lucide "alarm-clock-off" }}
//
// Direct usage in Go:
//
//	lucide.AlarmClockOff()
//	lucide.AlarmClockOff(lucide.Options{Size: 32, Class: "my-icon"})
func AlarmClockOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6.87 6.87a8 8 0 1 0 11.26 11.26" /> <path d="M19.9 14.25a8 8 0 0 0-9.15-9.15" /> <path d="m22 6-3-3" /> <path d="M6.26 18.67 4 21" /> <path d="m2 2 20 20" /> <path d="M4 4 2 6" />`, opt)
}

// AlarmClockPlus renders the "alarm-clock-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "alarm-clock-plus" }}
//
// Direct usage in Go:
//
//	lucide.AlarmClockPlus()
//	lucide.AlarmClockPlus(lucide.Options{Size: 32, Class: "my-icon"})
func AlarmClockPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="13" r="8" /> <path d="M5 3 2 6" /> <path d="m22 6-3-3" /> <path d="M6.38 18.7 4 21" /> <path d="M17.64 18.67 20 21" /> <path d="M12 10v6" /> <path d="M9 13h6" />`, opt)
}

// AlarmSmoke renders the "alarm-smoke" icon.
//
// Usage in templates:
//
//	{{ lucide "alarm-smoke" }}
//
// Direct usage in Go:
//
//	lucide.AlarmSmoke()
//	lucide.AlarmSmoke(lucide.Options{Size: 32, Class: "my-icon"})
func AlarmSmoke(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 21c0-2.5 2-2.5 2-5" /> <path d="M16 21c0-2.5 2-2.5 2-5" /> <path d="m19 8-.8 3a1.25 1.25 0 0 1-1.2 1H7a1.25 1.25 0 0 1-1.2-1L5 8" /> <path d="M21 3a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a1 1 0 0 1 1-1z" /> <path d="M6 21c0-2.5 2-2.5 2-5" />`, opt)
}

// Album renders the "album" icon.
//
// Usage in templates:
//
//	{{ lucide "album" }}
//
// Direct usage in Go:
//
//	lucide.Album()
//	lucide.Album(lucide.Options{Size: 32, Class: "my-icon"})
func Album(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <polyline points="11 3 11 11 14 8 17 11 17 3" />`, opt)
}

// AlignCenterHorizontal renders the "align-center-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "align-center-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.AlignCenterHorizontal()
//	lucide.AlignCenterHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func AlignCenterHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 12h20" /> <path d="M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4" /> <path d="M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4" /> <path d="M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1" /> <path d="M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1" />`, opt)
}

// AlignCenterVertical renders the "align-center-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "align-center-vertical" }}
//
// Direct usage in Go:
//
//	lucide.AlignCenterVertical()
//	lucide.AlignCenterVertical(lucide.Options{Size: 32, Class: "my-icon"})
func AlignCenterVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v20" /> <path d="M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4" /> <path d="M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4" /> <path d="M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1" /> <path d="M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1" />`, opt)
}

// AlignEndHorizontal renders the "align-end-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "align-end-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.AlignEndHorizontal()
//	lucide.AlignEndHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func AlignEndHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="16" x="4" y="2" rx="2" /> <rect width="6" height="9" x="14" y="9" rx="2" /> <path d="M22 22H2" />`, opt)
}

// AlignEndVertical renders the "align-end-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "align-end-vertical" }}
//
// Direct usage in Go:
//
//	lucide.AlignEndVertical()
//	lucide.AlignEndVertical(lucide.Options{Size: 32, Class: "my-icon"})
func AlignEndVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="16" height="6" x="2" y="4" rx="2" /> <rect width="9" height="6" x="9" y="14" rx="2" /> <path d="M22 22V2" />`, opt)
}

// AlignHorizontalDistributeCenter renders the "align-horizontal-distribute-center" icon.
//
// Usage in templates:
//
//	{{ lucide "align-horizontal-distribute-center" }}
//
// Direct usage in Go:
//
//	lucide.AlignHorizontalDistributeCenter()
//	lucide.AlignHorizontalDistributeCenter(lucide.Options{Size: 32, Class: "my-icon"})
func AlignHorizontalDistributeCenter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="14" x="4" y="5" rx="2" /> <rect width="6" height="10" x="14" y="7" rx="2" /> <path d="M17 22v-5" /> <path d="M17 7V2" /> <path d="M7 22v-3" /> <path d="M7 5V2" />`, opt)
}

// AlignHorizontalDistributeEnd renders the "align-horizontal-distribute-end" icon.
//
// Usage in templates:
//
//	{{ lucide "align-horizontal-distribute-end" }}
//
// Direct usage in Go:
//
//	lucide.AlignHorizontalDistributeEnd()
//	lucide.AlignHorizontalDistributeEnd(lucide.Options{Size: 32, Class: "my-icon"})
func AlignHorizontalDistributeEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="14" x="4" y="5" rx="2" /> <rect width="6" height="10" x="14" y="7" rx="2" /> <path d="M10 2v20" /> <path d="M20 2v20" />`, opt)
}

// AlignHorizontalDistributeStart renders the "align-horizontal-distribute-start" icon.
//
// Usage in templates:
//
//	{{ lucide "align-horizontal-distribute-start" }}
//
// Direct usage in Go:
//
//	lucide.AlignHorizontalDistributeStart()
//	lucide.AlignHorizontalDistributeStart(lucide.Options{Size: 32, Class: "my-icon"})
func AlignHorizontalDistributeStart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="14" x="4" y="5" rx="2" /> <rect width="6" height="10" x="14" y="7" rx="2" /> <path d="M4 2v20" /> <path d="M14 2v20" />`, opt)
}

// AlignHorizontalJustifyCenter renders the "align-horizontal-justify-center" icon.
//
// Usage in templates:
//
//	{{ lucide "align-horizontal-justify-center" }}
//
// Direct usage in Go:
//
//	lucide.AlignHorizontalJustifyCenter()
//	lucide.AlignHorizontalJustifyCenter(lucide.Options{Size: 32, Class: "my-icon"})
func AlignHorizontalJustifyCenter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="14" x="2" y="5" rx="2" /> <rect width="6" height="10" x="16" y="7" rx="2" /> <path d="M12 2v20" />`, opt)
}

// AlignHorizontalJustifyEnd renders the "align-horizontal-justify-end" icon.
//
// Usage in templates:
//
//	{{ lucide "align-horizontal-justify-end" }}
//
// Direct usage in Go:
//
//	lucide.AlignHorizontalJustifyEnd()
//	lucide.AlignHorizontalJustifyEnd(lucide.Options{Size: 32, Class: "my-icon"})
func AlignHorizontalJustifyEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="14" x="2" y="5" rx="2" /> <rect width="6" height="10" x="12" y="7" rx="2" /> <path d="M22 2v20" />`, opt)
}

// AlignHorizontalJustifyStart renders the "align-horizontal-justify-start" icon.
//
// Usage in templates:
//
//	{{ lucide "align-horizontal-justify-start" }}
//
// Direct usage in Go:
//
//	lucide.AlignHorizontalJustifyStart()
//	lucide.AlignHorizontalJustifyStart(lucide.Options{Size: 32, Class: "my-icon"})
func AlignHorizontalJustifyStart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="14" x="6" y="5" rx="2" /> <rect width="6" height="10" x="16" y="7" rx="2" /> <path d="M2 2v20" />`, opt)
}

// AlignHorizontalSpaceAround renders the "align-horizontal-space-around" icon.
//
// Usage in templates:
//
//	{{ lucide "align-horizontal-space-around" }}
//
// Direct usage in Go:
//
//	lucide.AlignHorizontalSpaceAround()
//	lucide.AlignHorizontalSpaceAround(lucide.Options{Size: 32, Class: "my-icon"})
func AlignHorizontalSpaceAround(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="10" x="9" y="7" rx="2" /> <path d="M4 22V2" /> <path d="M20 22V2" />`, opt)
}

// AlignHorizontalSpaceBetween renders the "align-horizontal-space-between" icon.
//
// Usage in templates:
//
//	{{ lucide "align-horizontal-space-between" }}
//
// Direct usage in Go:
//
//	lucide.AlignHorizontalSpaceBetween()
//	lucide.AlignHorizontalSpaceBetween(lucide.Options{Size: 32, Class: "my-icon"})
func AlignHorizontalSpaceBetween(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="14" x="3" y="5" rx="2" /> <rect width="6" height="10" x="15" y="7" rx="2" /> <path d="M3 2v20" /> <path d="M21 2v20" />`, opt)
}

// AlignStartHorizontal renders the "align-start-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "align-start-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.AlignStartHorizontal()
//	lucide.AlignStartHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func AlignStartHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="16" x="4" y="6" rx="2" /> <rect width="6" height="9" x="14" y="6" rx="2" /> <path d="M22 2H2" />`, opt)
}

// AlignStartVertical renders the "align-start-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "align-start-vertical" }}
//
// Direct usage in Go:
//
//	lucide.AlignStartVertical()
//	lucide.AlignStartVertical(lucide.Options{Size: 32, Class: "my-icon"})
func AlignStartVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="9" height="6" x="6" y="14" rx="2" /> <rect width="16" height="6" x="6" y="4" rx="2" /> <path d="M2 2v20" />`, opt)
}

// AlignVerticalDistributeCenter renders the "align-vertical-distribute-center" icon.
//
// Usage in templates:
//
//	{{ lucide "align-vertical-distribute-center" }}
//
// Direct usage in Go:
//
//	lucide.AlignVerticalDistributeCenter()
//	lucide.AlignVerticalDistributeCenter(lucide.Options{Size: 32, Class: "my-icon"})
func AlignVerticalDistributeCenter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17h-3" /> <path d="M22 7h-5" /> <path d="M5 17H2" /> <path d="M7 7H2" /> <rect x="5" y="14" width="14" height="6" rx="2" /> <rect x="7" y="4" width="10" height="6" rx="2" />`, opt)
}

// AlignVerticalDistributeEnd renders the "align-vertical-distribute-end" icon.
//
// Usage in templates:
//
//	{{ lucide "align-vertical-distribute-end" }}
//
// Direct usage in Go:
//
//	lucide.AlignVerticalDistributeEnd()
//	lucide.AlignVerticalDistributeEnd(lucide.Options{Size: 32, Class: "my-icon"})
func AlignVerticalDistributeEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="6" x="5" y="14" rx="2" /> <rect width="10" height="6" x="7" y="4" rx="2" /> <path d="M2 20h20" /> <path d="M2 10h20" />`, opt)
}

// AlignVerticalDistributeStart renders the "align-vertical-distribute-start" icon.
//
// Usage in templates:
//
//	{{ lucide "align-vertical-distribute-start" }}
//
// Direct usage in Go:
//
//	lucide.AlignVerticalDistributeStart()
//	lucide.AlignVerticalDistributeStart(lucide.Options{Size: 32, Class: "my-icon"})
func AlignVerticalDistributeStart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="6" x="5" y="14" rx="2" /> <rect width="10" height="6" x="7" y="4" rx="2" /> <path d="M2 14h20" /> <path d="M2 4h20" />`, opt)
}

// AlignVerticalJustifyCenter renders the "align-vertical-justify-center" icon.
//
// Usage in templates:
//
//	{{ lucide "align-vertical-justify-center" }}
//
// Direct usage in Go:
//
//	lucide.AlignVerticalJustifyCenter()
//	lucide.AlignVerticalJustifyCenter(lucide.Options{Size: 32, Class: "my-icon"})
func AlignVerticalJustifyCenter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="6" x="5" y="16" rx="2" /> <rect width="10" height="6" x="7" y="2" rx="2" /> <path d="M2 12h20" />`, opt)
}

// AlignVerticalJustifyEnd renders the "align-vertical-justify-end" icon.
//
// Usage in templates:
//
//	{{ lucide "align-vertical-justify-end" }}
//
// Direct usage in Go:
//
//	lucide.AlignVerticalJustifyEnd()
//	lucide.AlignVerticalJustifyEnd(lucide.Options{Size: 32, Class: "my-icon"})
func AlignVerticalJustifyEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="6" x="5" y="12" rx="2" /> <rect width="10" height="6" x="7" y="2" rx="2" /> <path d="M2 22h20" />`, opt)
}

// AlignVerticalJustifyStart renders the "align-vertical-justify-start" icon.
//
// Usage in templates:
//
//	{{ lucide "align-vertical-justify-start" }}
//
// Direct usage in Go:
//
//	lucide.AlignVerticalJustifyStart()
//	lucide.AlignVerticalJustifyStart(lucide.Options{Size: 32, Class: "my-icon"})
func AlignVerticalJustifyStart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="6" x="5" y="16" rx="2" /> <rect width="10" height="6" x="7" y="6" rx="2" /> <path d="M2 2h20" />`, opt)
}

// AlignVerticalSpaceAround renders the "align-vertical-space-around" icon.
//
// Usage in templates:
//
//	{{ lucide "align-vertical-space-around" }}
//
// Direct usage in Go:
//
//	lucide.AlignVerticalSpaceAround()
//	lucide.AlignVerticalSpaceAround(lucide.Options{Size: 32, Class: "my-icon"})
func AlignVerticalSpaceAround(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="10" height="6" x="7" y="9" rx="2" /> <path d="M22 20H2" /> <path d="M22 4H2" />`, opt)
}

// AlignVerticalSpaceBetween renders the "align-vertical-space-between" icon.
//
// Usage in templates:
//
//	{{ lucide "align-vertical-space-between" }}
//
// Direct usage in Go:
//
//	lucide.AlignVerticalSpaceBetween()
//	lucide.AlignVerticalSpaceBetween(lucide.Options{Size: 32, Class: "my-icon"})
func AlignVerticalSpaceBetween(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="6" x="5" y="15" rx="2" /> <rect width="10" height="6" x="7" y="3" rx="2" /> <path d="M2 21h20" /> <path d="M2 3h20" />`, opt)
}

// Ambulance renders the "ambulance" icon.
//
// Usage in templates:
//
//	{{ lucide "ambulance" }}
//
// Direct usage in Go:
//
//	lucide.Ambulance()
//	lucide.Ambulance(lucide.Options{Size: 32, Class: "my-icon"})
func Ambulance(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10H6" /> <path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2" /> <path d="M19 18h2a1 1 0 0 0 1-1v-3.28a1 1 0 0 0-.684-.948l-1.923-.641a1 1 0 0 1-.578-.502l-1.539-3.076A1 1 0 0 0 16.382 8H14" /> <path d="M8 8v4" /> <path d="M9 18h6" /> <circle cx="17" cy="18" r="2" /> <circle cx="7" cy="18" r="2" />`, opt)
}

// Ampersand renders the "ampersand" icon.
//
// Usage in templates:
//
//	{{ lucide "ampersand" }}
//
// Direct usage in Go:
//
//	lucide.Ampersand()
//	lucide.Ampersand(lucide.Options{Size: 32, Class: "my-icon"})
func Ampersand(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.5 12c0 4.4-3.6 8-8 8A4.5 4.5 0 0 1 5 15.5c0-6 8-4 8-8.5a3 3 0 1 0-6 0c0 3 2.5 8.5 12 13" /> <path d="M16 12h3" />`, opt)
}

// Ampersands renders the "ampersands" icon.
//
// Usage in templates:
//
//	{{ lucide "ampersands" }}
//
// Direct usage in Go:
//
//	lucide.Ampersands()
//	lucide.Ampersands(lucide.Options{Size: 32, Class: "my-icon"})
func Ampersands(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5" /> <path d="M22 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5" />`, opt)
}

// Amphora renders the "amphora" icon.
//
// Usage in templates:
//
//	{{ lucide "amphora" }}
//
// Direct usage in Go:
//
//	lucide.Amphora()
//	lucide.Amphora(lucide.Options{Size: 32, Class: "my-icon"})
func Amphora(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v5.632c0 .424-.272.795-.653.982A6 6 0 0 0 6 14c.006 4 3 7 5 8" /> <path d="M10 5H8a2 2 0 0 0 0 4h.68" /> <path d="M14 2v5.632c0 .424.272.795.652.982A6 6 0 0 1 18 14c0 4-3 7-5 8" /> <path d="M14 5h2a2 2 0 0 1 0 4h-.68" /> <path d="M18 22H6" /> <path d="M9 2h6" />`, opt)
}

// Anchor renders the "anchor" icon.
//
// Usage in templates:
//
//	{{ lucide "anchor" }}
//
// Direct usage in Go:
//
//	lucide.Anchor()
//	lucide.Anchor(lucide.Options{Size: 32, Class: "my-icon"})
func Anchor(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22V8" /> <path d="M5 12H2a10 10 0 0 0 20 0h-3" /> <circle cx="12" cy="5" r="3" />`, opt)
}

// Angry renders the "angry" icon.
//
// Usage in templates:
//
//	{{ lucide "angry" }}
//
// Direct usage in Go:
//
//	lucide.Angry()
//	lucide.Angry(lucide.Options{Size: 32, Class: "my-icon"})
func Angry(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M16 16s-1.5-2-4-2-4 2-4 2" /> <path d="M7.5 8 10 9" /> <path d="m14 9 2.5-1" /> <path d="M9 10h.01" /> <path d="M15 10h.01" />`, opt)
}

// Annoyed renders the "annoyed" icon.
//
// Usage in templates:
//
//	{{ lucide "annoyed" }}
//
// Direct usage in Go:
//
//	lucide.Annoyed()
//	lucide.Annoyed(lucide.Options{Size: 32, Class: "my-icon"})
func Annoyed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M8 15h8" /> <path d="M8 9h2" /> <path d="M14 9h2" />`, opt)
}

// Antenna renders the "antenna" icon.
//
// Usage in templates:
//
//	{{ lucide "antenna" }}
//
// Direct usage in Go:
//
//	lucide.Antenna()
//	lucide.Antenna(lucide.Options{Size: 32, Class: "my-icon"})
func Antenna(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 12 7 2" /> <path d="m7 12 5-10" /> <path d="m12 12 5-10" /> <path d="m17 12 5-10" /> <path d="M4.5 7h15" /> <path d="M12 16v6" />`, opt)
}

// Anvil renders the "anvil" icon.
//
// Usage in templates:
//
//	{{ lucide "anvil" }}
//
// Direct usage in Go:
//
//	lucide.Anvil()
//	lucide.Anvil(lucide.Options{Size: 32, Class: "my-icon"})
func Anvil(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 10H6a4 4 0 0 1-4-4 1 1 0 0 1 1-1h4" /> <path d="M7 5a1 1 0 0 1 1-1h13a1 1 0 0 1 1 1 7 7 0 0 1-7 7H8a1 1 0 0 1-1-1z" /> <path d="M9 12v5" /> <path d="M15 12v5" /> <path d="M5 20a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3 1 1 0 0 1-1 1H6a1 1 0 0 1-1-1" />`, opt)
}

// Aperture renders the "aperture" icon.
//
// Usage in templates:
//
//	{{ lucide "aperture" }}
//
// Direct usage in Go:
//
//	lucide.Aperture()
//	lucide.Aperture(lucide.Options{Size: 32, Class: "my-icon"})
func Aperture(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m14.31 8 5.74 9.94" /> <path d="M9.69 8h11.48" /> <path d="m7.38 12 5.74-9.94" /> <path d="M9.69 16 3.95 6.06" /> <path d="M14.31 16H2.83" /> <path d="m16.62 12-5.74 9.94" />`, opt)
}

// AppWindow renders the "app-window" icon.
//
// Usage in templates:
//
//	{{ lucide "app-window" }}
//
// Direct usage in Go:
//
//	lucide.AppWindow()
//	lucide.AppWindow(lucide.Options{Size: 32, Class: "my-icon"})
func AppWindow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="2" y="4" width="20" height="16" rx="2" /> <path d="M10 4v4" /> <path d="M2 8h20" /> <path d="M6 4v4" />`, opt)
}

// AppWindowMac renders the "app-window-mac" icon.
//
// Usage in templates:
//
//	{{ lucide "app-window-mac" }}
//
// Direct usage in Go:
//
//	lucide.AppWindowMac()
//	lucide.AppWindowMac(lucide.Options{Size: 32, Class: "my-icon"})
func AppWindowMac(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="16" x="2" y="4" rx="2" /> <path d="M6 8h.01" /> <path d="M10 8h.01" /> <path d="M14 8h.01" />`, opt)
}

// Apple renders the "apple" icon.
//
// Usage in templates:
//
//	{{ lucide "apple" }}
//
// Direct usage in Go:
//
//	lucide.Apple()
//	lucide.Apple(lucide.Options{Size: 32, Class: "my-icon"})
func Apple(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6.528V3a1 1 0 0 1 1-1h0" /> <path d="M18.237 21A15 15 0 0 0 22 11a6 6 0 0 0-10-4.472A6 6 0 0 0 2 11a15.1 15.1 0 0 0 3.763 10 3 3 0 0 0 3.648.648 5.5 5.5 0 0 1 5.178 0A3 3 0 0 0 18.237 21" />`, opt)
}

// Archive renders the "archive" icon.
//
// Usage in templates:
//
//	{{ lucide "archive" }}
//
// Direct usage in Go:
//
//	lucide.Archive()
//	lucide.Archive(lucide.Options{Size: 32, Class: "my-icon"})
func Archive(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="5" x="2" y="3" rx="1" /> <path d="M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8" /> <path d="M10 12h4" />`, opt)
}

// ArchiveRestore renders the "archive-restore" icon.
//
// Usage in templates:
//
//	{{ lucide "archive-restore" }}
//
// Direct usage in Go:
//
//	lucide.ArchiveRestore()
//	lucide.ArchiveRestore(lucide.Options{Size: 32, Class: "my-icon"})
func ArchiveRestore(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="5" x="2" y="3" rx="1" /> <path d="M4 8v11a2 2 0 0 0 2 2h2" /> <path d="M20 8v11a2 2 0 0 1-2 2h-2" /> <path d="m9 15 3-3 3 3" /> <path d="M12 12v9" />`, opt)
}

// ArchiveX renders the "archive-x" icon.
//
// Usage in templates:
//
//	{{ lucide "archive-x" }}
//
// Direct usage in Go:
//
//	lucide.ArchiveX()
//	lucide.ArchiveX(lucide.Options{Size: 32, Class: "my-icon"})
func ArchiveX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="5" x="2" y="3" rx="1" /> <path d="M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8" /> <path d="m9.5 17 5-5" /> <path d="m9.5 12 5 5" />`, opt)
}

// Armchair renders the "armchair" icon.
//
// Usage in templates:
//
//	{{ lucide "armchair" }}
//
// Direct usage in Go:
//
//	lucide.Armchair()
//	lucide.Armchair(lucide.Options{Size: 32, Class: "my-icon"})
func Armchair(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3" /> <path d="M3 16a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z" /> <path d="M5 18v2" /> <path d="M19 18v2" />`, opt)
}

// ArrowBigDown renders the "arrow-big-down" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-big-down" }}
//
// Direct usage in Go:
//
//	lucide.ArrowBigDown()
//	lucide.ArrowBigDown(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowBigDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 11a1 1 0 0 0 1 1h2.939a1 1 0 0 1 .75 1.811l-6.835 6.836a1.207 1.207 0 0 1-1.707 0L4.31 13.81a1 1 0 0 1 .75-1.811H8a1 1 0 0 0 1-1V5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1z" />`, opt)
}

// ArrowBigDownDash renders the "arrow-big-down-dash" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-big-down-dash" }}
//
// Direct usage in Go:
//
//	lucide.ArrowBigDownDash()
//	lucide.ArrowBigDownDash(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowBigDownDash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 11a1 1 0 0 0 1 1h2.939a1 1 0 0 1 .75 1.811l-6.835 6.836a1.207 1.207 0 0 1-1.707 0L4.31 13.81a1 1 0 0 1 .75-1.811H8a1 1 0 0 0 1-1V9a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1z" /> <path d="M9 4h6" />`, opt)
}

// ArrowBigLeft renders the "arrow-big-left" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-big-left" }}
//
// Direct usage in Go:
//
//	lucide.ArrowBigLeft()
//	lucide.ArrowBigLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowBigLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 9a1 1 0 0 1-1-1V5.061a1 1 0 0 0-1.811-.75l-6.835 6.836a1.207 1.207 0 0 0 0 1.707l6.835 6.835a1 1 0 0 0 1.811-.75V16a1 1 0 0 1 1-1h6a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1z" />`, opt)
}

// ArrowBigLeftDash renders the "arrow-big-left-dash" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-big-left-dash" }}
//
// Direct usage in Go:
//
//	lucide.ArrowBigLeftDash()
//	lucide.ArrowBigLeftDash(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowBigLeftDash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 9a1 1 0 0 1-1-1V5.061a1 1 0 0 0-1.811-.75l-6.835 6.836a1.207 1.207 0 0 0 0 1.707l6.835 6.835a1 1 0 0 0 1.811-.75V16a1 1 0 0 1 1-1h2a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1z" /> <path d="M20 9v6" />`, opt)
}

// ArrowBigRight renders the "arrow-big-right" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-big-right" }}
//
// Direct usage in Go:
//
//	lucide.ArrowBigRight()
//	lucide.ArrowBigRight(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowBigRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 9a1 1 0 0 0 1-1V5.061a1 1 0 0 1 1.811-.75l6.836 6.836a1.207 1.207 0 0 1 0 1.707l-6.836 6.835a1 1 0 0 1-1.811-.75V16a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z" />`, opt)
}

// ArrowBigRightDash renders the "arrow-big-right-dash" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-big-right-dash" }}
//
// Direct usage in Go:
//
//	lucide.ArrowBigRightDash()
//	lucide.ArrowBigRightDash(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowBigRightDash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 9a1 1 0 0 0 1-1V5.061a1 1 0 0 1 1.811-.75l6.836 6.836a1.207 1.207 0 0 1 0 1.707l-6.836 6.835a1 1 0 0 1-1.811-.75V16a1 1 0 0 0-1-1H9a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z" /> <path d="M4 9v6" />`, opt)
}

// ArrowBigUp renders the "arrow-big-up" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-big-up" }}
//
// Direct usage in Go:
//
//	lucide.ArrowBigUp()
//	lucide.ArrowBigUp(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowBigUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 13a1 1 0 0 0-1-1H5.061a1 1 0 0 1-.75-1.811l6.836-6.835a1.207 1.207 0 0 1 1.707 0l6.835 6.835a1 1 0 0 1-.75 1.811H16a1 1 0 0 0-1 1v6a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1z" />`, opt)
}

// ArrowBigUpDash renders the "arrow-big-up-dash" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-big-up-dash" }}
//
// Direct usage in Go:
//
//	lucide.ArrowBigUpDash()
//	lucide.ArrowBigUpDash(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowBigUpDash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 13a1 1 0 0 0-1-1H5.061a1 1 0 0 1-.75-1.811l6.836-6.835a1.207 1.207 0 0 1 1.707 0l6.835 6.835a1 1 0 0 1-.75 1.811H16a1 1 0 0 0-1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1z" /> <path d="M9 20h6" />`, opt)
}

// ArrowDown renders the "arrow-down" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDown()
//	lucide.ArrowDown(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 5v14" /> <path d="m19 12-7 7-7-7" />`, opt)
}

// ArrowDown01 renders the "arrow-down-0-1" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-0-1" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDown01()
//	lucide.ArrowDown01(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDown01(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 16 4 4 4-4" /> <path d="M7 20V4" /> <rect x="15" y="4" width="4" height="6" ry="2" /> <path d="M17 20v-6h-2" /> <path d="M15 20h4" />`, opt)
}

// ArrowDown10 renders the "arrow-down-1-0" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-1-0" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDown10()
//	lucide.ArrowDown10(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDown10(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 16 4 4 4-4" /> <path d="M7 20V4" /> <path d="M17 10V4h-2" /> <path d="M15 10h4" /> <rect x="15" y="14" width="4" height="6" ry="2" />`, opt)
}

// ArrowDownAZ renders the "arrow-down-a-z" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-a-z" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownAZ()
//	lucide.ArrowDownAZ(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownAZ(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 16 4 4 4-4" /> <path d="M7 20V4" /> <path d="M20 8h-5" /> <path d="M15 10V6.5a2.5 2.5 0 0 1 5 0V10" /> <path d="M15 14h5l-5 6h5" />`, opt)
}

// ArrowDownFromLine renders the "arrow-down-from-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-from-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownFromLine()
//	lucide.ArrowDownFromLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownFromLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 3H5" /> <path d="M12 21V7" /> <path d="m6 15 6 6 6-6" />`, opt)
}

// ArrowDownLeft renders the "arrow-down-left" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-left" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownLeft()
//	lucide.ArrowDownLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 7 7 17" /> <path d="M17 17H7V7" />`, opt)
}

// ArrowDownNarrowWide renders the "arrow-down-narrow-wide" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-narrow-wide" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownNarrowWide()
//	lucide.ArrowDownNarrowWide(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownNarrowWide(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 16 4 4 4-4" /> <path d="M7 20V4" /> <path d="M11 4h4" /> <path d="M11 8h7" /> <path d="M11 12h10" />`, opt)
}

// ArrowDownRight renders the "arrow-down-right" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-right" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownRight()
//	lucide.ArrowDownRight(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 7 10 10" /> <path d="M17 7v10H7" />`, opt)
}

// ArrowDownToDot renders the "arrow-down-to-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-to-dot" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownToDot()
//	lucide.ArrowDownToDot(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownToDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v14" /> <path d="m19 9-7 7-7-7" /> <circle cx="12" cy="21" r="1" />`, opt)
}

// ArrowDownToLine renders the "arrow-down-to-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-to-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownToLine()
//	lucide.ArrowDownToLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownToLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17V3" /> <path d="m6 11 6 6 6-6" /> <path d="M19 21H5" />`, opt)
}

// ArrowDownUp renders the "arrow-down-up" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-up" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownUp()
//	lucide.ArrowDownUp(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 16 4 4 4-4" /> <path d="M7 20V4" /> <path d="m21 8-4-4-4 4" /> <path d="M17 4v16" />`, opt)
}

// ArrowDownWideNarrow renders the "arrow-down-wide-narrow" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-wide-narrow" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownWideNarrow()
//	lucide.ArrowDownWideNarrow(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownWideNarrow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 16 4 4 4-4" /> <path d="M7 20V4" /> <path d="M11 4h10" /> <path d="M11 8h7" /> <path d="M11 12h4" />`, opt)
}

// ArrowDownZA renders the "arrow-down-z-a" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-down-z-a" }}
//
// Direct usage in Go:
//
//	lucide.ArrowDownZA()
//	lucide.ArrowDownZA(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowDownZA(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 16 4 4 4-4" /> <path d="M7 4v16" /> <path d="M15 4h5l-5 6h5" /> <path d="M15 20v-3.5a2.5 2.5 0 0 1 5 0V20" /> <path d="M20 18h-5" />`, opt)
}

// ArrowLeft renders the "arrow-left" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-left" }}
//
// Direct usage in Go:
//
//	lucide.ArrowLeft()
//	lucide.ArrowLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 19-7-7 7-7" /> <path d="M19 12H5" />`, opt)
}

// ArrowLeftFromLine renders the "arrow-left-from-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-left-from-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowLeftFromLine()
//	lucide.ArrowLeftFromLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowLeftFromLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m9 6-6 6 6 6" /> <path d="M3 12h14" /> <path d="M21 19V5" />`, opt)
}

// ArrowLeftRight renders the "arrow-left-right" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-left-right" }}
//
// Direct usage in Go:
//
//	lucide.ArrowLeftRight()
//	lucide.ArrowLeftRight(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowLeftRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 3 4 7l4 4" /> <path d="M4 7h16" /> <path d="m16 21 4-4-4-4" /> <path d="M20 17H4" />`, opt)
}

// ArrowLeftToLine renders the "arrow-left-to-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-left-to-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowLeftToLine()
//	lucide.ArrowLeftToLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowLeftToLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 19V5" /> <path d="m13 6-6 6 6 6" /> <path d="M7 12h14" />`, opt)
}

// ArrowRight renders the "arrow-right" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-right" }}
//
// Direct usage in Go:
//
//	lucide.ArrowRight()
//	lucide.ArrowRight(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 12h14" /> <path d="m12 5 7 7-7 7" />`, opt)
}

// ArrowRightFromLine renders the "arrow-right-from-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-right-from-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowRightFromLine()
//	lucide.ArrowRightFromLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowRightFromLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 5v14" /> <path d="M21 12H7" /> <path d="m15 18 6-6-6-6" />`, opt)
}

// ArrowRightLeft renders the "arrow-right-left" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-right-left" }}
//
// Direct usage in Go:
//
//	lucide.ArrowRightLeft()
//	lucide.ArrowRightLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowRightLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 3 4 4-4 4" /> <path d="M20 7H4" /> <path d="m8 21-4-4 4-4" /> <path d="M4 17h16" />`, opt)
}

// ArrowRightToLine renders the "arrow-right-to-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-right-to-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowRightToLine()
//	lucide.ArrowRightToLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowRightToLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 12H3" /> <path d="m11 18 6-6-6-6" /> <path d="M21 5v14" />`, opt)
}

// ArrowUp renders the "arrow-up" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUp()
//	lucide.ArrowUp(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m5 12 7-7 7 7" /> <path d="M12 19V5" />`, opt)
}

// ArrowUp01 renders the "arrow-up-0-1" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-0-1" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUp01()
//	lucide.ArrowUp01(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUp01(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 8 4-4 4 4" /> <path d="M7 4v16" /> <rect x="15" y="4" width="4" height="6" ry="2" /> <path d="M17 20v-6h-2" /> <path d="M15 20h4" />`, opt)
}

// ArrowUp10 renders the "arrow-up-1-0" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-1-0" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUp10()
//	lucide.ArrowUp10(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUp10(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 8 4-4 4 4" /> <path d="M7 4v16" /> <path d="M17 10V4h-2" /> <path d="M15 10h4" /> <rect x="15" y="14" width="4" height="6" ry="2" />`, opt)
}

// ArrowUpAZ renders the "arrow-up-a-z" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-a-z" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpAZ()
//	lucide.ArrowUpAZ(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpAZ(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 8 4-4 4 4" /> <path d="M7 4v16" /> <path d="M20 8h-5" /> <path d="M15 10V6.5a2.5 2.5 0 0 1 5 0V10" /> <path d="M15 14h5l-5 6h5" />`, opt)
}

// ArrowUpDown renders the "arrow-up-down" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-down" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpDown()
//	lucide.ArrowUpDown(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m21 16-4 4-4-4" /> <path d="M17 20V4" /> <path d="m3 8 4-4 4 4" /> <path d="M7 4v16" />`, opt)
}

// ArrowUpFromDot renders the "arrow-up-from-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-from-dot" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpFromDot()
//	lucide.ArrowUpFromDot(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpFromDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m5 9 7-7 7 7" /> <path d="M12 16V2" /> <circle cx="12" cy="21" r="1" />`, opt)
}

// ArrowUpFromLine renders the "arrow-up-from-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-from-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpFromLine()
//	lucide.ArrowUpFromLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpFromLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18 9-6-6-6 6" /> <path d="M12 3v14" /> <path d="M5 21h14" />`, opt)
}

// ArrowUpLeft renders the "arrow-up-left" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-left" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpLeft()
//	lucide.ArrowUpLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 17V7h10" /> <path d="M17 17 7 7" />`, opt)
}

// ArrowUpNarrowWide renders the "arrow-up-narrow-wide" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-narrow-wide" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpNarrowWide()
//	lucide.ArrowUpNarrowWide(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpNarrowWide(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 8 4-4 4 4" /> <path d="M7 4v16" /> <path d="M11 12h4" /> <path d="M11 16h7" /> <path d="M11 20h10" />`, opt)
}

// ArrowUpRight renders the "arrow-up-right" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-right" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpRight()
//	lucide.ArrowUpRight(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 7h10v10" /> <path d="M7 17 17 7" />`, opt)
}

// ArrowUpToLine renders the "arrow-up-to-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-to-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpToLine()
//	lucide.ArrowUpToLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpToLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 3h14" /> <path d="m18 13-6-6-6 6" /> <path d="M12 7v14" />`, opt)
}

// ArrowUpWideNarrow renders the "arrow-up-wide-narrow" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-wide-narrow" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpWideNarrow()
//	lucide.ArrowUpWideNarrow(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpWideNarrow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 8 4-4 4 4" /> <path d="M7 4v16" /> <path d="M11 12h10" /> <path d="M11 16h7" /> <path d="M11 20h4" />`, opt)
}

// ArrowUpZA renders the "arrow-up-z-a" icon.
//
// Usage in templates:
//
//	{{ lucide "arrow-up-z-a" }}
//
// Direct usage in Go:
//
//	lucide.ArrowUpZA()
//	lucide.ArrowUpZA(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowUpZA(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 8 4-4 4 4" /> <path d="M7 4v16" /> <path d="M15 4h5l-5 6h5" /> <path d="M15 20v-3.5a2.5 2.5 0 0 1 5 0V20" /> <path d="M20 18h-5" />`, opt)
}

// ArrowsUpFromLine renders the "arrows-up-from-line" icon.
//
// Usage in templates:
//
//	{{ lucide "arrows-up-from-line" }}
//
// Direct usage in Go:
//
//	lucide.ArrowsUpFromLine()
//	lucide.ArrowsUpFromLine(lucide.Options{Size: 32, Class: "my-icon"})
func ArrowsUpFromLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m4 6 3-3 3 3" /> <path d="M7 17V3" /> <path d="m14 6 3-3 3 3" /> <path d="M17 17V3" /> <path d="M4 21h16" />`, opt)
}

// Asterisk renders the "asterisk" icon.
//
// Usage in templates:
//
//	{{ lucide "asterisk" }}
//
// Direct usage in Go:
//
//	lucide.Asterisk()
//	lucide.Asterisk(lucide.Options{Size: 32, Class: "my-icon"})
func Asterisk(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v12" /> <path d="M17.196 9 6.804 15" /> <path d="m6.804 9 10.392 6" />`, opt)
}

// AtSign renders the "at-sign" icon.
//
// Usage in templates:
//
//	{{ lucide "at-sign" }}
//
// Direct usage in Go:
//
//	lucide.AtSign()
//	lucide.AtSign(lucide.Options{Size: 32, Class: "my-icon"})
func AtSign(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="4" /> <path d="M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8" />`, opt)
}

// Atom renders the "atom" icon.
//
// Usage in templates:
//
//	{{ lucide "atom" }}
//
// Direct usage in Go:
//
//	lucide.Atom()
//	lucide.Atom(lucide.Options{Size: 32, Class: "my-icon"})
func Atom(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="1" /> <path d="M20.2 20.2c2.04-2.03.02-7.36-4.5-11.9-4.54-4.52-9.87-6.54-11.9-4.5-2.04 2.03-.02 7.36 4.5 11.9 4.54 4.52 9.87 6.54 11.9 4.5Z" /> <path d="M15.7 15.7c4.52-4.54 6.54-9.87 4.5-11.9-2.03-2.04-7.36-.02-11.9 4.5-4.52 4.54-6.54 9.87-4.5 11.9 2.03 2.04 7.36.02 11.9-4.5Z" />`, opt)
}

// AudioLines renders the "audio-lines" icon.
//
// Usage in templates:
//
//	{{ lucide "audio-lines" }}
//
// Direct usage in Go:
//
//	lucide.AudioLines()
//	lucide.AudioLines(lucide.Options{Size: 32, Class: "my-icon"})
func AudioLines(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 10v3" /> <path d="M6 6v11" /> <path d="M10 3v18" /> <path d="M14 8v7" /> <path d="M18 5v13" /> <path d="M22 10v3" />`, opt)
}

// AudioWaveform renders the "audio-waveform" icon.
//
// Usage in templates:
//
//	{{ lucide "audio-waveform" }}
//
// Direct usage in Go:
//
//	lucide.AudioWaveform()
//	lucide.AudioWaveform(lucide.Options{Size: 32, Class: "my-icon"})
func AudioWaveform(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2" />`, opt)
}

// Award renders the "award" icon.
//
// Usage in templates:
//
//	{{ lucide "award" }}
//
// Direct usage in Go:
//
//	lucide.Award()
//	lucide.Award(lucide.Options{Size: 32, Class: "my-icon"})
func Award(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526" /> <circle cx="12" cy="8" r="6" />`, opt)
}

// Axe renders the "axe" icon.
//
// Usage in templates:
//
//	{{ lucide "axe" }}
//
// Direct usage in Go:
//
//	lucide.Axe()
//	lucide.Axe(lucide.Options{Size: 32, Class: "my-icon"})
func Axe(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 12-8.381 8.38a1 1 0 0 1-3.001-3L11 9" /> <path d="M15 15.5a.5.5 0 0 0 .5.5A6.5 6.5 0 0 0 22 9.5a.5.5 0 0 0-.5-.5h-1.672a2 2 0 0 1-1.414-.586l-5.062-5.062a1.205 1.205 0 0 0-1.704 0L9.352 5.648a1.205 1.205 0 0 0 0 1.704l5.062 5.062A2 2 0 0 1 15 13.828z" />`, opt)
}

// Axis3d renders the "axis-3d" icon.
//
// Usage in templates:
//
//	{{ lucide "axis-3d" }}
//
// Direct usage in Go:
//
//	lucide.Axis3d()
//	lucide.Axis3d(lucide.Options{Size: 32, Class: "my-icon"})
func Axis3d(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.5 10.5 15 9" /> <path d="M4 4v15a1 1 0 0 0 1 1h15" /> <path d="M4.293 19.707 6 18" /> <path d="m9 15 1.5-1.5" />`, opt)
}

// Baby renders the "baby" icon.
//
// Usage in templates:
//
//	{{ lucide "baby" }}
//
// Direct usage in Go:
//
//	lucide.Baby()
//	lucide.Baby(lucide.Options{Size: 32, Class: "my-icon"})
func Baby(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5" /> <path d="M15 12h.01" /> <path d="M19.38 6.813A9 9 0 0 1 20.8 10.2a2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1" /> <path d="M9 12h.01" />`, opt)
}

// Backpack renders the "backpack" icon.
//
// Usage in templates:
//
//	{{ lucide "backpack" }}
//
// Direct usage in Go:
//
//	lucide.Backpack()
//	lucide.Backpack(lucide.Options{Size: 32, Class: "my-icon"})
func Backpack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z" /> <path d="M8 10h8" /> <path d="M8 18h8" /> <path d="M8 22v-6a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v6" /> <path d="M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2" />`, opt)
}

// Badge renders the "badge" icon.
//
// Usage in templates:
//
//	{{ lucide "badge" }}
//
// Direct usage in Go:
//
//	lucide.Badge()
//	lucide.Badge(lucide.Options{Size: 32, Class: "my-icon"})
func Badge(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" />`, opt)
}

// BadgeAlert renders the "badge-alert" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-alert" }}
//
// Direct usage in Go:
//
//	lucide.BadgeAlert()
//	lucide.BadgeAlert(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeAlert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <line x1="12" x2="12" y1="8" y2="12" /> <line x1="12" x2="12.01" y1="16" y2="16" />`, opt)
}

// BadgeCent renders the "badge-cent" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-cent" }}
//
// Direct usage in Go:
//
//	lucide.BadgeCent()
//	lucide.BadgeCent(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeCent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="M12 7v10" /> <path d="M15.4 10a4 4 0 1 0 0 4" />`, opt)
}

// BadgeCheck renders the "badge-check" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-check" }}
//
// Direct usage in Go:
//
//	lucide.BadgeCheck()
//	lucide.BadgeCheck(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="m9 12 2 2 4-4" />`, opt)
}

// BadgeDollarSign renders the "badge-dollar-sign" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-dollar-sign" }}
//
// Direct usage in Go:
//
//	lucide.BadgeDollarSign()
//	lucide.BadgeDollarSign(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeDollarSign(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8" /> <path d="M12 18V6" />`, opt)
}

// BadgeEuro renders the "badge-euro" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-euro" }}
//
// Direct usage in Go:
//
//	lucide.BadgeEuro()
//	lucide.BadgeEuro(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeEuro(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="M7 12h5" /> <path d="M15 9.4a4 4 0 1 0 0 5.2" />`, opt)
}

// BadgeIndianRupee renders the "badge-indian-rupee" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-indian-rupee" }}
//
// Direct usage in Go:
//
//	lucide.BadgeIndianRupee()
//	lucide.BadgeIndianRupee(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeIndianRupee(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="M8 8h8" /> <path d="M8 12h8" /> <path d="m13 17-5-1h1a4 4 0 0 0 0-8" />`, opt)
}

// BadgeInfo renders the "badge-info" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-info" }}
//
// Direct usage in Go:
//
//	lucide.BadgeInfo()
//	lucide.BadgeInfo(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeInfo(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <line x1="12" x2="12" y1="16" y2="12" /> <line x1="12" x2="12.01" y1="8" y2="8" />`, opt)
}

// BadgeJapaneseYen renders the "badge-japanese-yen" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-japanese-yen" }}
//
// Direct usage in Go:
//
//	lucide.BadgeJapaneseYen()
//	lucide.BadgeJapaneseYen(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeJapaneseYen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="m9 8 3 3v7" /> <path d="m12 11 3-3" /> <path d="M9 12h6" /> <path d="M9 16h6" />`, opt)
}

// BadgeMinus renders the "badge-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-minus" }}
//
// Direct usage in Go:
//
//	lucide.BadgeMinus()
//	lucide.BadgeMinus(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <line x1="8" x2="16" y1="12" y2="12" />`, opt)
}

// BadgePercent renders the "badge-percent" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-percent" }}
//
// Direct usage in Go:
//
//	lucide.BadgePercent()
//	lucide.BadgePercent(lucide.Options{Size: 32, Class: "my-icon"})
func BadgePercent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="m15 9-6 6" /> <path d="M9 9h.01" /> <path d="M15 15h.01" />`, opt)
}

// BadgePlus renders the "badge-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-plus" }}
//
// Direct usage in Go:
//
//	lucide.BadgePlus()
//	lucide.BadgePlus(lucide.Options{Size: 32, Class: "my-icon"})
func BadgePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <line x1="12" x2="12" y1="8" y2="16" /> <line x1="8" x2="16" y1="12" y2="12" />`, opt)
}

// BadgePoundSterling renders the "badge-pound-sterling" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-pound-sterling" }}
//
// Direct usage in Go:
//
//	lucide.BadgePoundSterling()
//	lucide.BadgePoundSterling(lucide.Options{Size: 32, Class: "my-icon"})
func BadgePoundSterling(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="M8 12h4" /> <path d="M10 16V9.5a2.5 2.5 0 0 1 5 0" /> <path d="M8 16h7" />`, opt)
}

// BadgeQuestionMark renders the "badge-question-mark" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-question-mark" }}
//
// Direct usage in Go:
//
//	lucide.BadgeQuestionMark()
//	lucide.BadgeQuestionMark(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeQuestionMark(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" /> <line x1="12" x2="12.01" y1="17" y2="17" />`, opt)
}

// BadgeRussianRuble renders the "badge-russian-ruble" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-russian-ruble" }}
//
// Direct usage in Go:
//
//	lucide.BadgeRussianRuble()
//	lucide.BadgeRussianRuble(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeRussianRuble(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="M9 16h5" /> <path d="M9 12h5a2 2 0 1 0 0-4h-3v9" />`, opt)
}

// BadgeSwissFranc renders the "badge-swiss-franc" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-swiss-franc" }}
//
// Direct usage in Go:
//
//	lucide.BadgeSwissFranc()
//	lucide.BadgeSwissFranc(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeSwissFranc(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <path d="M11 17V8h4" /> <path d="M11 12h3" /> <path d="M9 16h4" />`, opt)
}

// BadgeTurkishLira renders the "badge-turkish-lira" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-turkish-lira" }}
//
// Direct usage in Go:
//
//	lucide.BadgeTurkishLira()
//	lucide.BadgeTurkishLira(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeTurkishLira(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 7v10a5 5 0 0 0 5-5" /> <path d="m15 8-6 3" /> <path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76" />`, opt)
}

// BadgeX renders the "badge-x" icon.
//
// Usage in templates:
//
//	{{ lucide "badge-x" }}
//
// Direct usage in Go:
//
//	lucide.BadgeX()
//	lucide.BadgeX(lucide.Options{Size: 32, Class: "my-icon"})
func BadgeX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" /> <line x1="15" x2="9" y1="9" y2="15" /> <line x1="9" x2="15" y1="9" y2="15" />`, opt)
}

// BaggageClaim renders the "baggage-claim" icon.
//
// Usage in templates:
//
//	{{ lucide "baggage-claim" }}
//
// Direct usage in Go:
//
//	lucide.BaggageClaim()
//	lucide.BaggageClaim(lucide.Options{Size: 32, Class: "my-icon"})
func BaggageClaim(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2" /> <path d="M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10" /> <rect width="13" height="8" x="8" y="6" rx="1" /> <circle cx="18" cy="20" r="2" /> <circle cx="9" cy="20" r="2" />`, opt)
}

// Ban renders the "ban" icon.
//
// Usage in templates:
//
//	{{ lucide "ban" }}
//
// Direct usage in Go:
//
//	lucide.Ban()
//	lucide.Ban(lucide.Options{Size: 32, Class: "my-icon"})
func Ban(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4.929 4.929 19.07 19.071" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Banana renders the "banana" icon.
//
// Usage in templates:
//
//	{{ lucide "banana" }}
//
// Direct usage in Go:
//
//	lucide.Banana()
//	lucide.Banana(lucide.Options{Size: 32, Class: "my-icon"})
func Banana(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5" /> <path d="M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z" />`, opt)
}

// Bandage renders the "bandage" icon.
//
// Usage in templates:
//
//	{{ lucide "bandage" }}
//
// Direct usage in Go:
//
//	lucide.Bandage()
//	lucide.Bandage(lucide.Options{Size: 32, Class: "my-icon"})
func Bandage(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10.01h.01" /> <path d="M10 14.01h.01" /> <path d="M14 10.01h.01" /> <path d="M14 14.01h.01" /> <path d="M18 6v11.5" /> <path d="M6 6v12" /> <rect x="2" y="6" width="20" height="12" rx="2" />`, opt)
}

// Banknote renders the "banknote" icon.
//
// Usage in templates:
//
//	{{ lucide "banknote" }}
//
// Direct usage in Go:
//
//	lucide.Banknote()
//	lucide.Banknote(lucide.Options{Size: 32, Class: "my-icon"})
func Banknote(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="12" x="2" y="6" rx="2" /> <circle cx="12" cy="12" r="2" /> <path d="M6 12h.01M18 12h.01" />`, opt)
}

// BanknoteArrowDown renders the "banknote-arrow-down" icon.
//
// Usage in templates:
//
//	{{ lucide "banknote-arrow-down" }}
//
// Direct usage in Go:
//
//	lucide.BanknoteArrowDown()
//	lucide.BanknoteArrowDown(lucide.Options{Size: 32, Class: "my-icon"})
func BanknoteArrowDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5" /> <path d="m16 19 3 3 3-3" /> <path d="M18 12h.01" /> <path d="M19 16v6" /> <path d="M6 12h.01" /> <circle cx="12" cy="12" r="2" />`, opt)
}

// BanknoteArrowUp renders the "banknote-arrow-up" icon.
//
// Usage in templates:
//
//	{{ lucide "banknote-arrow-up" }}
//
// Direct usage in Go:
//
//	lucide.BanknoteArrowUp()
//	lucide.BanknoteArrowUp(lucide.Options{Size: 32, Class: "my-icon"})
func BanknoteArrowUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5" /> <path d="M18 12h.01" /> <path d="M19 22v-6" /> <path d="m22 19-3-3-3 3" /> <path d="M6 12h.01" /> <circle cx="12" cy="12" r="2" />`, opt)
}

// BanknoteX renders the "banknote-x" icon.
//
// Usage in templates:
//
//	{{ lucide "banknote-x" }}
//
// Direct usage in Go:
//
//	lucide.BanknoteX()
//	lucide.BanknoteX(lucide.Options{Size: 32, Class: "my-icon"})
func BanknoteX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5" /> <path d="m17 17 5 5" /> <path d="M18 12h.01" /> <path d="m22 17-5 5" /> <path d="M6 12h.01" /> <circle cx="12" cy="12" r="2" />`, opt)
}

// Barcode renders the "barcode" icon.
//
// Usage in templates:
//
//	{{ lucide "barcode" }}
//
// Direct usage in Go:
//
//	lucide.Barcode()
//	lucide.Barcode(lucide.Options{Size: 32, Class: "my-icon"})
func Barcode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 5v14" /> <path d="M8 5v14" /> <path d="M12 5v14" /> <path d="M17 5v14" /> <path d="M21 5v14" />`, opt)
}

// Barrel renders the "barrel" icon.
//
// Usage in templates:
//
//	{{ lucide "barrel" }}
//
// Direct usage in Go:
//
//	lucide.Barrel()
//	lucide.Barrel(lucide.Options{Size: 32, Class: "my-icon"})
func Barrel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 3a41 41 0 0 0 0 18" /> <path d="M14 3a41 41 0 0 1 0 18" /> <path d="M17 3a2 2 0 0 1 1.68.92 15.25 15.25 0 0 1 0 16.16A2 2 0 0 1 17 21H7a2 2 0 0 1-1.68-.92 15.25 15.25 0 0 1 0-16.16A2 2 0 0 1 7 3z" /> <path d="M3.84 17h16.32" /> <path d="M3.84 7h16.32" />`, opt)
}

// Baseline renders the "baseline" icon.
//
// Usage in templates:
//
//	{{ lucide "baseline" }}
//
// Direct usage in Go:
//
//	lucide.Baseline()
//	lucide.Baseline(lucide.Options{Size: 32, Class: "my-icon"})
func Baseline(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 20h16" /> <path d="m6 16 6-12 6 12" /> <path d="M8 12h8" />`, opt)
}

// Bath renders the "bath" icon.
//
// Usage in templates:
//
//	{{ lucide "bath" }}
//
// Direct usage in Go:
//
//	lucide.Bath()
//	lucide.Bath(lucide.Options{Size: 32, Class: "my-icon"})
func Bath(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 4 8 6" /> <path d="M17 19v2" /> <path d="M2 12h20" /> <path d="M7 19v2" /> <path d="M9 5 7.621 3.621A2.121 2.121 0 0 0 4 5v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5" />`, opt)
}

// Battery renders the "battery" icon.
//
// Usage in templates:
//
//	{{ lucide "battery" }}
//
// Direct usage in Go:
//
//	lucide.Battery()
//	lucide.Battery(lucide.Options{Size: 32, Class: "my-icon"})
func Battery(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M 22 14 L 22 10" /> <rect x="2" y="6" width="16" height="12" rx="2" />`, opt)
}

// BatteryCharging renders the "battery-charging" icon.
//
// Usage in templates:
//
//	{{ lucide "battery-charging" }}
//
// Direct usage in Go:
//
//	lucide.BatteryCharging()
//	lucide.BatteryCharging(lucide.Options{Size: 32, Class: "my-icon"})
func BatteryCharging(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11 7-3 5h4l-3 5" /> <path d="M14.856 6H16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.935" /> <path d="M22 14v-4" /> <path d="M5.14 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2.936" />`, opt)
}

// BatteryFull renders the "battery-full" icon.
//
// Usage in templates:
//
//	{{ lucide "battery-full" }}
//
// Direct usage in Go:
//
//	lucide.BatteryFull()
//	lucide.BatteryFull(lucide.Options{Size: 32, Class: "my-icon"})
func BatteryFull(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10v4" /> <path d="M14 10v4" /> <path d="M22 14v-4" /> <path d="M6 10v4" /> <rect x="2" y="6" width="16" height="12" rx="2" />`, opt)
}

// BatteryLow renders the "battery-low" icon.
//
// Usage in templates:
//
//	{{ lucide "battery-low" }}
//
// Direct usage in Go:
//
//	lucide.BatteryLow()
//	lucide.BatteryLow(lucide.Options{Size: 32, Class: "my-icon"})
func BatteryLow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 14v-4" /> <path d="M6 14v-4" /> <rect x="2" y="6" width="16" height="12" rx="2" />`, opt)
}

// BatteryMedium renders the "battery-medium" icon.
//
// Usage in templates:
//
//	{{ lucide "battery-medium" }}
//
// Direct usage in Go:
//
//	lucide.BatteryMedium()
//	lucide.BatteryMedium(lucide.Options{Size: 32, Class: "my-icon"})
func BatteryMedium(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 14v-4" /> <path d="M22 14v-4" /> <path d="M6 14v-4" /> <rect x="2" y="6" width="16" height="12" rx="2" />`, opt)
}

// BatteryPlus renders the "battery-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "battery-plus" }}
//
// Direct usage in Go:
//
//	lucide.BatteryPlus()
//	lucide.BatteryPlus(lucide.Options{Size: 32, Class: "my-icon"})
func BatteryPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 9v6" /> <path d="M12.543 6H16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.605" /> <path d="M22 14v-4" /> <path d="M7 12h6" /> <path d="M7.606 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.606" />`, opt)
}

// BatteryWarning renders the "battery-warning" icon.
//
// Usage in templates:
//
//	{{ lucide "battery-warning" }}
//
// Direct usage in Go:
//
//	lucide.BatteryWarning()
//	lucide.BatteryWarning(lucide.Options{Size: 32, Class: "my-icon"})
func BatteryWarning(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 17h.01" /> <path d="M10 7v6" /> <path d="M14 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2" /> <path d="M22 14v-4" /> <path d="M6 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2" />`, opt)
}

// Beaker renders the "beaker" icon.
//
// Usage in templates:
//
//	{{ lucide "beaker" }}
//
// Direct usage in Go:
//
//	lucide.Beaker()
//	lucide.Beaker(lucide.Options{Size: 32, Class: "my-icon"})
func Beaker(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4.5 3h15" /> <path d="M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3" /> <path d="M6 14h12" />`, opt)
}

// Bean renders the "bean" icon.
//
// Usage in templates:
//
//	{{ lucide "bean" }}
//
// Direct usage in Go:
//
//	lucide.Bean()
//	lucide.Bean(lucide.Options{Size: 32, Class: "my-icon"})
func Bean(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z" /> <path d="M5.341 10.62a4 4 0 1 0 5.279-5.28" />`, opt)
}

// BeanOff renders the "bean-off" icon.
//
// Usage in templates:
//
//	{{ lucide "bean-off" }}
//
// Direct usage in Go:
//
//	lucide.BeanOff()
//	lucide.BeanOff(lucide.Options{Size: 32, Class: "my-icon"})
func BeanOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1" /> <path d="M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66" /> <path d="M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// Bed renders the "bed" icon.
//
// Usage in templates:
//
//	{{ lucide "bed" }}
//
// Direct usage in Go:
//
//	lucide.Bed()
//	lucide.Bed(lucide.Options{Size: 32, Class: "my-icon"})
func Bed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 4v16" /> <path d="M2 8h18a2 2 0 0 1 2 2v10" /> <path d="M2 17h20" /> <path d="M6 8v9" />`, opt)
}

// BedDouble renders the "bed-double" icon.
//
// Usage in templates:
//
//	{{ lucide "bed-double" }}
//
// Direct usage in Go:
//
//	lucide.BedDouble()
//	lucide.BedDouble(lucide.Options{Size: 32, Class: "my-icon"})
func BedDouble(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8" /> <path d="M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4" /> <path d="M12 4v6" /> <path d="M2 18h20" />`, opt)
}

// BedSingle renders the "bed-single" icon.
//
// Usage in templates:
//
//	{{ lucide "bed-single" }}
//
// Direct usage in Go:
//
//	lucide.BedSingle()
//	lucide.BedSingle(lucide.Options{Size: 32, Class: "my-icon"})
func BedSingle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8" /> <path d="M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4" /> <path d="M3 18h18" />`, opt)
}

// Beef renders the "beef" icon.
//
// Usage in templates:
//
//	{{ lucide "beef" }}
//
// Direct usage in Go:
//
//	lucide.Beef()
//	lucide.Beef(lucide.Options{Size: 32, Class: "my-icon"})
func Beef(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16.4 13.7A6.5 6.5 0 1 0 6.28 6.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3" /> <path d="m18.5 6 2.19 4.5a6.48 6.48 0 0 1-2.29 7.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5" /> <circle cx="12.5" cy="8.5" r="2.5" />`, opt)
}

// Beer renders the "beer" icon.
//
// Usage in templates:
//
//	{{ lucide "beer" }}
//
// Direct usage in Go:
//
//	lucide.Beer()
//	lucide.Beer(lucide.Options{Size: 32, Class: "my-icon"})
func Beer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 11h1a3 3 0 0 1 0 6h-1" /> <path d="M9 12v6" /> <path d="M13 12v6" /> <path d="M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z" /> <path d="M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8" />`, opt)
}

// BeerOff renders the "beer-off" icon.
//
// Usage in templates:
//
//	{{ lucide "beer-off" }}
//
// Direct usage in Go:
//
//	lucide.BeerOff()
//	lucide.BeerOff(lucide.Options{Size: 32, Class: "my-icon"})
func BeerOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 13v5" /> <path d="M17 11.47V8" /> <path d="M17 11h1a3 3 0 0 1 2.745 4.211" /> <path d="m2 2 20 20" /> <path d="M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3" /> <path d="M7.536 7.535C6.766 7.649 6.154 8 5.5 8a2.5 2.5 0 0 1-1.768-4.268" /> <path d="M8.727 3.204C9.306 2.767 9.885 2 11 2c1.56 0 2 1.5 3 1.5s1.72-.5 2.5-.5a1 1 0 1 1 0 5c-.78 0-1.5-.5-2.5-.5a3.149 3.149 0 0 0-.842.12" /> <path d="M9 14.6V18" />`, opt)
}

// Bell renders the "bell" icon.
//
// Usage in templates:
//
//	{{ lucide "bell" }}
//
// Direct usage in Go:
//
//	lucide.Bell()
//	lucide.Bell(lucide.Options{Size: 32, Class: "my-icon"})
func Bell(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.268 21a2 2 0 0 0 3.464 0" /> <path d="M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326" />`, opt)
}

// BellDot renders the "bell-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "bell-dot" }}
//
// Direct usage in Go:
//
//	lucide.BellDot()
//	lucide.BellDot(lucide.Options{Size: 32, Class: "my-icon"})
func BellDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.268 21a2 2 0 0 0 3.464 0" /> <path d="M13.916 2.314A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.74 7.327A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673 9 9 0 0 1-.585-.665" /> <circle cx="18" cy="8" r="3" />`, opt)
}

// BellElectric renders the "bell-electric" icon.
//
// Usage in templates:
//
//	{{ lucide "bell-electric" }}
//
// Direct usage in Go:
//
//	lucide.BellElectric()
//	lucide.BellElectric(lucide.Options{Size: 32, Class: "my-icon"})
func BellElectric(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18.518 17.347A7 7 0 0 1 14 19" /> <path d="M18.8 4A11 11 0 0 1 20 9" /> <path d="M9 9h.01" /> <circle cx="20" cy="16" r="2" /> <circle cx="9" cy="9" r="7" /> <rect x="4" y="16" width="10" height="6" rx="2" />`, opt)
}

// BellMinus renders the "bell-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "bell-minus" }}
//
// Direct usage in Go:
//
//	lucide.BellMinus()
//	lucide.BellMinus(lucide.Options{Size: 32, Class: "my-icon"})
func BellMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.268 21a2 2 0 0 0 3.464 0" /> <path d="M15 8h6" /> <path d="M16.243 3.757A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673A9.4 9.4 0 0 1 18.667 12" />`, opt)
}

// BellOff renders the "bell-off" icon.
//
// Usage in templates:
//
//	{{ lucide "bell-off" }}
//
// Direct usage in Go:
//
//	lucide.BellOff()
//	lucide.BellOff(lucide.Options{Size: 32, Class: "my-icon"})
func BellOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.268 21a2 2 0 0 0 3.464 0" /> <path d="M17 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 .258-1.742" /> <path d="m2 2 20 20" /> <path d="M8.668 3.01A6 6 0 0 1 18 8c0 2.687.77 4.653 1.707 6.05" />`, opt)
}

// BellPlus renders the "bell-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "bell-plus" }}
//
// Direct usage in Go:
//
//	lucide.BellPlus()
//	lucide.BellPlus(lucide.Options{Size: 32, Class: "my-icon"})
func BellPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.268 21a2 2 0 0 0 3.464 0" /> <path d="M15 8h6" /> <path d="M18 5v6" /> <path d="M20.002 14.464a9 9 0 0 0 .738.863A1 1 0 0 1 20 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 8.75-5.332" />`, opt)
}

// BellRing renders the "bell-ring" icon.
//
// Usage in templates:
//
//	{{ lucide "bell-ring" }}
//
// Direct usage in Go:
//
//	lucide.BellRing()
//	lucide.BellRing(lucide.Options{Size: 32, Class: "my-icon"})
func BellRing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.268 21a2 2 0 0 0 3.464 0" /> <path d="M22 8c0-2.3-.8-4.3-2-6" /> <path d="M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326" /> <path d="M4 2C2.8 3.7 2 5.7 2 8" />`, opt)
}

// BetweenHorizontalEnd renders the "between-horizontal-end" icon.
//
// Usage in templates:
//
//	{{ lucide "between-horizontal-end" }}
//
// Direct usage in Go:
//
//	lucide.BetweenHorizontalEnd()
//	lucide.BetweenHorizontalEnd(lucide.Options{Size: 32, Class: "my-icon"})
func BetweenHorizontalEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="13" height="7" x="3" y="3" rx="1" /> <path d="m22 15-3-3 3-3" /> <rect width="13" height="7" x="3" y="14" rx="1" />`, opt)
}

// BetweenHorizontalStart renders the "between-horizontal-start" icon.
//
// Usage in templates:
//
//	{{ lucide "between-horizontal-start" }}
//
// Direct usage in Go:
//
//	lucide.BetweenHorizontalStart()
//	lucide.BetweenHorizontalStart(lucide.Options{Size: 32, Class: "my-icon"})
func BetweenHorizontalStart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="13" height="7" x="8" y="3" rx="1" /> <path d="m2 9 3 3-3 3" /> <rect width="13" height="7" x="8" y="14" rx="1" />`, opt)
}

// BetweenVerticalEnd renders the "between-vertical-end" icon.
//
// Usage in templates:
//
//	{{ lucide "between-vertical-end" }}
//
// Direct usage in Go:
//
//	lucide.BetweenVerticalEnd()
//	lucide.BetweenVerticalEnd(lucide.Options{Size: 32, Class: "my-icon"})
func BetweenVerticalEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="7" height="13" x="3" y="3" rx="1" /> <path d="m9 22 3-3 3 3" /> <rect width="7" height="13" x="14" y="3" rx="1" />`, opt)
}

// BetweenVerticalStart renders the "between-vertical-start" icon.
//
// Usage in templates:
//
//	{{ lucide "between-vertical-start" }}
//
// Direct usage in Go:
//
//	lucide.BetweenVerticalStart()
//	lucide.BetweenVerticalStart(lucide.Options{Size: 32, Class: "my-icon"})
func BetweenVerticalStart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="7" height="13" x="3" y="8" rx="1" /> <path d="m15 2-3 3-3-3" /> <rect width="7" height="13" x="14" y="8" rx="1" />`, opt)
}

// BicepsFlexed renders the "biceps-flexed" icon.
//
// Usage in templates:
//
//	{{ lucide "biceps-flexed" }}
//
// Direct usage in Go:
//
//	lucide.BicepsFlexed()
//	lucide.BicepsFlexed(lucide.Options{Size: 32, Class: "my-icon"})
func BicepsFlexed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.409 13.017A5 5 0 0 1 22 15c0 3.866-4 7-9 7-4.077 0-8.153-.82-10.371-2.462-.426-.316-.631-.832-.62-1.362C2.118 12.723 2.627 2 10 2a3 3 0 0 1 3 3 2 2 0 0 1-2 2c-1.105 0-1.64-.444-2-1" /> <path d="M15 14a5 5 0 0 0-7.584 2" /> <path d="M9.964 6.825C8.019 7.977 9.5 13 8 15" />`, opt)
}

// Bike renders the "bike" icon.
//
// Usage in templates:
//
//	{{ lucide "bike" }}
//
// Direct usage in Go:
//
//	lucide.Bike()
//	lucide.Bike(lucide.Options{Size: 32, Class: "my-icon"})
func Bike(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="18.5" cy="17.5" r="3.5" /> <circle cx="5.5" cy="17.5" r="3.5" /> <circle cx="15" cy="5" r="1" /> <path d="M12 17.5V14l-3-3 4-3 2 3h2" />`, opt)
}

// Binary renders the "binary" icon.
//
// Usage in templates:
//
//	{{ lucide "binary" }}
//
// Direct usage in Go:
//
//	lucide.Binary()
//	lucide.Binary(lucide.Options{Size: 32, Class: "my-icon"})
func Binary(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="14" y="14" width="4" height="6" rx="2" /> <rect x="6" y="4" width="4" height="6" rx="2" /> <path d="M6 20h4" /> <path d="M14 10h4" /> <path d="M6 14h2v6" /> <path d="M14 4h2v6" />`, opt)
}

// Binoculars renders the "binoculars" icon.
//
// Usage in templates:
//
//	{{ lucide "binoculars" }}
//
// Direct usage in Go:
//
//	lucide.Binoculars()
//	lucide.Binoculars(lucide.Options{Size: 32, Class: "my-icon"})
func Binoculars(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10h4" /> <path d="M19 7V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3" /> <path d="M20 21a2 2 0 0 0 2-2v-3.851c0-1.39-2-2.962-2-4.829V8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v11a2 2 0 0 0 2 2z" /> <path d="M 22 16 L 2 16" /> <path d="M4 21a2 2 0 0 1-2-2v-3.851c0-1.39 2-2.962 2-4.829V8a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v11a2 2 0 0 1-2 2z" /> <path d="M9 7V4a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3" />`, opt)
}

// Biohazard renders the "biohazard" icon.
//
// Usage in templates:
//
//	{{ lucide "biohazard" }}
//
// Direct usage in Go:
//
//	lucide.Biohazard()
//	lucide.Biohazard(lucide.Options{Size: 32, Class: "my-icon"})
func Biohazard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="11.9" r="2" /> <path d="M6.7 3.4c-.9 2.5 0 5.2 2.2 6.7C6.5 9 3.7 9.6 2 11.6" /> <path d="m8.9 10.1 1.4.8" /> <path d="M17.3 3.4c.9 2.5 0 5.2-2.2 6.7 2.4-1.2 5.2-.6 6.9 1.5" /> <path d="m15.1 10.1-1.4.8" /> <path d="M16.7 20.8c-2.6-.4-4.6-2.6-4.7-5.3-.2 2.6-2.1 4.8-4.7 5.2" /> <path d="M12 13.9v1.6" /> <path d="M13.5 5.4c-1-.2-2-.2-3 0" /> <path d="M17 16.4c.7-.7 1.2-1.6 1.5-2.5" /> <path d="M5.5 13.9c.3.9.8 1.8 1.5 2.5" />`, opt)
}

// Bird renders the "bird" icon.
//
// Usage in templates:
//
//	{{ lucide "bird" }}
//
// Direct usage in Go:
//
//	lucide.Bird()
//	lucide.Bird(lucide.Options{Size: 32, Class: "my-icon"})
func Bird(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 7h.01" /> <path d="M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20" /> <path d="m20 7 2 .5-2 .5" /> <path d="M10 18v3" /> <path d="M14 17.75V21" /> <path d="M7 18a6 6 0 0 0 3.84-10.61" />`, opt)
}

// Birdhouse renders the "birdhouse" icon.
//
// Usage in templates:
//
//	{{ lucide "birdhouse" }}
//
// Direct usage in Go:
//
//	lucide.Birdhouse()
//	lucide.Birdhouse(lucide.Options{Size: 32, Class: "my-icon"})
func Birdhouse(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 18v4" /> <path d="m17 18 1.956-11.468" /> <path d="m3 8 7.82-5.615a2 2 0 0 1 2.36 0L21 8" /> <path d="M4 18h16" /> <path d="M7 18 5.044 6.532" /> <circle cx="12" cy="10" r="2" />`, opt)
}

// Bitcoin renders the "bitcoin" icon.
//
// Usage in templates:
//
//	{{ lucide "bitcoin" }}
//
// Direct usage in Go:
//
//	lucide.Bitcoin()
//	lucide.Bitcoin(lucide.Options{Size: 32, Class: "my-icon"})
func Bitcoin(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727" />`, opt)
}

// Blend renders the "blend" icon.
//
// Usage in templates:
//
//	{{ lucide "blend" }}
//
// Direct usage in Go:
//
//	lucide.Blend()
//	lucide.Blend(lucide.Options{Size: 32, Class: "my-icon"})
func Blend(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="9" cy="9" r="7" /> <circle cx="15" cy="15" r="7" />`, opt)
}

// Blinds renders the "blinds" icon.
//
// Usage in templates:
//
//	{{ lucide "blinds" }}
//
// Direct usage in Go:
//
//	lucide.Blinds()
//	lucide.Blinds(lucide.Options{Size: 32, Class: "my-icon"})
func Blinds(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3h18" /> <path d="M20 7H8" /> <path d="M20 11H8" /> <path d="M10 19h10" /> <path d="M8 15h12" /> <path d="M4 3v14" /> <circle cx="4" cy="19" r="2" />`, opt)
}

// Blocks renders the "blocks" icon.
//
// Usage in templates:
//
//	{{ lucide "blocks" }}
//
// Direct usage in Go:
//
//	lucide.Blocks()
//	lucide.Blocks(lucide.Options{Size: 32, Class: "my-icon"})
func Blocks(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 22V7a1 1 0 0 0-1-1H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5a1 1 0 0 0-1-1H2" /> <rect x="14" y="2" width="8" height="8" rx="1" />`, opt)
}

// Bluetooth renders the "bluetooth" icon.
//
// Usage in templates:
//
//	{{ lucide "bluetooth" }}
//
// Direct usage in Go:
//
//	lucide.Bluetooth()
//	lucide.Bluetooth(lucide.Options{Size: 32, Class: "my-icon"})
func Bluetooth(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 7 10 10-5 5V2l5 5L7 17" />`, opt)
}

// BluetoothConnected renders the "bluetooth-connected" icon.
//
// Usage in templates:
//
//	{{ lucide "bluetooth-connected" }}
//
// Direct usage in Go:
//
//	lucide.BluetoothConnected()
//	lucide.BluetoothConnected(lucide.Options{Size: 32, Class: "my-icon"})
func BluetoothConnected(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 7 10 10-5 5V2l5 5L7 17" /> <line x1="18" x2="21" y1="12" y2="12" /> <line x1="3" x2="6" y1="12" y2="12" />`, opt)
}

// BluetoothOff renders the "bluetooth-off" icon.
//
// Usage in templates:
//
//	{{ lucide "bluetooth-off" }}
//
// Direct usage in Go:
//
//	lucide.BluetoothOff()
//	lucide.BluetoothOff(lucide.Options{Size: 32, Class: "my-icon"})
func BluetoothOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 17-5 5V12l-5 5" /> <path d="m2 2 20 20" /> <path d="M14.5 9.5 17 7l-5-5v4.5" />`, opt)
}

// BluetoothSearching renders the "bluetooth-searching" icon.
//
// Usage in templates:
//
//	{{ lucide "bluetooth-searching" }}
//
// Direct usage in Go:
//
//	lucide.BluetoothSearching()
//	lucide.BluetoothSearching(lucide.Options{Size: 32, Class: "my-icon"})
func BluetoothSearching(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 7 10 10-5 5V2l5 5L7 17" /> <path d="M20.83 14.83a4 4 0 0 0 0-5.66" /> <path d="M18 12h.01" />`, opt)
}

// Bold renders the "bold" icon.
//
// Usage in templates:
//
//	{{ lucide "bold" }}
//
// Direct usage in Go:
//
//	lucide.Bold()
//	lucide.Bold(lucide.Options{Size: 32, Class: "my-icon"})
func Bold(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 12h9a4 4 0 0 1 0 8H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h7a4 4 0 0 1 0 8" />`, opt)
}

// Bolt renders the "bolt" icon.
//
// Usage in templates:
//
//	{{ lucide "bolt" }}
//
// Direct usage in Go:
//
//	lucide.Bolt()
//	lucide.Bolt(lucide.Options{Size: 32, Class: "my-icon"})
func Bolt(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" /> <circle cx="12" cy="12" r="4" />`, opt)
}

// Bomb renders the "bomb" icon.
//
// Usage in templates:
//
//	{{ lucide "bomb" }}
//
// Direct usage in Go:
//
//	lucide.Bomb()
//	lucide.Bomb(lucide.Options{Size: 32, Class: "my-icon"})
func Bomb(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="11" cy="13" r="9" /> <path d="M14.35 4.65 16.3 2.7a2.41 2.41 0 0 1 3.4 0l1.6 1.6a2.4 2.4 0 0 1 0 3.4l-1.95 1.95" /> <path d="m22 2-1.5 1.5" />`, opt)
}

// Bone renders the "bone" icon.
//
// Usage in templates:
//
//	{{ lucide "bone" }}
//
// Direct usage in Go:
//
//	lucide.Bone()
//	lucide.Bone(lucide.Options{Size: 32, Class: "my-icon"})
func Bone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 10c.7-.7 1.69 0 2.5 0a2.5 2.5 0 1 0 0-5 .5.5 0 0 1-.5-.5 2.5 2.5 0 1 0-5 0c0 .81.7 1.8 0 2.5l-7 7c-.7.7-1.69 0-2.5 0a2.5 2.5 0 0 0 0 5c.28 0 .5.22.5.5a2.5 2.5 0 1 0 5 0c0-.81-.7-1.8 0-2.5Z" />`, opt)
}

// Book renders the "book" icon.
//
// Usage in templates:
//
//	{{ lucide "book" }}
//
// Direct usage in Go:
//
//	lucide.Book()
//	lucide.Book(lucide.Options{Size: 32, Class: "my-icon"})
func Book(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" />`, opt)
}

// BookA renders the "book-a" icon.
//
// Usage in templates:
//
//	{{ lucide "book-a" }}
//
// Direct usage in Go:
//
//	lucide.BookA()
//	lucide.BookA(lucide.Options{Size: 32, Class: "my-icon"})
func BookA(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="m8 13 4-7 4 7" /> <path d="M9.1 11h5.7" />`, opt)
}

// BookAlert renders the "book-alert" icon.
//
// Usage in templates:
//
//	{{ lucide "book-alert" }}
//
// Direct usage in Go:
//
//	lucide.BookAlert()
//	lucide.BookAlert(lucide.Options{Size: 32, Class: "my-icon"})
func BookAlert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13h.01" /> <path d="M12 6v3" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" />`, opt)
}

// BookAudio renders the "book-audio" icon.
//
// Usage in templates:
//
//	{{ lucide "book-audio" }}
//
// Direct usage in Go:
//
//	lucide.BookAudio()
//	lucide.BookAudio(lucide.Options{Size: 32, Class: "my-icon"})
func BookAudio(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v7" /> <path d="M16 8v3" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M8 8v3" />`, opt)
}

// BookCheck renders the "book-check" icon.
//
// Usage in templates:
//
//	{{ lucide "book-check" }}
//
// Direct usage in Go:
//
//	lucide.BookCheck()
//	lucide.BookCheck(lucide.Options{Size: 32, Class: "my-icon"})
func BookCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="m9 9.5 2 2 4-4" />`, opt)
}

// BookCopy renders the "book-copy" icon.
//
// Usage in templates:
//
//	{{ lucide "book-copy" }}
//
// Direct usage in Go:
//
//	lucide.BookCopy()
//	lucide.BookCopy(lucide.Options{Size: 32, Class: "my-icon"})
func BookCopy(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 7a2 2 0 0 0-2 2v11" /> <path d="M5.803 18H5a2 2 0 0 0 0 4h9.5a.5.5 0 0 0 .5-.5V21" /> <path d="M9 15V4a2 2 0 0 1 2-2h9.5a.5.5 0 0 1 .5.5v14a.5.5 0 0 1-.5.5H11a2 2 0 0 1 0-4h10" />`, opt)
}

// BookDashed renders the "book-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "book-dashed" }}
//
// Direct usage in Go:
//
//	lucide.BookDashed()
//	lucide.BookDashed(lucide.Options{Size: 32, Class: "my-icon"})
func BookDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17h1.5" /> <path d="M12 22h1.5" /> <path d="M12 2h1.5" /> <path d="M17.5 22H19a1 1 0 0 0 1-1" /> <path d="M17.5 2H19a1 1 0 0 1 1 1v1.5" /> <path d="M20 14v3h-2.5" /> <path d="M20 8.5V10" /> <path d="M4 10V8.5" /> <path d="M4 19.5V14" /> <path d="M4 4.5A2.5 2.5 0 0 1 6.5 2H8" /> <path d="M8 22H6.5a1 1 0 0 1 0-5H8" />`, opt)
}

// BookDown renders the "book-down" icon.
//
// Usage in templates:
//
//	{{ lucide "book-down" }}
//
// Direct usage in Go:
//
//	lucide.BookDown()
//	lucide.BookDown(lucide.Options{Size: 32, Class: "my-icon"})
func BookDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13V7" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="m9 10 3 3 3-3" />`, opt)
}

// BookHeadphones renders the "book-headphones" icon.
//
// Usage in templates:
//
//	{{ lucide "book-headphones" }}
//
// Direct usage in Go:
//
//	lucide.BookHeadphones()
//	lucide.BookHeadphones(lucide.Options{Size: 32, Class: "my-icon"})
func BookHeadphones(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M8 12v-2a4 4 0 0 1 8 0v2" /> <circle cx="15" cy="12" r="1" /> <circle cx="9" cy="12" r="1" />`, opt)
}

// BookHeart renders the "book-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "book-heart" }}
//
// Direct usage in Go:
//
//	lucide.BookHeart()
//	lucide.BookHeart(lucide.Options{Size: 32, Class: "my-icon"})
func BookHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M8.62 9.8A2.25 2.25 0 1 1 12 6.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z" />`, opt)
}

// BookImage renders the "book-image" icon.
//
// Usage in templates:
//
//	{{ lucide "book-image" }}
//
// Direct usage in Go:
//
//	lucide.BookImage()
//	lucide.BookImage(lucide.Options{Size: 32, Class: "my-icon"})
func BookImage(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m20 13.7-2.1-2.1a2 2 0 0 0-2.8 0L9.7 17" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <circle cx="10" cy="8" r="2" />`, opt)
}

// BookKey renders the "book-key" icon.
//
// Usage in templates:
//
//	{{ lucide "book-key" }}
//
// Direct usage in Go:
//
//	lucide.BookKey()
//	lucide.BookKey(lucide.Options{Size: 32, Class: "my-icon"})
func BookKey(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 3 1 1" /> <path d="m20 2-4.5 4.5" /> <path d="M20 7.898V21a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2h7.844" /> <circle cx="14" cy="8" r="2" />`, opt)
}

// BookLock renders the "book-lock" icon.
//
// Usage in templates:
//
//	{{ lucide "book-lock" }}
//
// Direct usage in Go:
//
//	lucide.BookLock()
//	lucide.BookLock(lucide.Options{Size: 32, Class: "my-icon"})
func BookLock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 6V4a2 2 0 1 0-4 0v2" /> <path d="M20 15v6a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H10" /> <rect x="12" y="6" width="8" height="5" rx="1" />`, opt)
}

// BookMarked renders the "book-marked" icon.
//
// Usage in templates:
//
//	{{ lucide "book-marked" }}
//
// Direct usage in Go:
//
//	lucide.BookMarked()
//	lucide.BookMarked(lucide.Options{Size: 32, Class: "my-icon"})
func BookMarked(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v8l3-3 3 3V2" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" />`, opt)
}

// BookMinus renders the "book-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "book-minus" }}
//
// Direct usage in Go:
//
//	lucide.BookMinus()
//	lucide.BookMinus(lucide.Options{Size: 32, Class: "my-icon"})
func BookMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M9 10h6" />`, opt)
}

// BookOpen renders the "book-open" icon.
//
// Usage in templates:
//
//	{{ lucide "book-open" }}
//
// Direct usage in Go:
//
//	lucide.BookOpen()
//	lucide.BookOpen(lucide.Options{Size: 32, Class: "my-icon"})
func BookOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 7v14" /> <path d="M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z" />`, opt)
}

// BookOpenCheck renders the "book-open-check" icon.
//
// Usage in templates:
//
//	{{ lucide "book-open-check" }}
//
// Direct usage in Go:
//
//	lucide.BookOpenCheck()
//	lucide.BookOpenCheck(lucide.Options{Size: 32, Class: "my-icon"})
func BookOpenCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 21V7" /> <path d="m16 12 2 2 4-4" /> <path d="M22 6V4a1 1 0 0 0-1-1h-5a4 4 0 0 0-4 4 4 4 0 0 0-4-4H3a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h6a3 3 0 0 1 3 3 3 3 0 0 1 3-3h6a1 1 0 0 0 1-1v-1.3" />`, opt)
}

// BookOpenText renders the "book-open-text" icon.
//
// Usage in templates:
//
//	{{ lucide "book-open-text" }}
//
// Direct usage in Go:
//
//	lucide.BookOpenText()
//	lucide.BookOpenText(lucide.Options{Size: 32, Class: "my-icon"})
func BookOpenText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 7v14" /> <path d="M16 12h2" /> <path d="M16 8h2" /> <path d="M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z" /> <path d="M6 12h2" /> <path d="M6 8h2" />`, opt)
}

// BookPlus renders the "book-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "book-plus" }}
//
// Direct usage in Go:
//
//	lucide.BookPlus()
//	lucide.BookPlus(lucide.Options{Size: 32, Class: "my-icon"})
func BookPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 7v6" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M9 10h6" />`, opt)
}

// BookText renders the "book-text" icon.
//
// Usage in templates:
//
//	{{ lucide "book-text" }}
//
// Direct usage in Go:
//
//	lucide.BookText()
//	lucide.BookText(lucide.Options{Size: 32, Class: "my-icon"})
func BookText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M8 11h8" /> <path d="M8 7h6" />`, opt)
}

// BookType renders the "book-type" icon.
//
// Usage in templates:
//
//	{{ lucide "book-type" }}
//
// Direct usage in Go:
//
//	lucide.BookType()
//	lucide.BookType(lucide.Options{Size: 32, Class: "my-icon"})
func BookType(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 13h4" /> <path d="M12 6v7" /> <path d="M16 8V6H8v2" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" />`, opt)
}

// BookUp renders the "book-up" icon.
//
// Usage in templates:
//
//	{{ lucide "book-up" }}
//
// Direct usage in Go:
//
//	lucide.BookUp()
//	lucide.BookUp(lucide.Options{Size: 32, Class: "my-icon"})
func BookUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13V7" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="m9 10 3-3 3 3" />`, opt)
}

// BookUp2 renders the "book-up-2" icon.
//
// Usage in templates:
//
//	{{ lucide "book-up-2" }}
//
// Direct usage in Go:
//
//	lucide.BookUp2()
//	lucide.BookUp2(lucide.Options{Size: 32, Class: "my-icon"})
func BookUp2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13V7" /> <path d="M18 2h1a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2" /> <path d="m9 10 3-3 3 3" /> <path d="m9 5 3-3 3 3" />`, opt)
}

// BookUser renders the "book-user" icon.
//
// Usage in templates:
//
//	{{ lucide "book-user" }}
//
// Direct usage in Go:
//
//	lucide.BookUser()
//	lucide.BookUser(lucide.Options{Size: 32, Class: "my-icon"})
func BookUser(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 13a3 3 0 1 0-6 0" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <circle cx="12" cy="8" r="2" />`, opt)
}

// BookX renders the "book-x" icon.
//
// Usage in templates:
//
//	{{ lucide "book-x" }}
//
// Direct usage in Go:
//
//	lucide.BookX()
//	lucide.BookX(lucide.Options{Size: 32, Class: "my-icon"})
func BookX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14.5 7-5 5" /> <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /> <path d="m9.5 7 5 5" />`, opt)
}

// Bookmark renders the "bookmark" icon.
//
// Usage in templates:
//
//	{{ lucide "bookmark" }}
//
// Direct usage in Go:
//
//	lucide.Bookmark()
//	lucide.Bookmark(lucide.Options{Size: 32, Class: "my-icon"})
func Bookmark(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" />`, opt)
}

// BookmarkCheck renders the "bookmark-check" icon.
//
// Usage in templates:
//
//	{{ lucide "bookmark-check" }}
//
// Direct usage in Go:
//
//	lucide.BookmarkCheck()
//	lucide.BookmarkCheck(lucide.Options{Size: 32, Class: "my-icon"})
func BookmarkCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z" /> <path d="m9 10 2 2 4-4" />`, opt)
}

// BookmarkMinus renders the "bookmark-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "bookmark-minus" }}
//
// Direct usage in Go:
//
//	lucide.BookmarkMinus()
//	lucide.BookmarkMinus(lucide.Options{Size: 32, Class: "my-icon"})
func BookmarkMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" /> <line x1="15" x2="9" y1="10" y2="10" />`, opt)
}

// BookmarkPlus renders the "bookmark-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "bookmark-plus" }}
//
// Direct usage in Go:
//
//	lucide.BookmarkPlus()
//	lucide.BookmarkPlus(lucide.Options{Size: 32, Class: "my-icon"})
func BookmarkPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" /> <line x1="12" x2="12" y1="7" y2="13" /> <line x1="15" x2="9" y1="10" y2="10" />`, opt)
}

// BookmarkX renders the "bookmark-x" icon.
//
// Usage in templates:
//
//	{{ lucide "bookmark-x" }}
//
// Direct usage in Go:
//
//	lucide.BookmarkX()
//	lucide.BookmarkX(lucide.Options{Size: 32, Class: "my-icon"})
func BookmarkX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z" /> <path d="m14.5 7.5-5 5" /> <path d="m9.5 7.5 5 5" />`, opt)
}

// BoomBox renders the "boom-box" icon.
//
// Usage in templates:
//
//	{{ lucide "boom-box" }}
//
// Direct usage in Go:
//
//	lucide.BoomBox()
//	lucide.BoomBox(lucide.Options{Size: 32, Class: "my-icon"})
func BoomBox(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 9V5a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4" /> <path d="M8 8v1" /> <path d="M12 8v1" /> <path d="M16 8v1" /> <rect width="20" height="12" x="2" y="9" rx="2" /> <circle cx="8" cy="15" r="2" /> <circle cx="16" cy="15" r="2" />`, opt)
}

// Bot renders the "bot" icon.
//
// Usage in templates:
//
//	{{ lucide "bot" }}
//
// Direct usage in Go:
//
//	lucide.Bot()
//	lucide.Bot(lucide.Options{Size: 32, Class: "my-icon"})
func Bot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 8V4H8" /> <rect width="16" height="12" x="4" y="8" rx="2" /> <path d="M2 14h2" /> <path d="M20 14h2" /> <path d="M15 13v2" /> <path d="M9 13v2" />`, opt)
}

// BotMessageSquare renders the "bot-message-square" icon.
//
// Usage in templates:
//
//	{{ lucide "bot-message-square" }}
//
// Direct usage in Go:
//
//	lucide.BotMessageSquare()
//	lucide.BotMessageSquare(lucide.Options{Size: 32, Class: "my-icon"})
func BotMessageSquare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6V2H8" /> <path d="M15 11v2" /> <path d="M2 12h2" /> <path d="M20 12h2" /> <path d="M20 16a2 2 0 0 1-2 2H8.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 4 20.286V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2z" /> <path d="M9 11v2" />`, opt)
}

// BotOff renders the "bot-off" icon.
//
// Usage in templates:
//
//	{{ lucide "bot-off" }}
//
// Direct usage in Go:
//
//	lucide.BotOff()
//	lucide.BotOff(lucide.Options{Size: 32, Class: "my-icon"})
func BotOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.67 8H18a2 2 0 0 1 2 2v4.33" /> <path d="M2 14h2" /> <path d="M20 14h2" /> <path d="M22 22 2 2" /> <path d="M8 8H6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 1.414-.586" /> <path d="M9 13v2" /> <path d="M9.67 4H12v2.33" />`, opt)
}

// BottleWine renders the "bottle-wine" icon.
//
// Usage in templates:
//
//	{{ lucide "bottle-wine" }}
//
// Direct usage in Go:
//
//	lucide.BottleWine()
//	lucide.BottleWine(lucide.Options{Size: 32, Class: "my-icon"})
func BottleWine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a6 6 0 0 0 1.2 3.6l.6.8A6 6 0 0 1 17 13v8a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-8a6 6 0 0 1 1.2-3.6l.6-.8A6 6 0 0 0 10 5z" /> <path d="M17 13h-4a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h4" />`, opt)
}

// BowArrow renders the "bow-arrow" icon.
//
// Usage in templates:
//
//	{{ lucide "bow-arrow" }}
//
// Direct usage in Go:
//
//	lucide.BowArrow()
//	lucide.BowArrow(lucide.Options{Size: 32, Class: "my-icon"})
func BowArrow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 3h4v4" /> <path d="M18.575 11.082a13 13 0 0 1 1.048 9.027 1.17 1.17 0 0 1-1.914.597L14 17" /> <path d="M7 10 3.29 6.29a1.17 1.17 0 0 1 .6-1.91 13 13 0 0 1 9.03 1.05" /> <path d="M7 14a1.7 1.7 0 0 0-1.207.5l-2.646 2.646A.5.5 0 0 0 3.5 18H5a1 1 0 0 1 1 1v1.5a.5.5 0 0 0 .854.354L9.5 18.207A1.7 1.7 0 0 0 10 17v-2a1 1 0 0 0-1-1z" /> <path d="M9.707 14.293 21 3" />`, opt)
}

// Box renders the "box" icon.
//
// Usage in templates:
//
//	{{ lucide "box" }}
//
// Direct usage in Go:
//
//	lucide.Box()
//	lucide.Box(lucide.Options{Size: 32, Class: "my-icon"})
func Box(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z" /> <path d="m3.3 7 8.7 5 8.7-5" /> <path d="M12 22V12" />`, opt)
}

// Boxes renders the "boxes" icon.
//
// Usage in templates:
//
//	{{ lucide "boxes" }}
//
// Direct usage in Go:
//
//	lucide.Boxes()
//	lucide.Boxes(lucide.Options{Size: 32, Class: "my-icon"})
func Boxes(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z" /> <path d="m7 16.5-4.74-2.85" /> <path d="m7 16.5 5-3" /> <path d="M7 16.5v5.17" /> <path d="M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z" /> <path d="m17 16.5-5-3" /> <path d="m17 16.5 4.74-2.85" /> <path d="M17 16.5v5.17" /> <path d="M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z" /> <path d="M12 8 7.26 5.15" /> <path d="m12 8 4.74-2.85" /> <path d="M12 13.5V8" />`, opt)
}

// Braces renders the "braces" icon.
//
// Usage in templates:
//
//	{{ lucide "braces" }}
//
// Direct usage in Go:
//
//	lucide.Braces()
//	lucide.Braces(lucide.Options{Size: 32, Class: "my-icon"})
func Braces(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1" /> <path d="M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1" />`, opt)
}

// Brackets renders the "brackets" icon.
//
// Usage in templates:
//
//	{{ lucide "brackets" }}
//
// Direct usage in Go:
//
//	lucide.Brackets()
//	lucide.Brackets(lucide.Options{Size: 32, Class: "my-icon"})
func Brackets(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 3h3a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1h-3" /> <path d="M8 21H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h3" />`, opt)
}

// Brain renders the "brain" icon.
//
// Usage in templates:
//
//	{{ lucide "brain" }}
//
// Direct usage in Go:
//
//	lucide.Brain()
//	lucide.Brain(lucide.Options{Size: 32, Class: "my-icon"})
func Brain(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 18V5" /> <path d="M15 13a4.17 4.17 0 0 1-3-4 4.17 4.17 0 0 1-3 4" /> <path d="M17.598 6.5A3 3 0 1 0 12 5a3 3 0 1 0-5.598 1.5" /> <path d="M17.997 5.125a4 4 0 0 1 2.526 5.77" /> <path d="M18 18a4 4 0 0 0 2-7.464" /> <path d="M19.967 17.483A4 4 0 1 1 12 18a4 4 0 1 1-7.967-.517" /> <path d="M6 18a4 4 0 0 1-2-7.464" /> <path d="M6.003 5.125a4 4 0 0 0-2.526 5.77" />`, opt)
}

// BrainCircuit renders the "brain-circuit" icon.
//
// Usage in templates:
//
//	{{ lucide "brain-circuit" }}
//
// Direct usage in Go:
//
//	lucide.BrainCircuit()
//	lucide.BrainCircuit(lucide.Options{Size: 32, Class: "my-icon"})
func BrainCircuit(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z" /> <path d="M9 13a4.5 4.5 0 0 0 3-4" /> <path d="M6.003 5.125A3 3 0 0 0 6.401 6.5" /> <path d="M3.477 10.896a4 4 0 0 1 .585-.396" /> <path d="M6 18a4 4 0 0 1-1.967-.516" /> <path d="M12 13h4" /> <path d="M12 18h6a2 2 0 0 1 2 2v1" /> <path d="M12 8h8" /> <path d="M16 8V5a2 2 0 0 1 2-2" /> <circle cx="16" cy="13" r=".5" /> <circle cx="18" cy="3" r=".5" /> <circle cx="20" cy="21" r=".5" /> <circle cx="20" cy="8" r=".5" />`, opt)
}

// BrainCog renders the "brain-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "brain-cog" }}
//
// Direct usage in Go:
//
//	lucide.BrainCog()
//	lucide.BrainCog(lucide.Options{Size: 32, Class: "my-icon"})
func BrainCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10.852 14.772-.383.923" /> <path d="m10.852 9.228-.383-.923" /> <path d="m13.148 14.772.382.924" /> <path d="m13.531 8.305-.383.923" /> <path d="m14.772 10.852.923-.383" /> <path d="m14.772 13.148.923.383" /> <path d="M17.598 6.5A3 3 0 1 0 12 5a3 3 0 0 0-5.63-1.446 3 3 0 0 0-.368 1.571 4 4 0 0 0-2.525 5.771" /> <path d="M17.998 5.125a4 4 0 0 1 2.525 5.771" /> <path d="M19.505 10.294a4 4 0 0 1-1.5 7.706" /> <path d="M4.032 17.483A4 4 0 0 0 11.464 20c.18-.311.892-.311 1.072 0a4 4 0 0 0 7.432-2.516" /> <path d="M4.5 10.291A4 4 0 0 0 6 18" /> <path d="M6.002 5.125a3 3 0 0 0 .4 1.375" /> <path d="m9.228 10.852-.923-.383" /> <path d="m9.228 13.148-.923.383" /> <circle cx="12" cy="12" r="3" />`, opt)
}

// BrickWall renders the "brick-wall" icon.
//
// Usage in templates:
//
//	{{ lucide "brick-wall" }}
//
// Direct usage in Go:
//
//	lucide.BrickWall()
//	lucide.BrickWall(lucide.Options{Size: 32, Class: "my-icon"})
func BrickWall(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M12 9v6" /> <path d="M16 15v6" /> <path d="M16 3v6" /> <path d="M3 15h18" /> <path d="M3 9h18" /> <path d="M8 15v6" /> <path d="M8 3v6" />`, opt)
}

// BrickWallFire renders the "brick-wall-fire" icon.
//
// Usage in templates:
//
//	{{ lucide "brick-wall-fire" }}
//
// Direct usage in Go:
//
//	lucide.BrickWallFire()
//	lucide.BrickWallFire(lucide.Options{Size: 32, Class: "my-icon"})
func BrickWallFire(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 3v2.107" /> <path d="M17 9c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 22 17a5 5 0 0 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C13 11.5 16 9 17 9" /> <path d="M21 8.274V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.938" /> <path d="M3 15h5.253" /> <path d="M3 9h8.228" /> <path d="M8 15v6" /> <path d="M8 3v6" />`, opt)
}

// BrickWallShield renders the "brick-wall-shield" icon.
//
// Usage in templates:
//
//	{{ lucide "brick-wall-shield" }}
//
// Direct usage in Go:
//
//	lucide.BrickWallShield()
//	lucide.BrickWallShield(lucide.Options{Size: 32, Class: "my-icon"})
func BrickWallShield(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 9v1.258" /> <path d="M16 3v5.46" /> <path d="M21 9.118V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h5.75" /> <path d="M22 17.5c0 2.499-1.75 3.749-3.83 4.474a.5.5 0 0 1-.335-.005c-2.085-.72-3.835-1.97-3.835-4.47V14a.5.5 0 0 1 .5-.499c1 0 2.25-.6 3.12-1.36a.6.6 0 0 1 .76-.001c.875.765 2.12 1.36 3.12 1.36a.5.5 0 0 1 .5.5z" /> <path d="M3 15h7" /> <path d="M3 9h12.142" /> <path d="M8 15v6" /> <path d="M8 3v6" />`, opt)
}

// Briefcase renders the "briefcase" icon.
//
// Usage in templates:
//
//	{{ lucide "briefcase" }}
//
// Direct usage in Go:
//
//	lucide.Briefcase()
//	lucide.Briefcase(lucide.Options{Size: 32, Class: "my-icon"})
func Briefcase(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16" /> <rect width="20" height="14" x="2" y="6" rx="2" />`, opt)
}

// BriefcaseBusiness renders the "briefcase-business" icon.
//
// Usage in templates:
//
//	{{ lucide "briefcase-business" }}
//
// Direct usage in Go:
//
//	lucide.BriefcaseBusiness()
//	lucide.BriefcaseBusiness(lucide.Options{Size: 32, Class: "my-icon"})
func BriefcaseBusiness(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 12h.01" /> <path d="M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2" /> <path d="M22 13a18.15 18.15 0 0 1-20 0" /> <rect width="20" height="14" x="2" y="6" rx="2" />`, opt)
}

// BriefcaseConveyorBelt renders the "briefcase-conveyor-belt" icon.
//
// Usage in templates:
//
//	{{ lucide "briefcase-conveyor-belt" }}
//
// Direct usage in Go:
//
//	lucide.BriefcaseConveyorBelt()
//	lucide.BriefcaseConveyorBelt(lucide.Options{Size: 32, Class: "my-icon"})
func BriefcaseConveyorBelt(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 20v2" /> <path d="M14 20v2" /> <path d="M18 20v2" /> <path d="M21 20H3" /> <path d="M6 20v2" /> <path d="M8 16V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v12" /> <rect x="4" y="6" width="16" height="10" rx="2" />`, opt)
}

// BriefcaseMedical renders the "briefcase-medical" icon.
//
// Usage in templates:
//
//	{{ lucide "briefcase-medical" }}
//
// Direct usage in Go:
//
//	lucide.BriefcaseMedical()
//	lucide.BriefcaseMedical(lucide.Options{Size: 32, Class: "my-icon"})
func BriefcaseMedical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 11v4" /> <path d="M14 13h-4" /> <path d="M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2" /> <path d="M18 6v14" /> <path d="M6 6v14" /> <rect width="20" height="14" x="2" y="6" rx="2" />`, opt)
}

// BringToFront renders the "bring-to-front" icon.
//
// Usage in templates:
//
//	{{ lucide "bring-to-front" }}
//
// Direct usage in Go:
//
//	lucide.BringToFront()
//	lucide.BringToFront(lucide.Options{Size: 32, Class: "my-icon"})
func BringToFront(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="8" y="8" width="8" height="8" rx="2" /> <path d="M4 10a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2" /> <path d="M14 20a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2" />`, opt)
}

// Brush renders the "brush" icon.
//
// Usage in templates:
//
//	{{ lucide "brush" }}
//
// Direct usage in Go:
//
//	lucide.Brush()
//	lucide.Brush(lucide.Options{Size: 32, Class: "my-icon"})
func Brush(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11 10 3 3" /> <path d="M6.5 21A3.5 3.5 0 1 0 3 17.5a2.62 2.62 0 0 1-.708 1.792A1 1 0 0 0 3 21z" /> <path d="M9.969 17.031 21.378 5.624a1 1 0 0 0-3.002-3.002L6.967 14.031" />`, opt)
}

// BrushCleaning renders the "brush-cleaning" icon.
//
// Usage in templates:
//
//	{{ lucide "brush-cleaning" }}
//
// Direct usage in Go:
//
//	lucide.BrushCleaning()
//	lucide.BrushCleaning(lucide.Options{Size: 32, Class: "my-icon"})
func BrushCleaning(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 22-1-4" /> <path d="M19 13.99a1 1 0 0 0 1-1V12a2 2 0 0 0-2-2h-3a1 1 0 0 1-1-1V4a2 2 0 0 0-4 0v5a1 1 0 0 1-1 1H6a2 2 0 0 0-2 2v.99a1 1 0 0 0 1 1" /> <path d="M5 14h14l1.973 6.767A1 1 0 0 1 20 22H4a1 1 0 0 1-.973-1.233z" /> <path d="m8 22 1-4" />`, opt)
}

// Bubbles renders the "bubbles" icon.
//
// Usage in templates:
//
//	{{ lucide "bubbles" }}
//
// Direct usage in Go:
//
//	lucide.Bubbles()
//	lucide.Bubbles(lucide.Options{Size: 32, Class: "my-icon"})
func Bubbles(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7.2 14.8a2 2 0 0 1 2 2" /> <circle cx="18.5" cy="8.5" r="3.5" /> <circle cx="7.5" cy="16.5" r="5.5" /> <circle cx="7.5" cy="4.5" r="2.5" />`, opt)
}

// Bug renders the "bug" icon.
//
// Usage in templates:
//
//	{{ lucide "bug" }}
//
// Direct usage in Go:
//
//	lucide.Bug()
//	lucide.Bug(lucide.Options{Size: 32, Class: "my-icon"})
func Bug(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20v-9" /> <path d="M14 7a4 4 0 0 1 4 4v3a6 6 0 0 1-12 0v-3a4 4 0 0 1 4-4z" /> <path d="M14.12 3.88 16 2" /> <path d="M21 21a4 4 0 0 0-3.81-4" /> <path d="M21 5a4 4 0 0 1-3.55 3.97" /> <path d="M22 13h-4" /> <path d="M3 21a4 4 0 0 1 3.81-4" /> <path d="M3 5a4 4 0 0 0 3.55 3.97" /> <path d="M6 13H2" /> <path d="m8 2 1.88 1.88" /> <path d="M9 7.13V6a3 3 0 1 1 6 0v1.13" />`, opt)
}

// BugOff renders the "bug-off" icon.
//
// Usage in templates:
//
//	{{ lucide "bug-off" }}
//
// Direct usage in Go:
//
//	lucide.BugOff()
//	lucide.BugOff(lucide.Options{Size: 32, Class: "my-icon"})
func BugOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20v-8" /> <path d="M14.12 3.88 16 2" /> <path d="M15 7.13V6a3 3 0 0 0-5.14-2.1L8 2" /> <path d="M18 12.34V11a4 4 0 0 0-4-4h-1.3" /> <path d="m2 2 20 20" /> <path d="M21 5a4 4 0 0 1-3.55 3.97" /> <path d="M22 13h-3.34" /> <path d="M3 21a4 4 0 0 1 3.81-4" /> <path d="M6 13H2" /> <path d="M7.7 7.7A4 4 0 0 0 6 11v3a6 6 0 0 0 11.13 3.13" />`, opt)
}

// BugPlay renders the "bug-play" icon.
//
// Usage in templates:
//
//	{{ lucide "bug-play" }}
//
// Direct usage in Go:
//
//	lucide.BugPlay()
//	lucide.BugPlay(lucide.Options{Size: 32, Class: "my-icon"})
func BugPlay(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 19.655A6 6 0 0 1 6 14v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 3.97" /> <path d="M14 15.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997a1 1 0 0 1-1.517-.86z" /> <path d="M14.12 3.88 16 2" /> <path d="M21 5a4 4 0 0 1-3.55 3.97" /> <path d="M3 21a4 4 0 0 1 3.81-4" /> <path d="M3 5a4 4 0 0 0 3.55 3.97" /> <path d="M6 13H2" /> <path d="m8 2 1.88 1.88" /> <path d="M9 7.13V6a3 3 0 1 1 6 0v1.13" />`, opt)
}

// Building renders the "building" icon.
//
// Usage in templates:
//
//	{{ lucide "building" }}
//
// Direct usage in Go:
//
//	lucide.Building()
//	lucide.Building(lucide.Options{Size: 32, Class: "my-icon"})
func Building(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 10h.01" /> <path d="M12 14h.01" /> <path d="M12 6h.01" /> <path d="M16 10h.01" /> <path d="M16 14h.01" /> <path d="M16 6h.01" /> <path d="M8 10h.01" /> <path d="M8 14h.01" /> <path d="M8 6h.01" /> <path d="M9 22v-3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3" /> <rect x="4" y="2" width="16" height="20" rx="2" />`, opt)
}

// Building2 renders the "building-2" icon.
//
// Usage in templates:
//
//	{{ lucide "building-2" }}
//
// Direct usage in Go:
//
//	lucide.Building2()
//	lucide.Building2(lucide.Options{Size: 32, Class: "my-icon"})
func Building2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 12h4" /> <path d="M10 8h4" /> <path d="M14 21v-3a2 2 0 0 0-4 0v3" /> <path d="M6 10H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-2" /> <path d="M6 21V5a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v16" />`, opt)
}

// Bus renders the "bus" icon.
//
// Usage in templates:
//
//	{{ lucide "bus" }}
//
// Direct usage in Go:
//
//	lucide.Bus()
//	lucide.Bus(lucide.Options{Size: 32, Class: "my-icon"})
func Bus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 6v6" /> <path d="M15 6v6" /> <path d="M2 12h19.6" /> <path d="M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3" /> <circle cx="7" cy="18" r="2" /> <path d="M9 18h5" /> <circle cx="16" cy="18" r="2" />`, opt)
}

// BusFront renders the "bus-front" icon.
//
// Usage in templates:
//
//	{{ lucide "bus-front" }}
//
// Direct usage in Go:
//
//	lucide.BusFront()
//	lucide.BusFront(lucide.Options{Size: 32, Class: "my-icon"})
func BusFront(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 6 2 7" /> <path d="M10 6h4" /> <path d="m22 7-2-1" /> <rect width="16" height="16" x="4" y="3" rx="2" /> <path d="M4 11h16" /> <path d="M8 15h.01" /> <path d="M16 15h.01" /> <path d="M6 19v2" /> <path d="M18 21v-2" />`, opt)
}

// Cable renders the "cable" icon.
//
// Usage in templates:
//
//	{{ lucide "cable" }}
//
// Direct usage in Go:
//
//	lucide.Cable()
//	lucide.Cable(lucide.Options{Size: 32, Class: "my-icon"})
func Cable(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 19a1 1 0 0 1-1-1v-2a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2a1 1 0 0 1-1 1z" /> <path d="M17 21v-2" /> <path d="M19 14V6.5a1 1 0 0 0-7 0v11a1 1 0 0 1-7 0V10" /> <path d="M21 21v-2" /> <path d="M3 5V3" /> <path d="M4 10a2 2 0 0 1-2-2V6a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2z" /> <path d="M7 5V3" />`, opt)
}

// CableCar renders the "cable-car" icon.
//
// Usage in templates:
//
//	{{ lucide "cable-car" }}
//
// Direct usage in Go:
//
//	lucide.CableCar()
//	lucide.CableCar(lucide.Options{Size: 32, Class: "my-icon"})
func CableCar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 3h.01" /> <path d="M14 2h.01" /> <path d="m2 9 20-5" /> <path d="M12 12V6.5" /> <rect width="16" height="10" x="4" y="12" rx="3" /> <path d="M9 12v5" /> <path d="M15 12v5" /> <path d="M4 17h16" />`, opt)
}

// Cake renders the "cake" icon.
//
// Usage in templates:
//
//	{{ lucide "cake" }}
//
// Direct usage in Go:
//
//	lucide.Cake()
//	lucide.Cake(lucide.Options{Size: 32, Class: "my-icon"})
func Cake(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8" /> <path d="M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1" /> <path d="M2 21h20" /> <path d="M7 8v3" /> <path d="M12 8v3" /> <path d="M17 8v3" /> <path d="M7 4h.01" /> <path d="M12 4h.01" /> <path d="M17 4h.01" />`, opt)
}

// CakeSlice renders the "cake-slice" icon.
//
// Usage in templates:
//
//	{{ lucide "cake-slice" }}
//
// Direct usage in Go:
//
//	lucide.CakeSlice()
//	lucide.CakeSlice(lucide.Options{Size: 32, Class: "my-icon"})
func CakeSlice(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 13H3" /> <path d="M16 17H3" /> <path d="m7.2 7.9-3.388 2.5A2 2 0 0 0 3 12.01V20a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-8.654c0-2-2.44-6.026-6.44-8.026a1 1 0 0 0-1.082.057L10.4 5.6" /> <circle cx="9" cy="7" r="2" />`, opt)
}

// Calculator renders the "calculator" icon.
//
// Usage in templates:
//
//	{{ lucide "calculator" }}
//
// Direct usage in Go:
//
//	lucide.Calculator()
//	lucide.Calculator(lucide.Options{Size: 32, Class: "my-icon"})
func Calculator(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="16" height="20" x="4" y="2" rx="2" /> <line x1="8" x2="16" y1="6" y2="6" /> <line x1="16" x2="16" y1="14" y2="18" /> <path d="M16 10h.01" /> <path d="M12 10h.01" /> <path d="M8 10h.01" /> <path d="M12 14h.01" /> <path d="M8 14h.01" /> <path d="M12 18h.01" /> <path d="M8 18h.01" />`, opt)
}

// Calendar renders the "calendar" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar" }}
//
// Direct usage in Go:
//
//	lucide.Calendar()
//	lucide.Calendar(lucide.Options{Size: 32, Class: "my-icon"})
func Calendar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <rect width="18" height="18" x="3" y="4" rx="2" /> <path d="M3 10h18" />`, opt)
}

// Calendar1 renders the "calendar-1" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-1" }}
//
// Direct usage in Go:
//
//	lucide.Calendar1()
//	lucide.Calendar1(lucide.Options{Size: 32, Class: "my-icon"})
func Calendar1(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 14h1v4" /> <path d="M16 2v4" /> <path d="M3 10h18" /> <path d="M8 2v4" /> <rect x="3" y="4" width="18" height="18" rx="2" />`, opt)
}

// CalendarArrowDown renders the "calendar-arrow-down" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-arrow-down" }}
//
// Direct usage in Go:
//
//	lucide.CalendarArrowDown()
//	lucide.CalendarArrowDown(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarArrowDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 18 4 4 4-4" /> <path d="M16 2v4" /> <path d="M18 14v8" /> <path d="M21 11.354V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.343" /> <path d="M3 10h18" /> <path d="M8 2v4" />`, opt)
}

// CalendarArrowUp renders the "calendar-arrow-up" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-arrow-up" }}
//
// Direct usage in Go:
//
//	lucide.CalendarArrowUp()
//	lucide.CalendarArrowUp(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarArrowUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 18 4-4 4 4" /> <path d="M16 2v4" /> <path d="M18 22v-8" /> <path d="M21 11.343V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h9" /> <path d="M3 10h18" /> <path d="M8 2v4" />`, opt)
}

// CalendarCheck renders the "calendar-check" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-check" }}
//
// Direct usage in Go:
//
//	lucide.CalendarCheck()
//	lucide.CalendarCheck(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <rect width="18" height="18" x="3" y="4" rx="2" /> <path d="M3 10h18" /> <path d="m9 16 2 2 4-4" />`, opt)
}

// CalendarCheck2 renders the "calendar-check-2" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-check-2" }}
//
// Direct usage in Go:
//
//	lucide.CalendarCheck2()
//	lucide.CalendarCheck2(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarCheck2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <path d="M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8" /> <path d="M3 10h18" /> <path d="m16 20 2 2 4-4" />`, opt)
}

// CalendarClock renders the "calendar-clock" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-clock" }}
//
// Direct usage in Go:
//
//	lucide.CalendarClock()
//	lucide.CalendarClock(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarClock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 14v2.2l1.6 1" /> <path d="M16 2v4" /> <path d="M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5" /> <path d="M3 10h5" /> <path d="M8 2v4" /> <circle cx="16" cy="16" r="6" />`, opt)
}

// CalendarCog renders the "calendar-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-cog" }}
//
// Direct usage in Go:
//
//	lucide.CalendarCog()
//	lucide.CalendarCog(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15.228 16.852-.923-.383" /> <path d="m15.228 19.148-.923.383" /> <path d="M16 2v4" /> <path d="m16.47 14.305.382.923" /> <path d="m16.852 20.772-.383.924" /> <path d="m19.148 15.228.383-.923" /> <path d="m19.53 21.696-.382-.924" /> <path d="m20.772 16.852.924-.383" /> <path d="m20.772 19.148.924.383" /> <path d="M21 10.592V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6" /> <path d="M3 10h18" /> <path d="M8 2v4" /> <circle cx="18" cy="18" r="3" />`, opt)
}

// CalendarDays renders the "calendar-days" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-days" }}
//
// Direct usage in Go:
//
//	lucide.CalendarDays()
//	lucide.CalendarDays(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarDays(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <rect width="18" height="18" x="3" y="4" rx="2" /> <path d="M3 10h18" /> <path d="M8 14h.01" /> <path d="M12 14h.01" /> <path d="M16 14h.01" /> <path d="M8 18h.01" /> <path d="M12 18h.01" /> <path d="M16 18h.01" />`, opt)
}

// CalendarFold renders the "calendar-fold" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-fold" }}
//
// Direct usage in Go:
//
//	lucide.CalendarFold()
//	lucide.CalendarFold(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarFold(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <path d="M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z" /> <path d="M3 10h18" /> <path d="M15 22v-4a2 2 0 0 1 2-2h4" />`, opt)
}

// CalendarHeart renders the "calendar-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-heart" }}
//
// Direct usage in Go:
//
//	lucide.CalendarHeart()
//	lucide.CalendarHeart(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.127 22H5a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v5.125" /> <path d="M14.62 18.8A2.25 2.25 0 1 1 18 15.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z" /> <path d="M16 2v4" /> <path d="M3 10h18" /> <path d="M8 2v4" />`, opt)
}

// CalendarMinus renders the "calendar-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-minus" }}
//
// Direct usage in Go:
//
//	lucide.CalendarMinus()
//	lucide.CalendarMinus(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 19h6" /> <path d="M16 2v4" /> <path d="M21 15V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5" /> <path d="M3 10h18" /> <path d="M8 2v4" />`, opt)
}

// CalendarMinus2 renders the "calendar-minus-2" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-minus-2" }}
//
// Direct usage in Go:
//
//	lucide.CalendarMinus2()
//	lucide.CalendarMinus2(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarMinus2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <rect width="18" height="18" x="3" y="4" rx="2" /> <path d="M3 10h18" /> <path d="M10 16h4" />`, opt)
}

// CalendarOff renders the "calendar-off" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-off" }}
//
// Direct usage in Go:
//
//	lucide.CalendarOff()
//	lucide.CalendarOff(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4.2 4.2A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18" /> <path d="M21 15.5V6a2 2 0 0 0-2-2H9.5" /> <path d="M16 2v4" /> <path d="M3 10h7" /> <path d="M21 10h-5.5" /> <path d="m2 2 20 20" />`, opt)
}

// CalendarPlus renders the "calendar-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-plus" }}
//
// Direct usage in Go:
//
//	lucide.CalendarPlus()
//	lucide.CalendarPlus(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 19h6" /> <path d="M16 2v4" /> <path d="M19 16v6" /> <path d="M21 12.598V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5" /> <path d="M3 10h18" /> <path d="M8 2v4" />`, opt)
}

// CalendarPlus2 renders the "calendar-plus-2" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-plus-2" }}
//
// Direct usage in Go:
//
//	lucide.CalendarPlus2()
//	lucide.CalendarPlus2(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarPlus2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <rect width="18" height="18" x="3" y="4" rx="2" /> <path d="M3 10h18" /> <path d="M10 16h4" /> <path d="M12 14v4" />`, opt)
}

// CalendarRange renders the "calendar-range" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-range" }}
//
// Direct usage in Go:
//
//	lucide.CalendarRange()
//	lucide.CalendarRange(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarRange(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="4" rx="2" /> <path d="M16 2v4" /> <path d="M3 10h18" /> <path d="M8 2v4" /> <path d="M17 14h-6" /> <path d="M13 18H7" /> <path d="M7 14h.01" /> <path d="M17 18h.01" />`, opt)
}

// CalendarSearch renders the "calendar-search" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-search" }}
//
// Direct usage in Go:
//
//	lucide.CalendarSearch()
//	lucide.CalendarSearch(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 2v4" /> <path d="M21 11.75V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.25" /> <path d="m22 22-1.875-1.875" /> <path d="M3 10h18" /> <path d="M8 2v4" /> <circle cx="18" cy="18" r="3" />`, opt)
}

// CalendarSync renders the "calendar-sync" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-sync" }}
//
// Direct usage in Go:
//
//	lucide.CalendarSync()
//	lucide.CalendarSync(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarSync(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 10v4h4" /> <path d="m11 14 1.535-1.605a5 5 0 0 1 8 1.5" /> <path d="M16 2v4" /> <path d="m21 18-1.535 1.605a5 5 0 0 1-8-1.5" /> <path d="M21 22v-4h-4" /> <path d="M21 8.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h4.3" /> <path d="M3 10h4" /> <path d="M8 2v4" />`, opt)
}

// CalendarX renders the "calendar-x" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-x" }}
//
// Direct usage in Go:
//
//	lucide.CalendarX()
//	lucide.CalendarX(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <rect width="18" height="18" x="3" y="4" rx="2" /> <path d="M3 10h18" /> <path d="m14 14-4 4" /> <path d="m10 14 4 4" />`, opt)
}

// CalendarX2 renders the "calendar-x-2" icon.
//
// Usage in templates:
//
//	{{ lucide "calendar-x-2" }}
//
// Direct usage in Go:
//
//	lucide.CalendarX2()
//	lucide.CalendarX2(lucide.Options{Size: 32, Class: "my-icon"})
func CalendarX2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M16 2v4" /> <path d="M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8" /> <path d="M3 10h18" /> <path d="m17 22 5-5" /> <path d="m17 17 5 5" />`, opt)
}

// Camera renders the "camera" icon.
//
// Usage in templates:
//
//	{{ lucide "camera" }}
//
// Direct usage in Go:
//
//	lucide.Camera()
//	lucide.Camera(lucide.Options{Size: 32, Class: "my-icon"})
func Camera(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.997 4a2 2 0 0 1 1.76 1.05l.486.9A2 2 0 0 0 18.003 7H20a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h1.997a2 2 0 0 0 1.759-1.048l.489-.904A2 2 0 0 1 10.004 4z" /> <circle cx="12" cy="13" r="3" />`, opt)
}

// CameraOff renders the "camera-off" icon.
//
// Usage in templates:
//
//	{{ lucide "camera-off" }}
//
// Direct usage in Go:
//
//	lucide.CameraOff()
//	lucide.CameraOff(lucide.Options{Size: 32, Class: "my-icon"})
func CameraOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14.564 14.558a3 3 0 1 1-4.122-4.121" /> <path d="m2 2 20 20" /> <path d="M20 20H4a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h1.997a2 2 0 0 0 .819-.175" /> <path d="M9.695 4.024A2 2 0 0 1 10.004 4h3.993a2 2 0 0 1 1.76 1.05l.486.9A2 2 0 0 0 18.003 7H20a2 2 0 0 1 2 2v7.344" />`, opt)
}

// Candy renders the "candy" icon.
//
// Usage in templates:
//
//	{{ lucide "candy" }}
//
// Direct usage in Go:
//
//	lucide.Candy()
//	lucide.Candy(lucide.Options{Size: 32, Class: "my-icon"})
func Candy(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 7v10.9" /> <path d="M14 6.1V17" /> <path d="M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4" /> <path d="M16.536 7.465a5 5 0 0 0-7.072 0l-2 2a5 5 0 0 0 0 7.07 5 5 0 0 0 7.072 0l2-2a5 5 0 0 0 0-7.07" /> <path d="M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4" />`, opt)
}

// CandyCane renders the "candy-cane" icon.
//
// Usage in templates:
//
//	{{ lucide "candy-cane" }}
//
// Direct usage in Go:
//
//	lucide.CandyCane()
//	lucide.CandyCane(lucide.Options{Size: 32, Class: "my-icon"})
func CandyCane(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5.7 21a2 2 0 0 1-3.5-2l8.6-14a6 6 0 0 1 10.4 6 2 2 0 1 1-3.464-2 2 2 0 1 0-3.464-2Z" /> <path d="M17.75 7 15 2.1" /> <path d="M10.9 4.8 13 9" /> <path d="m7.9 9.7 2 4.4" /> <path d="M4.9 14.7 7 18.9" />`, opt)
}

// CandyOff renders the "candy-off" icon.
//
// Usage in templates:
//
//	{{ lucide "candy-off" }}
//
// Direct usage in Go:
//
//	lucide.CandyOff()
//	lucide.CandyOff(lucide.Options{Size: 32, Class: "my-icon"})
func CandyOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10v7.9" /> <path d="M11.802 6.145a5 5 0 0 1 6.053 6.053" /> <path d="M14 6.1v2.243" /> <path d="m15.5 15.571-.964.964a5 5 0 0 1-7.071 0 5 5 0 0 1 0-7.07l.964-.965" /> <path d="M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4" /> <path d="m2 2 20 20" /> <path d="M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4" />`, opt)
}

// Cannabis renders the "cannabis" icon.
//
// Usage in templates:
//
//	{{ lucide "cannabis" }}
//
// Direct usage in Go:
//
//	lucide.Cannabis()
//	lucide.Cannabis(lucide.Options{Size: 32, Class: "my-icon"})
func Cannabis(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22v-4" /> <path d="M7 12c-1.5 0-4.5 1.5-5 3 3.5 1.5 6 1 6 1-1.5 1.5-2 3.5-2 5 2.5 0 4.5-1.5 6-3 1.5 1.5 3.5 3 6 3 0-1.5-.5-3.5-2-5 0 0 2.5.5 6-1-.5-1.5-3.5-3-5-3 1.5-1 4-4 4-6-2.5 0-5.5 1.5-7 3 0-2.5-.5-5-2-7-1.5 2-2 4.5-2 7-1.5-1.5-4.5-3-7-3 0 2 2.5 5 4 6" />`, opt)
}

// Captions renders the "captions" icon.
//
// Usage in templates:
//
//	{{ lucide "captions" }}
//
// Direct usage in Go:
//
//	lucide.Captions()
//	lucide.Captions(lucide.Options{Size: 32, Class: "my-icon"})
func Captions(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="14" x="3" y="5" rx="2" ry="2" /> <path d="M7 15h4M15 15h2M7 11h2M13 11h4" />`, opt)
}

// CaptionsOff renders the "captions-off" icon.
//
// Usage in templates:
//
//	{{ lucide "captions-off" }}
//
// Direct usage in Go:
//
//	lucide.CaptionsOff()
//	lucide.CaptionsOff(lucide.Options{Size: 32, Class: "my-icon"})
func CaptionsOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.5 5H19a2 2 0 0 1 2 2v8.5" /> <path d="M17 11h-.5" /> <path d="M19 19H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2" /> <path d="m2 2 20 20" /> <path d="M7 11h4" /> <path d="M7 15h2.5" />`, opt)
}

// Car renders the "car" icon.
//
// Usage in templates:
//
//	{{ lucide "car" }}
//
// Direct usage in Go:
//
//	lucide.Car()
//	lucide.Car(lucide.Options{Size: 32, Class: "my-icon"})
func Car(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.4 2.9A3.7 3.7 0 0 0 2 12v4c0 .6.4 1 1 1h2" /> <circle cx="7" cy="17" r="2" /> <path d="M9 17h6" /> <circle cx="17" cy="17" r="2" />`, opt)
}

// CarFront renders the "car-front" icon.
//
// Usage in templates:
//
//	{{ lucide "car-front" }}
//
// Direct usage in Go:
//
//	lucide.CarFront()
//	lucide.CarFront(lucide.Options{Size: 32, Class: "my-icon"})
func CarFront(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8" /> <path d="M7 14h.01" /> <path d="M17 14h.01" /> <rect width="18" height="8" x="3" y="10" rx="2" /> <path d="M5 18v2" /> <path d="M19 18v2" />`, opt)
}

// CarTaxiFront renders the "car-taxi-front" icon.
//
// Usage in templates:
//
//	{{ lucide "car-taxi-front" }}
//
// Direct usage in Go:
//
//	lucide.CarTaxiFront()
//	lucide.CarTaxiFront(lucide.Options{Size: 32, Class: "my-icon"})
func CarTaxiFront(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2h4" /> <path d="m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8" /> <path d="M7 14h.01" /> <path d="M17 14h.01" /> <rect width="18" height="8" x="3" y="10" rx="2" /> <path d="M5 18v2" /> <path d="M19 18v2" />`, opt)
}

// Caravan renders the "caravan" icon.
//
// Usage in templates:
//
//	{{ lucide "caravan" }}
//
// Direct usage in Go:
//
//	lucide.Caravan()
//	lucide.Caravan(lucide.Options{Size: 32, Class: "my-icon"})
func Caravan(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 19V9a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v8a2 2 0 0 0 2 2h2" /> <path d="M2 9h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2" /> <path d="M22 17v1a1 1 0 0 1-1 1H10v-9a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v9" /> <circle cx="8" cy="19" r="2" />`, opt)
}

// CardSim renders the "card-sim" icon.
//
// Usage in templates:
//
//	{{ lucide "card-sim" }}
//
// Direct usage in Go:
//
//	lucide.CardSim()
//	lucide.CardSim(lucide.Options{Size: 32, Class: "my-icon"})
func CardSim(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 14v4" /> <path d="M14.172 2a2 2 0 0 1 1.414.586l3.828 3.828A2 2 0 0 1 20 7.828V20a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2z" /> <path d="M8 14h8" /> <rect x="8" y="10" width="8" height="8" rx="1" />`, opt)
}

// Carrot renders the "carrot" icon.
//
// Usage in templates:
//
//	{{ lucide "carrot" }}
//
// Direct usage in Go:
//
//	lucide.Carrot()
//	lucide.Carrot(lucide.Options{Size: 32, Class: "my-icon"})
func Carrot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46" /> <path d="M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z" /> <path d="M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z" />`, opt)
}

// CaseLower renders the "case-lower" icon.
//
// Usage in templates:
//
//	{{ lucide "case-lower" }}
//
// Direct usage in Go:
//
//	lucide.CaseLower()
//	lucide.CaseLower(lucide.Options{Size: 32, Class: "my-icon"})
func CaseLower(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 9v7" /> <path d="M14 6v10" /> <circle cx="17.5" cy="12.5" r="3.5" /> <circle cx="6.5" cy="12.5" r="3.5" />`, opt)
}

// CaseSensitive renders the "case-sensitive" icon.
//
// Usage in templates:
//
//	{{ lucide "case-sensitive" }}
//
// Direct usage in Go:
//
//	lucide.CaseSensitive()
//	lucide.CaseSensitive(lucide.Options{Size: 32, Class: "my-icon"})
func CaseSensitive(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" /> <path d="M22 9v7" /> <path d="M3.304 13h6.392" /> <circle cx="18.5" cy="12.5" r="3.5" />`, opt)
}

// CaseUpper renders the "case-upper" icon.
//
// Usage in templates:
//
//	{{ lucide "case-upper" }}
//
// Direct usage in Go:
//
//	lucide.CaseUpper()
//	lucide.CaseUpper(lucide.Options{Size: 32, Class: "my-icon"})
func CaseUpper(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 11h4.5a1 1 0 0 1 0 5h-4a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h3a1 1 0 0 1 0 5" /> <path d="m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" /> <path d="M3.304 13h6.392" />`, opt)
}

// CassetteTape renders the "cassette-tape" icon.
//
// Usage in templates:
//
//	{{ lucide "cassette-tape" }}
//
// Direct usage in Go:
//
//	lucide.CassetteTape()
//	lucide.CassetteTape(lucide.Options{Size: 32, Class: "my-icon"})
func CassetteTape(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="16" x="2" y="4" rx="2" /> <circle cx="8" cy="10" r="2" /> <path d="M8 12h8" /> <circle cx="16" cy="10" r="2" /> <path d="m6 20 .7-2.9A1.4 1.4 0 0 1 8.1 16h7.8a1.4 1.4 0 0 1 1.4 1l.7 3" />`, opt)
}

// Cast renders the "cast" icon.
//
// Usage in templates:
//
//	{{ lucide "cast" }}
//
// Direct usage in Go:
//
//	lucide.Cast()
//	lucide.Cast(lucide.Options{Size: 32, Class: "my-icon"})
func Cast(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6" /> <path d="M2 12a9 9 0 0 1 8 8" /> <path d="M2 16a5 5 0 0 1 4 4" /> <line x1="2" x2="2.01" y1="20" y2="20" />`, opt)
}

// Castle renders the "castle" icon.
//
// Usage in templates:
//
//	{{ lucide "castle" }}
//
// Direct usage in Go:
//
//	lucide.Castle()
//	lucide.Castle(lucide.Options{Size: 32, Class: "my-icon"})
func Castle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 5V3" /> <path d="M14 5V3" /> <path d="M15 21v-3a3 3 0 0 0-6 0v3" /> <path d="M18 3v8" /> <path d="M18 5H6" /> <path d="M22 11H2" /> <path d="M22 9v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9" /> <path d="M6 3v8" />`, opt)
}

// Cat renders the "cat" icon.
//
// Usage in templates:
//
//	{{ lucide "cat" }}
//
// Direct usage in Go:
//
//	lucide.Cat()
//	lucide.Cat(lucide.Options{Size: 32, Class: "my-icon"})
func Cat(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z" /> <path d="M8 14v.5" /> <path d="M16 14v.5" /> <path d="M11.25 16.25h1.5L12 17l-.75-.75Z" />`, opt)
}

// Cctv renders the "cctv" icon.
//
// Usage in templates:
//
//	{{ lucide "cctv" }}
//
// Direct usage in Go:
//
//	lucide.Cctv()
//	lucide.Cctv(lucide.Options{Size: 32, Class: "my-icon"})
func Cctv(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16.75 12h3.632a1 1 0 0 1 .894 1.447l-2.034 4.069a1 1 0 0 1-1.708.134l-2.124-2.97" /> <path d="M17.106 9.053a1 1 0 0 1 .447 1.341l-3.106 6.211a1 1 0 0 1-1.342.447L3.61 12.3a2.92 2.92 0 0 1-1.3-3.91L3.69 5.6a2.92 2.92 0 0 1 3.92-1.3z" /> <path d="M2 19h3.76a2 2 0 0 0 1.8-1.1L9 15" /> <path d="M2 21v-4" /> <path d="M7 9h.01" />`, opt)
}

// ChartArea renders the "chart-area" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-area" }}
//
// Direct usage in Go:
//
//	lucide.ChartArea()
//	lucide.ChartArea(lucide.Options{Size: 32, Class: "my-icon"})
func ChartArea(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M7 11.207a.5.5 0 0 1 .146-.353l2-2a.5.5 0 0 1 .708 0l3.292 3.292a.5.5 0 0 0 .708 0l4.292-4.292a.5.5 0 0 1 .854.353V16a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1z" />`, opt)
}

// ChartBar renders the "chart-bar" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-bar" }}
//
// Direct usage in Go:
//
//	lucide.ChartBar()
//	lucide.ChartBar(lucide.Options{Size: 32, Class: "my-icon"})
func ChartBar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M7 16h8" /> <path d="M7 11h12" /> <path d="M7 6h3" />`, opt)
}

// ChartBarBig renders the "chart-bar-big" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-bar-big" }}
//
// Direct usage in Go:
//
//	lucide.ChartBarBig()
//	lucide.ChartBarBig(lucide.Options{Size: 32, Class: "my-icon"})
func ChartBarBig(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <rect x="7" y="13" width="9" height="4" rx="1" /> <rect x="7" y="5" width="12" height="4" rx="1" />`, opt)
}

// ChartBarDecreasing renders the "chart-bar-decreasing" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-bar-decreasing" }}
//
// Direct usage in Go:
//
//	lucide.ChartBarDecreasing()
//	lucide.ChartBarDecreasing(lucide.Options{Size: 32, Class: "my-icon"})
func ChartBarDecreasing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M7 11h8" /> <path d="M7 16h3" /> <path d="M7 6h12" />`, opt)
}

// ChartBarIncreasing renders the "chart-bar-increasing" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-bar-increasing" }}
//
// Direct usage in Go:
//
//	lucide.ChartBarIncreasing()
//	lucide.ChartBarIncreasing(lucide.Options{Size: 32, Class: "my-icon"})
func ChartBarIncreasing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M7 11h8" /> <path d="M7 16h12" /> <path d="M7 6h3" />`, opt)
}

// ChartBarStacked renders the "chart-bar-stacked" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-bar-stacked" }}
//
// Direct usage in Go:
//
//	lucide.ChartBarStacked()
//	lucide.ChartBarStacked(lucide.Options{Size: 32, Class: "my-icon"})
func ChartBarStacked(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 13v4" /> <path d="M15 5v4" /> <path d="M3 3v16a2 2 0 0 0 2 2h16" /> <rect x="7" y="13" width="9" height="4" rx="1" /> <rect x="7" y="5" width="12" height="4" rx="1" />`, opt)
}

// ChartCandlestick renders the "chart-candlestick" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-candlestick" }}
//
// Direct usage in Go:
//
//	lucide.ChartCandlestick()
//	lucide.ChartCandlestick(lucide.Options{Size: 32, Class: "my-icon"})
func ChartCandlestick(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 5v4" /> <rect width="4" height="6" x="7" y="9" rx="1" /> <path d="M9 15v2" /> <path d="M17 3v2" /> <rect width="4" height="8" x="15" y="5" rx="1" /> <path d="M17 13v3" /> <path d="M3 3v16a2 2 0 0 0 2 2h16" />`, opt)
}

// ChartColumn renders the "chart-column" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-column" }}
//
// Direct usage in Go:
//
//	lucide.ChartColumn()
//	lucide.ChartColumn(lucide.Options{Size: 32, Class: "my-icon"})
func ChartColumn(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M18 17V9" /> <path d="M13 17V5" /> <path d="M8 17v-3" />`, opt)
}

// ChartColumnBig renders the "chart-column-big" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-column-big" }}
//
// Direct usage in Go:
//
//	lucide.ChartColumnBig()
//	lucide.ChartColumnBig(lucide.Options{Size: 32, Class: "my-icon"})
func ChartColumnBig(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <rect x="15" y="5" width="4" height="12" rx="1" /> <rect x="7" y="8" width="4" height="9" rx="1" />`, opt)
}

// ChartColumnDecreasing renders the "chart-column-decreasing" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-column-decreasing" }}
//
// Direct usage in Go:
//
//	lucide.ChartColumnDecreasing()
//	lucide.ChartColumnDecreasing(lucide.Options{Size: 32, Class: "my-icon"})
func ChartColumnDecreasing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 17V9" /> <path d="M18 17v-3" /> <path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M8 17V5" />`, opt)
}

// ChartColumnIncreasing renders the "chart-column-increasing" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-column-increasing" }}
//
// Direct usage in Go:
//
//	lucide.ChartColumnIncreasing()
//	lucide.ChartColumnIncreasing(lucide.Options{Size: 32, Class: "my-icon"})
func ChartColumnIncreasing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 17V9" /> <path d="M18 17V5" /> <path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M8 17v-3" />`, opt)
}

// ChartColumnStacked renders the "chart-column-stacked" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-column-stacked" }}
//
// Direct usage in Go:
//
//	lucide.ChartColumnStacked()
//	lucide.ChartColumnStacked(lucide.Options{Size: 32, Class: "my-icon"})
func ChartColumnStacked(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 13H7" /> <path d="M19 9h-4" /> <path d="M3 3v16a2 2 0 0 0 2 2h16" /> <rect x="15" y="5" width="4" height="12" rx="1" /> <rect x="7" y="8" width="4" height="9" rx="1" />`, opt)
}

// ChartGantt renders the "chart-gantt" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-gantt" }}
//
// Direct usage in Go:
//
//	lucide.ChartGantt()
//	lucide.ChartGantt(lucide.Options{Size: 32, Class: "my-icon"})
func ChartGantt(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 6h8" /> <path d="M12 16h6" /> <path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M8 11h7" />`, opt)
}

// ChartLine renders the "chart-line" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-line" }}
//
// Direct usage in Go:
//
//	lucide.ChartLine()
//	lucide.ChartLine(lucide.Options{Size: 32, Class: "my-icon"})
func ChartLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="m19 9-5 5-4-4-3 3" />`, opt)
}

// ChartNetwork renders the "chart-network" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-network" }}
//
// Direct usage in Go:
//
//	lucide.ChartNetwork()
//	lucide.ChartNetwork(lucide.Options{Size: 32, Class: "my-icon"})
func ChartNetwork(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m13.11 7.664 1.78 2.672" /> <path d="m14.162 12.788-3.324 1.424" /> <path d="m20 4-6.06 1.515" /> <path d="M3 3v16a2 2 0 0 0 2 2h16" /> <circle cx="12" cy="6" r="2" /> <circle cx="16" cy="12" r="2" /> <circle cx="9" cy="15" r="2" />`, opt)
}

// ChartNoAxesColumn renders the "chart-no-axes-column" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-no-axes-column" }}
//
// Direct usage in Go:
//
//	lucide.ChartNoAxesColumn()
//	lucide.ChartNoAxesColumn(lucide.Options{Size: 32, Class: "my-icon"})
func ChartNoAxesColumn(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 21v-6" /> <path d="M12 21V3" /> <path d="M19 21V9" />`, opt)
}

// ChartNoAxesColumnDecreasing renders the "chart-no-axes-column-decreasing" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-no-axes-column-decreasing" }}
//
// Direct usage in Go:
//
//	lucide.ChartNoAxesColumnDecreasing()
//	lucide.ChartNoAxesColumnDecreasing(lucide.Options{Size: 32, Class: "my-icon"})
func ChartNoAxesColumnDecreasing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 21V3" /> <path d="M12 21V9" /> <path d="M19 21v-6" />`, opt)
}

// ChartNoAxesColumnIncreasing renders the "chart-no-axes-column-increasing" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-no-axes-column-increasing" }}
//
// Direct usage in Go:
//
//	lucide.ChartNoAxesColumnIncreasing()
//	lucide.ChartNoAxesColumnIncreasing(lucide.Options{Size: 32, Class: "my-icon"})
func ChartNoAxesColumnIncreasing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 21v-6" /> <path d="M12 21V9" /> <path d="M19 21V3" />`, opt)
}

// ChartNoAxesCombined renders the "chart-no-axes-combined" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-no-axes-combined" }}
//
// Direct usage in Go:
//
//	lucide.ChartNoAxesCombined()
//	lucide.ChartNoAxesCombined(lucide.Options{Size: 32, Class: "my-icon"})
func ChartNoAxesCombined(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 16v5" /> <path d="M16 14v7" /> <path d="M20 10v11" /> <path d="m22 3-8.646 8.646a.5.5 0 0 1-.708 0L9.354 8.354a.5.5 0 0 0-.707 0L2 15" /> <path d="M4 18v3" /> <path d="M8 14v7" />`, opt)
}

// ChartNoAxesGantt renders the "chart-no-axes-gantt" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-no-axes-gantt" }}
//
// Direct usage in Go:
//
//	lucide.ChartNoAxesGantt()
//	lucide.ChartNoAxesGantt(lucide.Options{Size: 32, Class: "my-icon"})
func ChartNoAxesGantt(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 5h12" /> <path d="M4 12h10" /> <path d="M12 19h8" />`, opt)
}

// ChartPie renders the "chart-pie" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-pie" }}
//
// Direct usage in Go:
//
//	lucide.ChartPie()
//	lucide.ChartPie(lucide.Options{Size: 32, Class: "my-icon"})
func ChartPie(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z" /> <path d="M21.21 15.89A10 10 0 1 1 8 2.83" />`, opt)
}

// ChartScatter renders the "chart-scatter" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-scatter" }}
//
// Direct usage in Go:
//
//	lucide.ChartScatter()
//	lucide.ChartScatter(lucide.Options{Size: 32, Class: "my-icon"})
func ChartScatter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="7.5" cy="7.5" r=".5" fill="currentColor" /> <circle cx="18.5" cy="5.5" r=".5" fill="currentColor" /> <circle cx="11.5" cy="11.5" r=".5" fill="currentColor" /> <circle cx="7.5" cy="16.5" r=".5" fill="currentColor" /> <circle cx="17.5" cy="14.5" r=".5" fill="currentColor" /> <path d="M3 3v16a2 2 0 0 0 2 2h16" />`, opt)
}

// ChartSpline renders the "chart-spline" icon.
//
// Usage in templates:
//
//	{{ lucide "chart-spline" }}
//
// Direct usage in Go:
//
//	lucide.ChartSpline()
//	lucide.ChartSpline(lucide.Options{Size: 32, Class: "my-icon"})
func ChartSpline(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3v16a2 2 0 0 0 2 2h16" /> <path d="M7 16c.5-2 1.5-7 4-7 2 0 2 3 4 3 2.5 0 4.5-5 5-7" />`, opt)
}

// Check renders the "check" icon.
//
// Usage in templates:
//
//	{{ lucide "check" }}
//
// Direct usage in Go:
//
//	lucide.Check()
//	lucide.Check(lucide.Options{Size: 32, Class: "my-icon"})
func Check(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 6 9 17l-5-5" />`, opt)
}

// CheckCheck renders the "check-check" icon.
//
// Usage in templates:
//
//	{{ lucide "check-check" }}
//
// Direct usage in Go:
//
//	lucide.CheckCheck()
//	lucide.CheckCheck(lucide.Options{Size: 32, Class: "my-icon"})
func CheckCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 6 7 17l-5-5" /> <path d="m22 10-7.5 7.5L13 16" />`, opt)
}

// CheckLine renders the "check-line" icon.
//
// Usage in templates:
//
//	{{ lucide "check-line" }}
//
// Direct usage in Go:
//
//	lucide.CheckLine()
//	lucide.CheckLine(lucide.Options{Size: 32, Class: "my-icon"})
func CheckLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 4L9 15" /> <path d="M21 19L3 19" /> <path d="M9 15L4 10" />`, opt)
}

// ChefHat renders the "chef-hat" icon.
//
// Usage in templates:
//
//	{{ lucide "chef-hat" }}
//
// Direct usage in Go:
//
//	lucide.ChefHat()
//	lucide.ChefHat(lucide.Options{Size: 32, Class: "my-icon"})
func ChefHat(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 21a1 1 0 0 0 1-1v-5.35c0-.457.316-.844.727-1.041a4 4 0 0 0-2.134-7.589 5 5 0 0 0-9.186 0 4 4 0 0 0-2.134 7.588c.411.198.727.585.727 1.041V20a1 1 0 0 0 1 1Z" /> <path d="M6 17h12" />`, opt)
}

// Cherry renders the "cherry" icon.
//
// Usage in templates:
//
//	{{ lucide "cherry" }}
//
// Direct usage in Go:
//
//	lucide.Cherry()
//	lucide.Cherry(lucide.Options{Size: 32, Class: "my-icon"})
func Cherry(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z" /> <path d="M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z" /> <path d="M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12" /> <path d="M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z" />`, opt)
}

// ChevronDown renders the "chevron-down" icon.
//
// Usage in templates:
//
//	{{ lucide "chevron-down" }}
//
// Direct usage in Go:
//
//	lucide.ChevronDown()
//	lucide.ChevronDown(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m6 9 6 6 6-6" />`, opt)
}

// ChevronFirst renders the "chevron-first" icon.
//
// Usage in templates:
//
//	{{ lucide "chevron-first" }}
//
// Direct usage in Go:
//
//	lucide.ChevronFirst()
//	lucide.ChevronFirst(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronFirst(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 18-6-6 6-6" /> <path d="M7 6v12" />`, opt)
}

// ChevronLast renders the "chevron-last" icon.
//
// Usage in templates:
//
//	{{ lucide "chevron-last" }}
//
// Direct usage in Go:
//
//	lucide.ChevronLast()
//	lucide.ChevronLast(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronLast(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 18 6-6-6-6" /> <path d="M17 6v12" />`, opt)
}

// ChevronLeft renders the "chevron-left" icon.
//
// Usage in templates:
//
//	{{ lucide "chevron-left" }}
//
// Direct usage in Go:
//
//	lucide.ChevronLeft()
//	lucide.ChevronLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 18-6-6 6-6" />`, opt)
}

// ChevronRight renders the "chevron-right" icon.
//
// Usage in templates:
//
//	{{ lucide "chevron-right" }}
//
// Direct usage in Go:
//
//	lucide.ChevronRight()
//	lucide.ChevronRight(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m9 18 6-6-6-6" />`, opt)
}

// ChevronUp renders the "chevron-up" icon.
//
// Usage in templates:
//
//	{{ lucide "chevron-up" }}
//
// Direct usage in Go:
//
//	lucide.ChevronUp()
//	lucide.ChevronUp(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18 15-6-6-6 6" />`, opt)
}

// ChevronsDown renders the "chevrons-down" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-down" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsDown()
//	lucide.ChevronsDown(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 6 5 5 5-5" /> <path d="m7 13 5 5 5-5" />`, opt)
}

// ChevronsDownUp renders the "chevrons-down-up" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-down-up" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsDownUp()
//	lucide.ChevronsDownUp(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsDownUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 20 5-5 5 5" /> <path d="m7 4 5 5 5-5" />`, opt)
}

// ChevronsLeft renders the "chevrons-left" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-left" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsLeft()
//	lucide.ChevronsLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11 17-5-5 5-5" /> <path d="m18 17-5-5 5-5" />`, opt)
}

// ChevronsLeftRight renders the "chevrons-left-right" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-left-right" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsLeftRight()
//	lucide.ChevronsLeftRight(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsLeftRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m9 7-5 5 5 5" /> <path d="m15 7 5 5-5 5" />`, opt)
}

// ChevronsLeftRightEllipsis renders the "chevrons-left-right-ellipsis" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-left-right-ellipsis" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsLeftRightEllipsis()
//	lucide.ChevronsLeftRightEllipsis(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsLeftRightEllipsis(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 12h.01" /> <path d="M16 12h.01" /> <path d="m17 7 5 5-5 5" /> <path d="m7 7-5 5 5 5" /> <path d="M8 12h.01" />`, opt)
}

// ChevronsRight renders the "chevrons-right" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-right" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsRight()
//	lucide.ChevronsRight(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m6 17 5-5-5-5" /> <path d="m13 17 5-5-5-5" />`, opt)
}

// ChevronsRightLeft renders the "chevrons-right-left" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-right-left" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsRightLeft()
//	lucide.ChevronsRightLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsRightLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m20 17-5-5 5-5" /> <path d="m4 17 5-5-5-5" />`, opt)
}

// ChevronsUp renders the "chevrons-up" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-up" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsUp()
//	lucide.ChevronsUp(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 11-5-5-5 5" /> <path d="m17 18-5-5-5 5" />`, opt)
}

// ChevronsUpDown renders the "chevrons-up-down" icon.
//
// Usage in templates:
//
//	{{ lucide "chevrons-up-down" }}
//
// Direct usage in Go:
//
//	lucide.ChevronsUpDown()
//	lucide.ChevronsUpDown(lucide.Options{Size: 32, Class: "my-icon"})
func ChevronsUpDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 15 5 5 5-5" /> <path d="m7 9 5-5 5 5" />`, opt)
}

// Chromium renders the "chromium" icon.
//
// Usage in templates:
//
//	{{ lucide "chromium" }}
//
// Direct usage in Go:
//
//	lucide.Chromium()
//	lucide.Chromium(lucide.Options{Size: 32, Class: "my-icon"})
func Chromium(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.88 21.94 15.46 14" /> <path d="M21.17 8H12" /> <path d="M3.95 6.06 8.54 14" /> <circle cx="12" cy="12" r="10" /> <circle cx="12" cy="12" r="4" />`, opt)
}

// Church renders the "church" icon.
//
// Usage in templates:
//
//	{{ lucide "church" }}
//
// Direct usage in Go:
//
//	lucide.Church()
//	lucide.Church(lucide.Options{Size: 32, Class: "my-icon"})
func Church(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 9h4" /> <path d="M12 7v5" /> <path d="M14 21v-3a2 2 0 0 0-4 0v3" /> <path d="m18 9 3.52 2.147a1 1 0 0 1 .48.854V19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-6.999a1 1 0 0 1 .48-.854L6 9" /> <path d="M6 21V7a1 1 0 0 1 .376-.782l5-3.999a1 1 0 0 1 1.249.001l5 4A1 1 0 0 1 18 7v14" />`, opt)
}

// Cigarette renders the "cigarette" icon.
//
// Usage in templates:
//
//	{{ lucide "cigarette" }}
//
// Direct usage in Go:
//
//	lucide.Cigarette()
//	lucide.Cigarette(lucide.Options{Size: 32, Class: "my-icon"})
func Cigarette(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14" /> <path d="M18 8c0-2.5-2-2.5-2-5" /> <path d="M21 16a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1" /> <path d="M22 8c0-2.5-2-2.5-2-5" /> <path d="M7 12v4" />`, opt)
}

// CigaretteOff renders the "cigarette-off" icon.
//
// Usage in templates:
//
//	{{ lucide "cigarette-off" }}
//
// Direct usage in Go:
//
//	lucide.CigaretteOff()
//	lucide.CigaretteOff(lucide.Options{Size: 32, Class: "my-icon"})
func CigaretteOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h13" /> <path d="M18 8c0-2.5-2-2.5-2-5" /> <path d="m2 2 20 20" /> <path d="M21 12a1 1 0 0 1 1 1v2a1 1 0 0 1-.5.866" /> <path d="M22 8c0-2.5-2-2.5-2-5" /> <path d="M7 12v4" />`, opt)
}

// Circle renders the "circle" icon.
//
// Usage in templates:
//
//	{{ lucide "circle" }}
//
// Direct usage in Go:
//
//	lucide.Circle()
//	lucide.Circle(lucide.Options{Size: 32, Class: "my-icon"})
func Circle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" />`, opt)
}

// CircleAlert renders the "circle-alert" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-alert" }}
//
// Direct usage in Go:
//
//	lucide.CircleAlert()
//	lucide.CircleAlert(lucide.Options{Size: 32, Class: "my-icon"})
func CircleAlert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <line x1="12" x2="12" y1="8" y2="12" /> <line x1="12" x2="12.01" y1="16" y2="16" />`, opt)
}

// CircleArrowDown renders the "circle-arrow-down" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-arrow-down" }}
//
// Direct usage in Go:
//
//	lucide.CircleArrowDown()
//	lucide.CircleArrowDown(lucide.Options{Size: 32, Class: "my-icon"})
func CircleArrowDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M12 8v8" /> <path d="m8 12 4 4 4-4" />`, opt)
}

// CircleArrowLeft renders the "circle-arrow-left" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-arrow-left" }}
//
// Direct usage in Go:
//
//	lucide.CircleArrowLeft()
//	lucide.CircleArrowLeft(lucide.Options{Size: 32, Class: "my-icon"})
func CircleArrowLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m12 8-4 4 4 4" /> <path d="M16 12H8" />`, opt)
}

// CircleArrowOutDownLeft renders the "circle-arrow-out-down-left" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-arrow-out-down-left" }}
//
// Direct usage in Go:
//
//	lucide.CircleArrowOutDownLeft()
//	lucide.CircleArrowOutDownLeft(lucide.Options{Size: 32, Class: "my-icon"})
func CircleArrowOutDownLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 12a10 10 0 1 1 10 10" /> <path d="m2 22 10-10" /> <path d="M8 22H2v-6" />`, opt)
}

// CircleArrowOutDownRight renders the "circle-arrow-out-down-right" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-arrow-out-down-right" }}
//
// Direct usage in Go:
//
//	lucide.CircleArrowOutDownRight()
//	lucide.CircleArrowOutDownRight(lucide.Options{Size: 32, Class: "my-icon"})
func CircleArrowOutDownRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22a10 10 0 1 1 10-10" /> <path d="M22 22 12 12" /> <path d="M22 16v6h-6" />`, opt)
}

// CircleArrowOutUpLeft renders the "circle-arrow-out-up-left" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-arrow-out-up-left" }}
//
// Direct usage in Go:
//
//	lucide.CircleArrowOutUpLeft()
//	lucide.CircleArrowOutUpLeft(lucide.Options{Size: 32, Class: "my-icon"})
func CircleArrowOutUpLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 8V2h6" /> <path d="m2 2 10 10" /> <path d="M12 2A10 10 0 1 1 2 12" />`, opt)
}

// CircleArrowOutUpRight renders the "circle-arrow-out-up-right" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-arrow-out-up-right" }}
//
// Direct usage in Go:
//
//	lucide.CircleArrowOutUpRight()
//	lucide.CircleArrowOutUpRight(lucide.Options{Size: 32, Class: "my-icon"})
func CircleArrowOutUpRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 12A10 10 0 1 1 12 2" /> <path d="M22 2 12 12" /> <path d="M16 2h6v6" />`, opt)
}

// CircleArrowRight renders the "circle-arrow-right" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-arrow-right" }}
//
// Direct usage in Go:
//
//	lucide.CircleArrowRight()
//	lucide.CircleArrowRight(lucide.Options{Size: 32, Class: "my-icon"})
func CircleArrowRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m12 16 4-4-4-4" /> <path d="M8 12h8" />`, opt)
}

// CircleArrowUp renders the "circle-arrow-up" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-arrow-up" }}
//
// Direct usage in Go:
//
//	lucide.CircleArrowUp()
//	lucide.CircleArrowUp(lucide.Options{Size: 32, Class: "my-icon"})
func CircleArrowUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m16 12-4-4-4 4" /> <path d="M12 16V8" />`, opt)
}

// CircleCheck renders the "circle-check" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-check" }}
//
// Direct usage in Go:
//
//	lucide.CircleCheck()
//	lucide.CircleCheck(lucide.Options{Size: 32, Class: "my-icon"})
func CircleCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m9 12 2 2 4-4" />`, opt)
}

// CircleCheckBig renders the "circle-check-big" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-check-big" }}
//
// Direct usage in Go:
//
//	lucide.CircleCheckBig()
//	lucide.CircleCheckBig(lucide.Options{Size: 32, Class: "my-icon"})
func CircleCheckBig(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.801 10A10 10 0 1 1 17 3.335" /> <path d="m9 11 3 3L22 4" />`, opt)
}

// CircleChevronDown renders the "circle-chevron-down" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-chevron-down" }}
//
// Direct usage in Go:
//
//	lucide.CircleChevronDown()
//	lucide.CircleChevronDown(lucide.Options{Size: 32, Class: "my-icon"})
func CircleChevronDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m16 10-4 4-4-4" />`, opt)
}

// CircleChevronLeft renders the "circle-chevron-left" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-chevron-left" }}
//
// Direct usage in Go:
//
//	lucide.CircleChevronLeft()
//	lucide.CircleChevronLeft(lucide.Options{Size: 32, Class: "my-icon"})
func CircleChevronLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m14 16-4-4 4-4" />`, opt)
}

// CircleChevronRight renders the "circle-chevron-right" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-chevron-right" }}
//
// Direct usage in Go:
//
//	lucide.CircleChevronRight()
//	lucide.CircleChevronRight(lucide.Options{Size: 32, Class: "my-icon"})
func CircleChevronRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m10 8 4 4-4 4" />`, opt)
}

// CircleChevronUp renders the "circle-chevron-up" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-chevron-up" }}
//
// Direct usage in Go:
//
//	lucide.CircleChevronUp()
//	lucide.CircleChevronUp(lucide.Options{Size: 32, Class: "my-icon"})
func CircleChevronUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m8 14 4-4 4 4" />`, opt)
}

// CircleDashed renders the "circle-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-dashed" }}
//
// Direct usage in Go:
//
//	lucide.CircleDashed()
//	lucide.CircleDashed(lucide.Options{Size: 32, Class: "my-icon"})
func CircleDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.1 2.182a10 10 0 0 1 3.8 0" /> <path d="M13.9 21.818a10 10 0 0 1-3.8 0" /> <path d="M17.609 3.721a10 10 0 0 1 2.69 2.7" /> <path d="M2.182 13.9a10 10 0 0 1 0-3.8" /> <path d="M20.279 17.609a10 10 0 0 1-2.7 2.69" /> <path d="M21.818 10.1a10 10 0 0 1 0 3.8" /> <path d="M3.721 6.391a10 10 0 0 1 2.7-2.69" /> <path d="M6.391 20.279a10 10 0 0 1-2.69-2.7" />`, opt)
}

// CircleDivide renders the "circle-divide" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-divide" }}
//
// Direct usage in Go:
//
//	lucide.CircleDivide()
//	lucide.CircleDivide(lucide.Options{Size: 32, Class: "my-icon"})
func CircleDivide(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="8" x2="16" y1="12" y2="12" /> <line x1="12" x2="12" y1="16" y2="16" /> <line x1="12" x2="12" y1="8" y2="8" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// CircleDollarSign renders the "circle-dollar-sign" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-dollar-sign" }}
//
// Direct usage in Go:
//
//	lucide.CircleDollarSign()
//	lucide.CircleDollarSign(lucide.Options{Size: 32, Class: "my-icon"})
func CircleDollarSign(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8" /> <path d="M12 18V6" />`, opt)
}

// CircleDot renders the "circle-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-dot" }}
//
// Direct usage in Go:
//
//	lucide.CircleDot()
//	lucide.CircleDot(lucide.Options{Size: 32, Class: "my-icon"})
func CircleDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <circle cx="12" cy="12" r="1" />`, opt)
}

// CircleDotDashed renders the "circle-dot-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-dot-dashed" }}
//
// Direct usage in Go:
//
//	lucide.CircleDotDashed()
//	lucide.CircleDotDashed(lucide.Options{Size: 32, Class: "my-icon"})
func CircleDotDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.1 2.18a9.93 9.93 0 0 1 3.8 0" /> <path d="M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7" /> <path d="M21.82 10.1a9.93 9.93 0 0 1 0 3.8" /> <path d="M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69" /> <path d="M13.9 21.82a9.94 9.94 0 0 1-3.8 0" /> <path d="M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7" /> <path d="M2.18 13.9a9.93 9.93 0 0 1 0-3.8" /> <path d="M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69" /> <circle cx="12" cy="12" r="1" />`, opt)
}

// CircleEllipsis renders the "circle-ellipsis" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-ellipsis" }}
//
// Direct usage in Go:
//
//	lucide.CircleEllipsis()
//	lucide.CircleEllipsis(lucide.Options{Size: 32, Class: "my-icon"})
func CircleEllipsis(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M17 12h.01" /> <path d="M12 12h.01" /> <path d="M7 12h.01" />`, opt)
}

// CircleEqual renders the "circle-equal" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-equal" }}
//
// Direct usage in Go:
//
//	lucide.CircleEqual()
//	lucide.CircleEqual(lucide.Options{Size: 32, Class: "my-icon"})
func CircleEqual(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 10h10" /> <path d="M7 14h10" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// CircleFadingArrowUp renders the "circle-fading-arrow-up" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-fading-arrow-up" }}
//
// Direct usage in Go:
//
//	lucide.CircleFadingArrowUp()
//	lucide.CircleFadingArrowUp(lucide.Options{Size: 32, Class: "my-icon"})
func CircleFadingArrowUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2a10 10 0 0 1 7.38 16.75" /> <path d="m16 12-4-4-4 4" /> <path d="M12 16V8" /> <path d="M2.5 8.875a10 10 0 0 0-.5 3" /> <path d="M2.83 16a10 10 0 0 0 2.43 3.4" /> <path d="M4.636 5.235a10 10 0 0 1 .891-.857" /> <path d="M8.644 21.42a10 10 0 0 0 7.631-.38" />`, opt)
}

// CircleFadingPlus renders the "circle-fading-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-fading-plus" }}
//
// Direct usage in Go:
//
//	lucide.CircleFadingPlus()
//	lucide.CircleFadingPlus(lucide.Options{Size: 32, Class: "my-icon"})
func CircleFadingPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2a10 10 0 0 1 7.38 16.75" /> <path d="M12 8v8" /> <path d="M16 12H8" /> <path d="M2.5 8.875a10 10 0 0 0-.5 3" /> <path d="M2.83 16a10 10 0 0 0 2.43 3.4" /> <path d="M4.636 5.235a10 10 0 0 1 .891-.857" /> <path d="M8.644 21.42a10 10 0 0 0 7.631-.38" />`, opt)
}

// CircleGauge renders the "circle-gauge" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-gauge" }}
//
// Direct usage in Go:
//
//	lucide.CircleGauge()
//	lucide.CircleGauge(lucide.Options{Size: 32, Class: "my-icon"})
func CircleGauge(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.6 2.7a10 10 0 1 0 5.7 5.7" /> <circle cx="12" cy="12" r="2" /> <path d="M13.4 10.6 19 5" />`, opt)
}

// CircleMinus renders the "circle-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-minus" }}
//
// Direct usage in Go:
//
//	lucide.CircleMinus()
//	lucide.CircleMinus(lucide.Options{Size: 32, Class: "my-icon"})
func CircleMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M8 12h8" />`, opt)
}

// CircleOff renders the "circle-off" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-off" }}
//
// Direct usage in Go:
//
//	lucide.CircleOff()
//	lucide.CircleOff(lucide.Options{Size: 32, Class: "my-icon"})
func CircleOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 2 20 20" /> <path d="M8.35 2.69A10 10 0 0 1 21.3 15.65" /> <path d="M19.08 19.08A10 10 0 1 1 4.92 4.92" />`, opt)
}

// CircleParking renders the "circle-parking" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-parking" }}
//
// Direct usage in Go:
//
//	lucide.CircleParking()
//	lucide.CircleParking(lucide.Options{Size: 32, Class: "my-icon"})
func CircleParking(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M9 17V7h4a3 3 0 0 1 0 6H9" />`, opt)
}

// CircleParkingOff renders the "circle-parking-off" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-parking-off" }}
//
// Direct usage in Go:
//
//	lucide.CircleParkingOff()
//	lucide.CircleParkingOff(lucide.Options{Size: 32, Class: "my-icon"})
func CircleParkingOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.656 7H13a3 3 0 0 1 2.984 3.307" /> <path d="M13 13H9" /> <path d="M19.071 19.071A1 1 0 0 1 4.93 4.93" /> <path d="m2 2 20 20" /> <path d="M8.357 2.687a10 10 0 0 1 12.956 12.956" /> <path d="M9 17V9" />`, opt)
}

// CirclePause renders the "circle-pause" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-pause" }}
//
// Direct usage in Go:
//
//	lucide.CirclePause()
//	lucide.CirclePause(lucide.Options{Size: 32, Class: "my-icon"})
func CirclePause(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <line x1="10" x2="10" y1="15" y2="9" /> <line x1="14" x2="14" y1="15" y2="9" />`, opt)
}

// CirclePercent renders the "circle-percent" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-percent" }}
//
// Direct usage in Go:
//
//	lucide.CirclePercent()
//	lucide.CirclePercent(lucide.Options{Size: 32, Class: "my-icon"})
func CirclePercent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m15 9-6 6" /> <path d="M9 9h.01" /> <path d="M15 15h.01" />`, opt)
}

// CirclePlay renders the "circle-play" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-play" }}
//
// Direct usage in Go:
//
//	lucide.CirclePlay()
//	lucide.CirclePlay(lucide.Options{Size: 32, Class: "my-icon"})
func CirclePlay(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 9.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997A1 1 0 0 1 9 14.996z" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// CirclePlus renders the "circle-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-plus" }}
//
// Direct usage in Go:
//
//	lucide.CirclePlus()
//	lucide.CirclePlus(lucide.Options{Size: 32, Class: "my-icon"})
func CirclePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M8 12h8" /> <path d="M12 8v8" />`, opt)
}

// CirclePoundSterling renders the "circle-pound-sterling" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-pound-sterling" }}
//
// Direct usage in Go:
//
//	lucide.CirclePoundSterling()
//	lucide.CirclePoundSterling(lucide.Options{Size: 32, Class: "my-icon"})
func CirclePoundSterling(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 16V9.5a1 1 0 0 1 5 0" /> <path d="M8 12h4" /> <path d="M8 16h7" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// CirclePower renders the "circle-power" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-power" }}
//
// Direct usage in Go:
//
//	lucide.CirclePower()
//	lucide.CirclePower(lucide.Options{Size: 32, Class: "my-icon"})
func CirclePower(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 7v4" /> <path d="M7.998 9.003a5 5 0 1 0 8-.005" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// CircleQuestionMark renders the "circle-question-mark" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-question-mark" }}
//
// Direct usage in Go:
//
//	lucide.CircleQuestionMark()
//	lucide.CircleQuestionMark(lucide.Options{Size: 32, Class: "my-icon"})
func CircleQuestionMark(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" /> <path d="M12 17h.01" />`, opt)
}

// CircleSlash renders the "circle-slash" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-slash" }}
//
// Direct usage in Go:
//
//	lucide.CircleSlash()
//	lucide.CircleSlash(lucide.Options{Size: 32, Class: "my-icon"})
func CircleSlash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <line x1="9" x2="15" y1="15" y2="9" />`, opt)
}

// CircleSlash2 renders the "circle-slash-2" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-slash-2" }}
//
// Direct usage in Go:
//
//	lucide.CircleSlash2()
//	lucide.CircleSlash2(lucide.Options{Size: 32, Class: "my-icon"})
func CircleSlash2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 2 2 22" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// CircleSmall renders the "circle-small" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-small" }}
//
// Direct usage in Go:
//
//	lucide.CircleSmall()
//	lucide.CircleSmall(lucide.Options{Size: 32, Class: "my-icon"})
func CircleSmall(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="6" />`, opt)
}

// CircleStar renders the "circle-star" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-star" }}
//
// Direct usage in Go:
//
//	lucide.CircleStar()
//	lucide.CircleStar(lucide.Options{Size: 32, Class: "my-icon"})
func CircleStar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.051 7.616a1 1 0 0 1 1.909.024l.737 1.452a1 1 0 0 0 .737.535l1.634.256a1 1 0 0 1 .588 1.806l-1.172 1.168a1 1 0 0 0-.282.866l.259 1.613a1 1 0 0 1-1.541 1.134l-1.465-.75a1 1 0 0 0-.912 0l-1.465.75a1 1 0 0 1-1.539-1.133l.258-1.613a1 1 0 0 0-.282-.867l-1.156-1.152a1 1 0 0 1 .572-1.822l1.633-.256a1 1 0 0 0 .737-.535z" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// CircleStop renders the "circle-stop" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-stop" }}
//
// Direct usage in Go:
//
//	lucide.CircleStop()
//	lucide.CircleStop(lucide.Options{Size: 32, Class: "my-icon"})
func CircleStop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <rect x="9" y="9" width="6" height="6" rx="1" />`, opt)
}

// CircleUser renders the "circle-user" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-user" }}
//
// Direct usage in Go:
//
//	lucide.CircleUser()
//	lucide.CircleUser(lucide.Options{Size: 32, Class: "my-icon"})
func CircleUser(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <circle cx="12" cy="10" r="3" /> <path d="M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662" />`, opt)
}

// CircleUserRound renders the "circle-user-round" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-user-round" }}
//
// Direct usage in Go:
//
//	lucide.CircleUserRound()
//	lucide.CircleUserRound(lucide.Options{Size: 32, Class: "my-icon"})
func CircleUserRound(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 20a6 6 0 0 0-12 0" /> <circle cx="12" cy="10" r="4" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// CircleX renders the "circle-x" icon.
//
// Usage in templates:
//
//	{{ lucide "circle-x" }}
//
// Direct usage in Go:
//
//	lucide.CircleX()
//	lucide.CircleX(lucide.Options{Size: 32, Class: "my-icon"})
func CircleX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m15 9-6 6" /> <path d="m9 9 6 6" />`, opt)
}

// CircuitBoard renders the "circuit-board" icon.
//
// Usage in templates:
//
//	{{ lucide "circuit-board" }}
//
// Direct usage in Go:
//
//	lucide.CircuitBoard()
//	lucide.CircuitBoard(lucide.Options{Size: 32, Class: "my-icon"})
func CircuitBoard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M11 9h4a2 2 0 0 0 2-2V3" /> <circle cx="9" cy="9" r="2" /> <path d="M7 21v-4a2 2 0 0 1 2-2h4" /> <circle cx="15" cy="15" r="2" />`, opt)
}

// Citrus renders the "citrus" icon.
//
// Usage in templates:
//
//	{{ lucide "citrus" }}
//
// Direct usage in Go:
//
//	lucide.Citrus()
//	lucide.Citrus(lucide.Options{Size: 32, Class: "my-icon"})
func Citrus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.66 17.67a1.08 1.08 0 0 1-.04 1.6A12 12 0 0 1 4.73 2.38a1.1 1.1 0 0 1 1.61-.04z" /> <path d="M19.65 15.66A8 8 0 0 1 8.35 4.34" /> <path d="m14 10-5.5 5.5" /> <path d="M14 17.85V10H6.15" />`, opt)
}

// Clapperboard renders the "clapperboard" icon.
//
// Usage in templates:
//
//	{{ lucide "clapperboard" }}
//
// Direct usage in Go:
//
//	lucide.Clapperboard()
//	lucide.Clapperboard(lucide.Options{Size: 32, Class: "my-icon"})
func Clapperboard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z" /> <path d="m6.2 5.3 3.1 3.9" /> <path d="m12.4 3.4 3.1 4" /> <path d="M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z" />`, opt)
}

// Clipboard renders the "clipboard" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard" }}
//
// Direct usage in Go:
//
//	lucide.Clipboard()
//	lucide.Clipboard(lucide.Options{Size: 32, Class: "my-icon"})
func Clipboard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" ry="1" /> <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />`, opt)
}

// ClipboardCheck renders the "clipboard-check" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-check" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardCheck()
//	lucide.ClipboardCheck(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" ry="1" /> <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> <path d="m9 14 2 2 4-4" />`, opt)
}

// ClipboardClock renders the "clipboard-clock" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-clock" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardClock()
//	lucide.ClipboardClock(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardClock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 14v2.2l1.6 1" /> <path d="M16 4h2a2 2 0 0 1 2 2v.832" /> <path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h2" /> <circle cx="16" cy="16" r="6" /> <rect x="8" y="2" width="8" height="4" rx="1" />`, opt)
}

// ClipboardCopy renders the "clipboard-copy" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-copy" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardCopy()
//	lucide.ClipboardCopy(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardCopy(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" ry="1" /> <path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2" /> <path d="M16 4h2a2 2 0 0 1 2 2v4" /> <path d="M21 14H11" /> <path d="m15 10-4 4 4 4" />`, opt)
}

// ClipboardList renders the "clipboard-list" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-list" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardList()
//	lucide.ClipboardList(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardList(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" ry="1" /> <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> <path d="M12 11h4" /> <path d="M12 16h4" /> <path d="M8 11h.01" /> <path d="M8 16h.01" />`, opt)
}

// ClipboardMinus renders the "clipboard-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-minus" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardMinus()
//	lucide.ClipboardMinus(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" ry="1" /> <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> <path d="M9 14h6" />`, opt)
}

// ClipboardPaste renders the "clipboard-paste" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-paste" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardPaste()
//	lucide.ClipboardPaste(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardPaste(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 14h10" /> <path d="M16 4h2a2 2 0 0 1 2 2v1.344" /> <path d="m17 18 4-4-4-4" /> <path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 1.793-1.113" /> <rect x="8" y="2" width="8" height="4" rx="1" />`, opt)
}

// ClipboardPen renders the "clipboard-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-pen" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardPen()
//	lucide.ClipboardPen(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardPen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" /> <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5" /> <path d="M4 13.5V6a2 2 0 0 1 2-2h2" /> <path d="M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" />`, opt)
}

// ClipboardPenLine renders the "clipboard-pen-line" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-pen-line" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardPenLine()
//	lucide.ClipboardPenLine(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardPenLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" /> <path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5" /> <path d="M16 4h2a2 2 0 0 1 1.73 1" /> <path d="M8 18h1" /> <path d="M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" />`, opt)
}

// ClipboardPlus renders the "clipboard-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-plus" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardPlus()
//	lucide.ClipboardPlus(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" ry="1" /> <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> <path d="M9 14h6" /> <path d="M12 17v-6" />`, opt)
}

// ClipboardType renders the "clipboard-type" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-type" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardType()
//	lucide.ClipboardType(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardType(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" ry="1" /> <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> <path d="M9 12v-1h6v1" /> <path d="M11 17h2" /> <path d="M12 11v6" />`, opt)
}

// ClipboardX renders the "clipboard-x" icon.
//
// Usage in templates:
//
//	{{ lucide "clipboard-x" }}
//
// Direct usage in Go:
//
//	lucide.ClipboardX()
//	lucide.ClipboardX(lucide.Options{Size: 32, Class: "my-icon"})
func ClipboardX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="4" x="8" y="2" rx="1" ry="1" /> <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> <path d="m15 11-6 6" /> <path d="m9 11 6 6" />`, opt)
}

// Clock renders the "clock" icon.
//
// Usage in templates:
//
//	{{ lucide "clock" }}
//
// Direct usage in Go:
//
//	lucide.Clock()
//	lucide.Clock(lucide.Options{Size: 32, Class: "my-icon"})
func Clock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l4 2" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock1 renders the "clock-1" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-1" }}
//
// Direct usage in Go:
//
//	lucide.Clock1()
//	lucide.Clock1(lucide.Options{Size: 32, Class: "my-icon"})
func Clock1(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l2-4" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock10 renders the "clock-10" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-10" }}
//
// Direct usage in Go:
//
//	lucide.Clock10()
//	lucide.Clock10(lucide.Options{Size: 32, Class: "my-icon"})
func Clock10(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l-4-2" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock11 renders the "clock-11" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-11" }}
//
// Direct usage in Go:
//
//	lucide.Clock11()
//	lucide.Clock11(lucide.Options{Size: 32, Class: "my-icon"})
func Clock11(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l-2-4" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock12 renders the "clock-12" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-12" }}
//
// Direct usage in Go:
//
//	lucide.Clock12()
//	lucide.Clock12(lucide.Options{Size: 32, Class: "my-icon"})
func Clock12(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock2 renders the "clock-2" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-2" }}
//
// Direct usage in Go:
//
//	lucide.Clock2()
//	lucide.Clock2(lucide.Options{Size: 32, Class: "my-icon"})
func Clock2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l4-2" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock3 renders the "clock-3" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-3" }}
//
// Direct usage in Go:
//
//	lucide.Clock3()
//	lucide.Clock3(lucide.Options{Size: 32, Class: "my-icon"})
func Clock3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6h4" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock4 renders the "clock-4" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-4" }}
//
// Direct usage in Go:
//
//	lucide.Clock4()
//	lucide.Clock4(lucide.Options{Size: 32, Class: "my-icon"})
func Clock4(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l4 2" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock5 renders the "clock-5" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-5" }}
//
// Direct usage in Go:
//
//	lucide.Clock5()
//	lucide.Clock5(lucide.Options{Size: 32, Class: "my-icon"})
func Clock5(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l2 4" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock6 renders the "clock-6" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-6" }}
//
// Direct usage in Go:
//
//	lucide.Clock6()
//	lucide.Clock6(lucide.Options{Size: 32, Class: "my-icon"})
func Clock6(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v10" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock7 renders the "clock-7" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-7" }}
//
// Direct usage in Go:
//
//	lucide.Clock7()
//	lucide.Clock7(lucide.Options{Size: 32, Class: "my-icon"})
func Clock7(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l-2 4" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock8 renders the "clock-8" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-8" }}
//
// Direct usage in Go:
//
//	lucide.Clock8()
//	lucide.Clock8(lucide.Options{Size: 32, Class: "my-icon"})
func Clock8(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l-4 2" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Clock9 renders the "clock-9" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-9" }}
//
// Direct usage in Go:
//
//	lucide.Clock9()
//	lucide.Clock9(lucide.Options{Size: 32, Class: "my-icon"})
func Clock9(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6H8" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// ClockAlert renders the "clock-alert" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-alert" }}
//
// Direct usage in Go:
//
//	lucide.ClockAlert()
//	lucide.ClockAlert(lucide.Options{Size: 32, Class: "my-icon"})
func ClockAlert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l4 2" /> <path d="M20 12v5" /> <path d="M20 21h.01" /> <path d="M21.25 8.2A10 10 0 1 0 16 21.16" />`, opt)
}

// ClockArrowDown renders the "clock-arrow-down" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-arrow-down" }}
//
// Direct usage in Go:
//
//	lucide.ClockArrowDown()
//	lucide.ClockArrowDown(lucide.Options{Size: 32, Class: "my-icon"})
func ClockArrowDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l2 1" /> <path d="M12.337 21.994a10 10 0 1 1 9.588-8.767" /> <path d="m14 18 4 4 4-4" /> <path d="M18 14v8" />`, opt)
}

// ClockArrowUp renders the "clock-arrow-up" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-arrow-up" }}
//
// Direct usage in Go:
//
//	lucide.ClockArrowUp()
//	lucide.ClockArrowUp(lucide.Options{Size: 32, Class: "my-icon"})
func ClockArrowUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l1.56.78" /> <path d="M13.227 21.925a10 10 0 1 1 8.767-9.588" /> <path d="m14 18 4-4 4 4" /> <path d="M18 22v-8" />`, opt)
}

// ClockFading renders the "clock-fading" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-fading" }}
//
// Direct usage in Go:
//
//	lucide.ClockFading()
//	lucide.ClockFading(lucide.Options{Size: 32, Class: "my-icon"})
func ClockFading(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2a10 10 0 0 1 7.38 16.75" /> <path d="M12 6v6l4 2" /> <path d="M2.5 8.875a10 10 0 0 0-.5 3" /> <path d="M2.83 16a10 10 0 0 0 2.43 3.4" /> <path d="M4.636 5.235a10 10 0 0 1 .891-.857" /> <path d="M8.644 21.42a10 10 0 0 0 7.631-.38" />`, opt)
}

// ClockPlus renders the "clock-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "clock-plus" }}
//
// Direct usage in Go:
//
//	lucide.ClockPlus()
//	lucide.ClockPlus(lucide.Options{Size: 32, Class: "my-icon"})
func ClockPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v6l3.644 1.822" /> <path d="M16 19h6" /> <path d="M19 16v6" /> <path d="M21.92 13.267a10 10 0 1 0-8.653 8.653" />`, opt)
}

// ClosedCaption renders the "closed-caption" icon.
//
// Usage in templates:
//
//	{{ lucide "closed-caption" }}
//
// Direct usage in Go:
//
//	lucide.ClosedCaption()
//	lucide.ClosedCaption(lucide.Options{Size: 32, Class: "my-icon"})
func ClosedCaption(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 9.17a3 3 0 1 0 0 5.66" /> <path d="M17 9.17a3 3 0 1 0 0 5.66" /> <rect x="2" y="5" width="20" height="14" rx="2" />`, opt)
}

// Cloud renders the "cloud" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud" }}
//
// Direct usage in Go:
//
//	lucide.Cloud()
//	lucide.Cloud(lucide.Options{Size: 32, Class: "my-icon"})
func Cloud(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z" />`, opt)
}

// CloudAlert renders the "cloud-alert" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-alert" }}
//
// Direct usage in Go:
//
//	lucide.CloudAlert()
//	lucide.CloudAlert(lucide.Options{Size: 32, Class: "my-icon"})
func CloudAlert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 12v4" /> <path d="M12 20h.01" /> <path d="M17 18h.5a1 1 0 0 0 0-9h-1.79A7 7 0 1 0 7 17.708" />`, opt)
}

// CloudCheck renders the "cloud-check" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-check" }}
//
// Direct usage in Go:
//
//	lucide.CloudCheck()
//	lucide.CloudCheck(lucide.Options{Size: 32, Class: "my-icon"})
func CloudCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 15-5.5 5.5L9 18" /> <path d="M5 17.743A7 7 0 1 1 15.71 10h1.79a4.5 4.5 0 0 1 1.5 8.742" />`, opt)
}

// CloudCog renders the "cloud-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-cog" }}
//
// Direct usage in Go:
//
//	lucide.CloudCog()
//	lucide.CloudCog(lucide.Options{Size: 32, Class: "my-icon"})
func CloudCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10.852 19.772-.383.924" /> <path d="m13.148 14.228.383-.923" /> <path d="M13.148 19.772a3 3 0 1 0-2.296-5.544l-.383-.923" /> <path d="m13.53 20.696-.382-.924a3 3 0 1 1-2.296-5.544" /> <path d="m14.772 15.852.923-.383" /> <path d="m14.772 18.148.923.383" /> <path d="M4.2 15.1a7 7 0 1 1 9.93-9.858A7 7 0 0 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.2" /> <path d="m9.228 15.852-.923-.383" /> <path d="m9.228 18.148-.923.383" />`, opt)
}

// CloudDownload renders the "cloud-download" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-download" }}
//
// Direct usage in Go:
//
//	lucide.CloudDownload()
//	lucide.CloudDownload(lucide.Options{Size: 32, Class: "my-icon"})
func CloudDownload(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13v8l-4-4" /> <path d="m12 21 4-4" /> <path d="M4.393 15.269A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.436 8.284" />`, opt)
}

// CloudDrizzle renders the "cloud-drizzle" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-drizzle" }}
//
// Direct usage in Go:
//
//	lucide.CloudDrizzle()
//	lucide.CloudDrizzle(lucide.Options{Size: 32, Class: "my-icon"})
func CloudDrizzle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> <path d="M8 19v1" /> <path d="M8 14v1" /> <path d="M16 19v1" /> <path d="M16 14v1" /> <path d="M12 21v1" /> <path d="M12 16v1" />`, opt)
}

// CloudFog renders the "cloud-fog" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-fog" }}
//
// Direct usage in Go:
//
//	lucide.CloudFog()
//	lucide.CloudFog(lucide.Options{Size: 32, Class: "my-icon"})
func CloudFog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> <path d="M16 17H7" /> <path d="M17 21H9" />`, opt)
}

// CloudHail renders the "cloud-hail" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-hail" }}
//
// Direct usage in Go:
//
//	lucide.CloudHail()
//	lucide.CloudHail(lucide.Options{Size: 32, Class: "my-icon"})
func CloudHail(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> <path d="M16 14v2" /> <path d="M8 14v2" /> <path d="M16 20h.01" /> <path d="M8 20h.01" /> <path d="M12 16v2" /> <path d="M12 22h.01" />`, opt)
}

// CloudLightning renders the "cloud-lightning" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-lightning" }}
//
// Direct usage in Go:
//
//	lucide.CloudLightning()
//	lucide.CloudLightning(lucide.Options{Size: 32, Class: "my-icon"})
func CloudLightning(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973" /> <path d="m13 12-3 5h4l-3 5" />`, opt)
}

// CloudMoon renders the "cloud-moon" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-moon" }}
//
// Direct usage in Go:
//
//	lucide.CloudMoon()
//	lucide.CloudMoon(lucide.Options{Size: 32, Class: "my-icon"})
func CloudMoon(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 16a3 3 0 0 1 0 6H7a5 5 0 1 1 4.9-6z" /> <path d="M18.376 14.512a6 6 0 0 0 3.461-4.127c.148-.625-.659-.97-1.248-.714a4 4 0 0 1-5.259-5.26c.255-.589-.09-1.395-.716-1.248a6 6 0 0 0-4.594 5.36" />`, opt)
}

// CloudMoonRain renders the "cloud-moon-rain" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-moon-rain" }}
//
// Direct usage in Go:
//
//	lucide.CloudMoonRain()
//	lucide.CloudMoonRain(lucide.Options{Size: 32, Class: "my-icon"})
func CloudMoonRain(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 20v2" /> <path d="M18.376 14.512a6 6 0 0 0 3.461-4.127c.148-.625-.659-.97-1.248-.714a4 4 0 0 1-5.259-5.26c.255-.589-.09-1.395-.716-1.248a6 6 0 0 0-4.594 5.36" /> <path d="M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24" /> <path d="M7 19v2" />`, opt)
}

// CloudOff renders the "cloud-off" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-off" }}
//
// Direct usage in Go:
//
//	lucide.CloudOff()
//	lucide.CloudOff(lucide.Options{Size: 32, Class: "my-icon"})
func CloudOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 2 20 20" /> <path d="M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193" /> <path d="M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07" />`, opt)
}

// CloudRain renders the "cloud-rain" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-rain" }}
//
// Direct usage in Go:
//
//	lucide.CloudRain()
//	lucide.CloudRain(lucide.Options{Size: 32, Class: "my-icon"})
func CloudRain(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> <path d="M16 14v6" /> <path d="M8 14v6" /> <path d="M12 16v6" />`, opt)
}

// CloudRainWind renders the "cloud-rain-wind" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-rain-wind" }}
//
// Direct usage in Go:
//
//	lucide.CloudRainWind()
//	lucide.CloudRainWind(lucide.Options{Size: 32, Class: "my-icon"})
func CloudRainWind(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> <path d="m9.2 22 3-7" /> <path d="m9 13-3 7" /> <path d="m17 13-3 7" />`, opt)
}

// CloudSnow renders the "cloud-snow" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-snow" }}
//
// Direct usage in Go:
//
//	lucide.CloudSnow()
//	lucide.CloudSnow(lucide.Options{Size: 32, Class: "my-icon"})
func CloudSnow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> <path d="M8 15h.01" /> <path d="M8 19h.01" /> <path d="M12 17h.01" /> <path d="M12 21h.01" /> <path d="M16 15h.01" /> <path d="M16 19h.01" />`, opt)
}

// CloudSun renders the "cloud-sun" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-sun" }}
//
// Direct usage in Go:
//
//	lucide.CloudSun()
//	lucide.CloudSun(lucide.Options{Size: 32, Class: "my-icon"})
func CloudSun(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v2" /> <path d="m4.93 4.93 1.41 1.41" /> <path d="M20 12h2" /> <path d="m19.07 4.93-1.41 1.41" /> <path d="M15.947 12.65a4 4 0 0 0-5.925-4.128" /> <path d="M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z" />`, opt)
}

// CloudSunRain renders the "cloud-sun-rain" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-sun-rain" }}
//
// Direct usage in Go:
//
//	lucide.CloudSunRain()
//	lucide.CloudSunRain(lucide.Options{Size: 32, Class: "my-icon"})
func CloudSunRain(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v2" /> <path d="m4.93 4.93 1.41 1.41" /> <path d="M20 12h2" /> <path d="m19.07 4.93-1.41 1.41" /> <path d="M15.947 12.65a4 4 0 0 0-5.925-4.128" /> <path d="M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24" /> <path d="M11 20v2" /> <path d="M7 19v2" />`, opt)
}

// CloudUpload renders the "cloud-upload" icon.
//
// Usage in templates:
//
//	{{ lucide "cloud-upload" }}
//
// Direct usage in Go:
//
//	lucide.CloudUpload()
//	lucide.CloudUpload(lucide.Options{Size: 32, Class: "my-icon"})
func CloudUpload(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13v8" /> <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> <path d="m8 17 4-4 4 4" />`, opt)
}

// Cloudy renders the "cloudy" icon.
//
// Usage in templates:
//
//	{{ lucide "cloudy" }}
//
// Direct usage in Go:
//
//	lucide.Cloudy()
//	lucide.Cloudy(lucide.Options{Size: 32, Class: "my-icon"})
func Cloudy(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z" /> <path d="M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5" />`, opt)
}

// Clover renders the "clover" icon.
//
// Usage in templates:
//
//	{{ lucide "clover" }}
//
// Direct usage in Go:
//
//	lucide.Clover()
//	lucide.Clover(lucide.Options{Size: 32, Class: "my-icon"})
func Clover(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16.17 7.83 2 22" /> <path d="M4.02 12a2.827 2.827 0 1 1 3.81-4.17A2.827 2.827 0 1 1 12 4.02a2.827 2.827 0 1 1 4.17 3.81A2.827 2.827 0 1 1 19.98 12a2.827 2.827 0 1 1-3.81 4.17A2.827 2.827 0 1 1 12 19.98a2.827 2.827 0 1 1-4.17-3.81A1 1 0 1 1 4 12" /> <path d="m7.83 7.83 8.34 8.34" />`, opt)
}

// Club renders the "club" icon.
//
// Usage in templates:
//
//	{{ lucide "club" }}
//
// Direct usage in Go:
//
//	lucide.Club()
//	lucide.Club(lucide.Options{Size: 32, Class: "my-icon"})
func Club(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.28 9.05a5.5 5.5 0 1 0-10.56 0A5.5 5.5 0 1 0 12 17.66a5.5 5.5 0 1 0 5.28-8.6Z" /> <path d="M12 17.66L12 22" />`, opt)
}

// Code renders the "code" icon.
//
// Usage in templates:
//
//	{{ lucide "code" }}
//
// Direct usage in Go:
//
//	lucide.Code()
//	lucide.Code(lucide.Options{Size: 32, Class: "my-icon"})
func Code(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 18 6-6-6-6" /> <path d="m8 6-6 6 6 6" />`, opt)
}

// CodeXml renders the "code-xml" icon.
//
// Usage in templates:
//
//	{{ lucide "code-xml" }}
//
// Direct usage in Go:
//
//	lucide.CodeXml()
//	lucide.CodeXml(lucide.Options{Size: 32, Class: "my-icon"})
func CodeXml(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18 16 4-4-4-4" /> <path d="m6 8-4 4 4 4" /> <path d="m14.5 4-5 16" />`, opt)
}

// Codepen renders the "codepen" icon.
//
// Usage in templates:
//
//	{{ lucide "codepen" }}
//
// Direct usage in Go:
//
//	lucide.Codepen()
//	lucide.Codepen(lucide.Options{Size: 32, Class: "my-icon"})
func Codepen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<polygon points="12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2" /> <line x1="12" x2="12" y1="22" y2="15.5" /> <polyline points="22 8.5 12 15.5 2 8.5" /> <polyline points="2 15.5 12 8.5 22 15.5" /> <line x1="12" x2="12" y1="2" y2="8.5" />`, opt)
}

// Codesandbox renders the "codesandbox" icon.
//
// Usage in templates:
//
//	{{ lucide "codesandbox" }}
//
// Direct usage in Go:
//
//	lucide.Codesandbox()
//	lucide.Codesandbox(lucide.Options{Size: 32, Class: "my-icon"})
func Codesandbox(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" /> <polyline points="7.5 4.21 12 6.81 16.5 4.21" /> <polyline points="7.5 19.79 7.5 14.6 3 12" /> <polyline points="21 12 16.5 14.6 16.5 19.79" /> <polyline points="3.27 6.96 12 12.01 20.73 6.96" /> <line x1="12" x2="12" y1="22.08" y2="12" />`, opt)
}

// Coffee renders the "coffee" icon.
//
// Usage in templates:
//
//	{{ lucide "coffee" }}
//
// Direct usage in Go:
//
//	lucide.Coffee()
//	lucide.Coffee(lucide.Options{Size: 32, Class: "my-icon"})
func Coffee(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v2" /> <path d="M14 2v2" /> <path d="M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1" /> <path d="M6 2v2" />`, opt)
}

// Cog renders the "cog" icon.
//
// Usage in templates:
//
//	{{ lucide "cog" }}
//
// Direct usage in Go:
//
//	lucide.Cog()
//	lucide.Cog(lucide.Options{Size: 32, Class: "my-icon"})
func Cog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 10.27 7 3.34" /> <path d="m11 13.73-4 6.93" /> <path d="M12 22v-2" /> <path d="M12 2v2" /> <path d="M14 12h8" /> <path d="m17 20.66-1-1.73" /> <path d="m17 3.34-1 1.73" /> <path d="M2 12h2" /> <path d="m20.66 17-1.73-1" /> <path d="m20.66 7-1.73 1" /> <path d="m3.34 17 1.73-1" /> <path d="m3.34 7 1.73 1" /> <circle cx="12" cy="12" r="2" /> <circle cx="12" cy="12" r="8" />`, opt)
}

// Coins renders the "coins" icon.
//
// Usage in templates:
//
//	{{ lucide "coins" }}
//
// Direct usage in Go:
//
//	lucide.Coins()
//	lucide.Coins(lucide.Options{Size: 32, Class: "my-icon"})
func Coins(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="8" cy="8" r="6" /> <path d="M18.09 10.37A6 6 0 1 1 10.34 18" /> <path d="M7 6h1v4" /> <path d="m16.71 13.88.7.71-2.82 2.82" />`, opt)
}

// Columns2 renders the "columns-2" icon.
//
// Usage in templates:
//
//	{{ lucide "columns-2" }}
//
// Direct usage in Go:
//
//	lucide.Columns2()
//	lucide.Columns2(lucide.Options{Size: 32, Class: "my-icon"})
func Columns2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M12 3v18" />`, opt)
}

// Columns3 renders the "columns-3" icon.
//
// Usage in templates:
//
//	{{ lucide "columns-3" }}
//
// Direct usage in Go:
//
//	lucide.Columns3()
//	lucide.Columns3(lucide.Options{Size: 32, Class: "my-icon"})
func Columns3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M9 3v18" /> <path d="M15 3v18" />`, opt)
}

// Columns3Cog renders the "columns-3-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "columns-3-cog" }}
//
// Direct usage in Go:
//
//	lucide.Columns3Cog()
//	lucide.Columns3Cog(lucide.Options{Size: 32, Class: "my-icon"})
func Columns3Cog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.5 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v5.5" /> <path d="m14.3 19.6 1-.4" /> <path d="M15 3v7.5" /> <path d="m15.2 16.9-.9-.3" /> <path d="m16.6 21.7.3-.9" /> <path d="m16.8 15.3-.4-1" /> <path d="m19.1 15.2.3-.9" /> <path d="m19.6 21.7-.4-1" /> <path d="m20.7 16.8 1-.4" /> <path d="m21.7 19.4-.9-.3" /> <path d="M9 3v18" /> <circle cx="18" cy="18" r="3" />`, opt)
}

// Columns4 renders the "columns-4" icon.
//
// Usage in templates:
//
//	{{ lucide "columns-4" }}
//
// Direct usage in Go:
//
//	lucide.Columns4()
//	lucide.Columns4(lucide.Options{Size: 32, Class: "my-icon"})
func Columns4(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M7.5 3v18" /> <path d="M12 3v18" /> <path d="M16.5 3v18" />`, opt)
}

// Combine renders the "combine" icon.
//
// Usage in templates:
//
//	{{ lucide "combine" }}
//
// Direct usage in Go:
//
//	lucide.Combine()
//	lucide.Combine(lucide.Options{Size: 32, Class: "my-icon"})
func Combine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 3a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1" /> <path d="M19 3a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1" /> <path d="m7 15 3 3" /> <path d="m7 21 3-3H5a2 2 0 0 1-2-2v-2" /> <rect x="14" y="14" width="7" height="7" rx="1" /> <rect x="3" y="3" width="7" height="7" rx="1" />`, opt)
}

// Command renders the "command" icon.
//
// Usage in templates:
//
//	{{ lucide "command" }}
//
// Direct usage in Go:
//
//	lucide.Command()
//	lucide.Command(lucide.Options{Size: 32, Class: "my-icon"})
func Command(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" />`, opt)
}

// Compass renders the "compass" icon.
//
// Usage in templates:
//
//	{{ lucide "compass" }}
//
// Direct usage in Go:
//
//	lucide.Compass()
//	lucide.Compass(lucide.Options{Size: 32, Class: "my-icon"})
func Compass(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Component renders the "component" icon.
//
// Usage in templates:
//
//	{{ lucide "component" }}
//
// Direct usage in Go:
//
//	lucide.Component()
//	lucide.Component(lucide.Options{Size: 32, Class: "my-icon"})
func Component(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.536 11.293a1 1 0 0 0 0 1.414l2.376 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z" /> <path d="M2.297 11.293a1 1 0 0 0 0 1.414l2.377 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414L6.088 8.916a1 1 0 0 0-1.414 0z" /> <path d="M8.916 17.912a1 1 0 0 0 0 1.415l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.415l-2.377-2.376a1 1 0 0 0-1.414 0z" /> <path d="M8.916 4.674a1 1 0 0 0 0 1.414l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z" />`, opt)
}

// Computer renders the "computer" icon.
//
// Usage in templates:
//
//	{{ lucide "computer" }}
//
// Direct usage in Go:
//
//	lucide.Computer()
//	lucide.Computer(lucide.Options{Size: 32, Class: "my-icon"})
func Computer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="8" x="5" y="2" rx="2" /> <rect width="20" height="8" x="2" y="14" rx="2" /> <path d="M6 18h2" /> <path d="M12 18h6" />`, opt)
}

// ConciergeBell renders the "concierge-bell" icon.
//
// Usage in templates:
//
//	{{ lucide "concierge-bell" }}
//
// Direct usage in Go:
//
//	lucide.ConciergeBell()
//	lucide.ConciergeBell(lucide.Options{Size: 32, Class: "my-icon"})
func ConciergeBell(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 20a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1Z" /> <path d="M20 16a8 8 0 1 0-16 0" /> <path d="M12 4v4" /> <path d="M10 4h4" />`, opt)
}

// Cone renders the "cone" icon.
//
// Usage in templates:
//
//	{{ lucide "cone" }}
//
// Direct usage in Go:
//
//	lucide.Cone()
//	lucide.Cone(lucide.Options{Size: 32, Class: "my-icon"})
func Cone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m20.9 18.55-8-15.98a1 1 0 0 0-1.8 0l-8 15.98" /> <ellipse cx="12" cy="19" rx="9" ry="3" />`, opt)
}

// Construction renders the "construction" icon.
//
// Usage in templates:
//
//	{{ lucide "construction" }}
//
// Direct usage in Go:
//
//	lucide.Construction()
//	lucide.Construction(lucide.Options{Size: 32, Class: "my-icon"})
func Construction(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="2" y="6" width="20" height="8" rx="1" /> <path d="M17 14v7" /> <path d="M7 14v7" /> <path d="M17 3v3" /> <path d="M7 3v3" /> <path d="M10 14 2.3 6.3" /> <path d="m14 6 7.7 7.7" /> <path d="m8 6 8 8" />`, opt)
}

// Contact renders the "contact" icon.
//
// Usage in templates:
//
//	{{ lucide "contact" }}
//
// Direct usage in Go:
//
//	lucide.Contact()
//	lucide.Contact(lucide.Options{Size: 32, Class: "my-icon"})
func Contact(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 2v2" /> <path d="M7 22v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2" /> <path d="M8 2v2" /> <circle cx="12" cy="11" r="3" /> <rect x="3" y="4" width="18" height="18" rx="2" />`, opt)
}

// ContactRound renders the "contact-round" icon.
//
// Usage in templates:
//
//	{{ lucide "contact-round" }}
//
// Direct usage in Go:
//
//	lucide.ContactRound()
//	lucide.ContactRound(lucide.Options{Size: 32, Class: "my-icon"})
func ContactRound(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 2v2" /> <path d="M17.915 22a6 6 0 0 0-12 0" /> <path d="M8 2v2" /> <circle cx="12" cy="12" r="4" /> <rect x="3" y="4" width="18" height="18" rx="2" />`, opt)
}

// Container renders the "container" icon.
//
// Usage in templates:
//
//	{{ lucide "container" }}
//
// Direct usage in Go:
//
//	lucide.Container()
//	lucide.Container(lucide.Options{Size: 32, Class: "my-icon"})
func Container(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 7.7c0-.6-.4-1.2-.8-1.5l-6.3-3.9a1.72 1.72 0 0 0-1.7 0l-10.3 6c-.5.2-.9.8-.9 1.4v6.6c0 .5.4 1.2.8 1.5l6.3 3.9a1.72 1.72 0 0 0 1.7 0l10.3-6c.5-.3.9-1 .9-1.5Z" /> <path d="M10 21.9V14L2.1 9.1" /> <path d="m10 14 11.9-6.9" /> <path d="M14 19.8v-8.1" /> <path d="M18 17.5V9.4" />`, opt)
}

// Contrast renders the "contrast" icon.
//
// Usage in templates:
//
//	{{ lucide "contrast" }}
//
// Direct usage in Go:
//
//	lucide.Contrast()
//	lucide.Contrast(lucide.Options{Size: 32, Class: "my-icon"})
func Contrast(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M12 18a6 6 0 0 0 0-12v12z" />`, opt)
}

// Cookie renders the "cookie" icon.
//
// Usage in templates:
//
//	{{ lucide "cookie" }}
//
// Direct usage in Go:
//
//	lucide.Cookie()
//	lucide.Cookie(lucide.Options{Size: 32, Class: "my-icon"})
func Cookie(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5" /> <path d="M8.5 8.5v.01" /> <path d="M16 15.5v.01" /> <path d="M12 12v.01" /> <path d="M11 17v.01" /> <path d="M7 14v.01" />`, opt)
}

// CookingPot renders the "cooking-pot" icon.
//
// Usage in templates:
//
//	{{ lucide "cooking-pot" }}
//
// Direct usage in Go:
//
//	lucide.CookingPot()
//	lucide.CookingPot(lucide.Options{Size: 32, Class: "my-icon"})
func CookingPot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 12h20" /> <path d="M20 12v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8" /> <path d="m4 8 16-4" /> <path d="m8.86 6.78-.45-1.81a2 2 0 0 1 1.45-2.43l1.94-.48a2 2 0 0 1 2.43 1.46l.45 1.8" />`, opt)
}

// Copy renders the "copy" icon.
//
// Usage in templates:
//
//	{{ lucide "copy" }}
//
// Direct usage in Go:
//
//	lucide.Copy()
//	lucide.Copy(lucide.Options{Size: 32, Class: "my-icon"})
func Copy(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="14" x="8" y="8" rx="2" ry="2" /> <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />`, opt)
}

// CopyCheck renders the "copy-check" icon.
//
// Usage in templates:
//
//	{{ lucide "copy-check" }}
//
// Direct usage in Go:
//
//	lucide.CopyCheck()
//	lucide.CopyCheck(lucide.Options{Size: 32, Class: "my-icon"})
func CopyCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 15 2 2 4-4" /> <rect width="14" height="14" x="8" y="8" rx="2" ry="2" /> <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />`, opt)
}

// CopyMinus renders the "copy-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "copy-minus" }}
//
// Direct usage in Go:
//
//	lucide.CopyMinus()
//	lucide.CopyMinus(lucide.Options{Size: 32, Class: "my-icon"})
func CopyMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="12" x2="18" y1="15" y2="15" /> <rect width="14" height="14" x="8" y="8" rx="2" ry="2" /> <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />`, opt)
}

// CopyPlus renders the "copy-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "copy-plus" }}
//
// Direct usage in Go:
//
//	lucide.CopyPlus()
//	lucide.CopyPlus(lucide.Options{Size: 32, Class: "my-icon"})
func CopyPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="15" x2="15" y1="12" y2="18" /> <line x1="12" x2="18" y1="15" y2="15" /> <rect width="14" height="14" x="8" y="8" rx="2" ry="2" /> <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />`, opt)
}

// CopySlash renders the "copy-slash" icon.
//
// Usage in templates:
//
//	{{ lucide "copy-slash" }}
//
// Direct usage in Go:
//
//	lucide.CopySlash()
//	lucide.CopySlash(lucide.Options{Size: 32, Class: "my-icon"})
func CopySlash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="12" x2="18" y1="18" y2="12" /> <rect width="14" height="14" x="8" y="8" rx="2" ry="2" /> <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />`, opt)
}

// CopyX renders the "copy-x" icon.
//
// Usage in templates:
//
//	{{ lucide "copy-x" }}
//
// Direct usage in Go:
//
//	lucide.CopyX()
//	lucide.CopyX(lucide.Options{Size: 32, Class: "my-icon"})
func CopyX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="12" x2="18" y1="12" y2="18" /> <line x1="12" x2="18" y1="18" y2="12" /> <rect width="14" height="14" x="8" y="8" rx="2" ry="2" /> <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />`, opt)
}

// Copyleft renders the "copyleft" icon.
//
// Usage in templates:
//
//	{{ lucide "copyleft" }}
//
// Direct usage in Go:
//
//	lucide.Copyleft()
//	lucide.Copyleft(lucide.Options{Size: 32, Class: "my-icon"})
func Copyleft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M9.17 14.83a4 4 0 1 0 0-5.66" />`, opt)
}

// Copyright renders the "copyright" icon.
//
// Usage in templates:
//
//	{{ lucide "copyright" }}
//
// Direct usage in Go:
//
//	lucide.Copyright()
//	lucide.Copyright(lucide.Options{Size: 32, Class: "my-icon"})
func Copyright(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M14.83 14.83a4 4 0 1 1 0-5.66" />`, opt)
}

// CornerDownLeft renders the "corner-down-left" icon.
//
// Usage in templates:
//
//	{{ lucide "corner-down-left" }}
//
// Direct usage in Go:
//
//	lucide.CornerDownLeft()
//	lucide.CornerDownLeft(lucide.Options{Size: 32, Class: "my-icon"})
func CornerDownLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 4v7a4 4 0 0 1-4 4H4" /> <path d="m9 10-5 5 5 5" />`, opt)
}

// CornerDownRight renders the "corner-down-right" icon.
//
// Usage in templates:
//
//	{{ lucide "corner-down-right" }}
//
// Direct usage in Go:
//
//	lucide.CornerDownRight()
//	lucide.CornerDownRight(lucide.Options{Size: 32, Class: "my-icon"})
func CornerDownRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 10 5 5-5 5" /> <path d="M4 4v7a4 4 0 0 0 4 4h12" />`, opt)
}

// CornerLeftDown renders the "corner-left-down" icon.
//
// Usage in templates:
//
//	{{ lucide "corner-left-down" }}
//
// Direct usage in Go:
//
//	lucide.CornerLeftDown()
//	lucide.CornerLeftDown(lucide.Options{Size: 32, Class: "my-icon"})
func CornerLeftDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 15-5 5-5-5" /> <path d="M20 4h-7a4 4 0 0 0-4 4v12" />`, opt)
}

// CornerLeftUp renders the "corner-left-up" icon.
//
// Usage in templates:
//
//	{{ lucide "corner-left-up" }}
//
// Direct usage in Go:
//
//	lucide.CornerLeftUp()
//	lucide.CornerLeftUp(lucide.Options{Size: 32, Class: "my-icon"})
func CornerLeftUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 9 9 4 4 9" /> <path d="M20 20h-7a4 4 0 0 1-4-4V4" />`, opt)
}

// CornerRightDown renders the "corner-right-down" icon.
//
// Usage in templates:
//
//	{{ lucide "corner-right-down" }}
//
// Direct usage in Go:
//
//	lucide.CornerRightDown()
//	lucide.CornerRightDown(lucide.Options{Size: 32, Class: "my-icon"})
func CornerRightDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 15 5 5 5-5" /> <path d="M4 4h7a4 4 0 0 1 4 4v12" />`, opt)
}

// CornerRightUp renders the "corner-right-up" icon.
//
// Usage in templates:
//
//	{{ lucide "corner-right-up" }}
//
// Direct usage in Go:
//
//	lucide.CornerRightUp()
//	lucide.CornerRightUp(lucide.Options{Size: 32, Class: "my-icon"})
func CornerRightUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 9 5-5 5 5" /> <path d="M4 20h7a4 4 0 0 0 4-4V4" />`, opt)
}

// CornerUpLeft renders the "corner-up-left" icon.
//
// Usage in templates:
//
//	{{ lucide "corner-up-left" }}
//
// Direct usage in Go:
//
//	lucide.CornerUpLeft()
//	lucide.CornerUpLeft(lucide.Options{Size: 32, Class: "my-icon"})
func CornerUpLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 20v-7a4 4 0 0 0-4-4H4" /> <path d="M9 14 4 9l5-5" />`, opt)
}

// CornerUpRight renders the "corner-up-right" icon.
//
// Usage in templates:
//
//	{{ lucide "corner-up-right" }}
//
// Direct usage in Go:
//
//	lucide.CornerUpRight()
//	lucide.CornerUpRight(lucide.Options{Size: 32, Class: "my-icon"})
func CornerUpRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 14 5-5-5-5" /> <path d="M4 20v-7a4 4 0 0 1 4-4h12" />`, opt)
}

// Cpu renders the "cpu" icon.
//
// Usage in templates:
//
//	{{ lucide "cpu" }}
//
// Direct usage in Go:
//
//	lucide.Cpu()
//	lucide.Cpu(lucide.Options{Size: 32, Class: "my-icon"})
func Cpu(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20v2" /> <path d="M12 2v2" /> <path d="M17 20v2" /> <path d="M17 2v2" /> <path d="M2 12h2" /> <path d="M2 17h2" /> <path d="M2 7h2" /> <path d="M20 12h2" /> <path d="M20 17h2" /> <path d="M20 7h2" /> <path d="M7 20v2" /> <path d="M7 2v2" /> <rect x="4" y="4" width="16" height="16" rx="2" /> <rect x="8" y="8" width="8" height="8" rx="1" />`, opt)
}

// CreativeCommons renders the "creative-commons" icon.
//
// Usage in templates:
//
//	{{ lucide "creative-commons" }}
//
// Direct usage in Go:
//
//	lucide.CreativeCommons()
//	lucide.CreativeCommons(lucide.Options{Size: 32, Class: "my-icon"})
func CreativeCommons(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1" /> <path d="M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1" />`, opt)
}

// CreditCard renders the "credit-card" icon.
//
// Usage in templates:
//
//	{{ lucide "credit-card" }}
//
// Direct usage in Go:
//
//	lucide.CreditCard()
//	lucide.CreditCard(lucide.Options{Size: 32, Class: "my-icon"})
func CreditCard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="14" x="2" y="5" rx="2" /> <line x1="2" x2="22" y1="10" y2="10" />`, opt)
}

// Croissant renders the "croissant" icon.
//
// Usage in templates:
//
//	{{ lucide "croissant" }}
//
// Direct usage in Go:
//
//	lucide.Croissant()
//	lucide.Croissant(lucide.Options{Size: 32, Class: "my-icon"})
func Croissant(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.2 18H4.774a1.5 1.5 0 0 1-1.352-.97 11 11 0 0 1 .132-6.487" /> <path d="M18 10.2V4.774a1.5 1.5 0 0 0-.97-1.352 11 11 0 0 0-6.486.132" /> <path d="M18 5a4 3 0 0 1 4 3 2 2 0 0 1-2 2 10 10 0 0 0-5.139 1.42" /> <path d="M5 18a3 4 0 0 0 3 4 2 2 0 0 0 2-2 10 10 0 0 1 1.42-5.14" /> <path d="M8.709 2.554a10 10 0 0 0-6.155 6.155 1.5 1.5 0 0 0 .676 1.626l9.807 5.42a2 2 0 0 0 2.718-2.718l-5.42-9.807a1.5 1.5 0 0 0-1.626-.676" />`, opt)
}

// Crop renders the "crop" icon.
//
// Usage in templates:
//
//	{{ lucide "crop" }}
//
// Direct usage in Go:
//
//	lucide.Crop()
//	lucide.Crop(lucide.Options{Size: 32, Class: "my-icon"})
func Crop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 2v14a2 2 0 0 0 2 2h14" /> <path d="M18 22V8a2 2 0 0 0-2-2H2" />`, opt)
}

// Cross renders the "cross" icon.
//
// Usage in templates:
//
//	{{ lucide "cross" }}
//
// Direct usage in Go:
//
//	lucide.Cross()
//	lucide.Cross(lucide.Options{Size: 32, Class: "my-icon"})
func Cross(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 9a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a1 1 0 0 1 1 1v4a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-4a1 1 0 0 1 1-1h4a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a1 1 0 0 1-1-1V4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4a1 1 0 0 1-1 1z" />`, opt)
}

// Crosshair renders the "crosshair" icon.
//
// Usage in templates:
//
//	{{ lucide "crosshair" }}
//
// Direct usage in Go:
//
//	lucide.Crosshair()
//	lucide.Crosshair(lucide.Options{Size: 32, Class: "my-icon"})
func Crosshair(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <line x1="22" x2="18" y1="12" y2="12" /> <line x1="6" x2="2" y1="12" y2="12" /> <line x1="12" x2="12" y1="6" y2="2" /> <line x1="12" x2="12" y1="22" y2="18" />`, opt)
}

// Crown renders the "crown" icon.
//
// Usage in templates:
//
//	{{ lucide "crown" }}
//
// Direct usage in Go:
//
//	lucide.Crown()
//	lucide.Crown(lucide.Options{Size: 32, Class: "my-icon"})
func Crown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z" /> <path d="M5 21h14" />`, opt)
}

// Cuboid renders the "cuboid" icon.
//
// Usage in templates:
//
//	{{ lucide "cuboid" }}
//
// Direct usage in Go:
//
//	lucide.Cuboid()
//	lucide.Cuboid(lucide.Options{Size: 32, Class: "my-icon"})
func Cuboid(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m21.12 6.4-6.05-4.06a2 2 0 0 0-2.17-.05L2.95 8.41a2 2 0 0 0-.95 1.7v5.82a2 2 0 0 0 .88 1.66l6.05 4.07a2 2 0 0 0 2.17.05l9.95-6.12a2 2 0 0 0 .95-1.7V8.06a2 2 0 0 0-.88-1.66Z" /> <path d="M10 22v-8L2.25 9.15" /> <path d="m10 14 11.77-6.87" />`, opt)
}

// CupSoda renders the "cup-soda" icon.
//
// Usage in templates:
//
//	{{ lucide "cup-soda" }}
//
// Direct usage in Go:
//
//	lucide.CupSoda()
//	lucide.CupSoda(lucide.Options{Size: 32, Class: "my-icon"})
func CupSoda(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8" /> <path d="M5 8h14" /> <path d="M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0" /> <path d="m12 8 1-6h2" />`, opt)
}

// Currency renders the "currency" icon.
//
// Usage in templates:
//
//	{{ lucide "currency" }}
//
// Direct usage in Go:
//
//	lucide.Currency()
//	lucide.Currency(lucide.Options{Size: 32, Class: "my-icon"})
func Currency(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="8" /> <line x1="3" x2="6" y1="3" y2="6" /> <line x1="21" x2="18" y1="3" y2="6" /> <line x1="3" x2="6" y1="21" y2="18" /> <line x1="21" x2="18" y1="21" y2="18" />`, opt)
}

// Cylinder renders the "cylinder" icon.
//
// Usage in templates:
//
//	{{ lucide "cylinder" }}
//
// Direct usage in Go:
//
//	lucide.Cylinder()
//	lucide.Cylinder(lucide.Options{Size: 32, Class: "my-icon"})
func Cylinder(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<ellipse cx="12" cy="5" rx="9" ry="3" /> <path d="M3 5v14a9 3 0 0 0 18 0V5" />`, opt)
}

// Dam renders the "dam" icon.
//
// Usage in templates:
//
//	{{ lucide "dam" }}
//
// Direct usage in Go:
//
//	lucide.Dam()
//	lucide.Dam(lucide.Options{Size: 32, Class: "my-icon"})
func Dam(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 11.31c1.17.56 1.54 1.69 3.5 1.69 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" /> <path d="M11.75 18c.35.5 1.45 1 2.75 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" /> <path d="M2 10h4" /> <path d="M2 14h4" /> <path d="M2 18h4" /> <path d="M2 6h4" /> <path d="M7 3a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1L10 4a1 1 0 0 0-1-1z" />`, opt)
}

// Database renders the "database" icon.
//
// Usage in templates:
//
//	{{ lucide "database" }}
//
// Direct usage in Go:
//
//	lucide.Database()
//	lucide.Database(lucide.Options{Size: 32, Class: "my-icon"})
func Database(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<ellipse cx="12" cy="5" rx="9" ry="3" /> <path d="M3 5V19A9 3 0 0 0 21 19V5" /> <path d="M3 12A9 3 0 0 0 21 12" />`, opt)
}

// DatabaseBackup renders the "database-backup" icon.
//
// Usage in templates:
//
//	{{ lucide "database-backup" }}
//
// Direct usage in Go:
//
//	lucide.DatabaseBackup()
//	lucide.DatabaseBackup(lucide.Options{Size: 32, Class: "my-icon"})
func DatabaseBackup(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<ellipse cx="12" cy="5" rx="9" ry="3" /> <path d="M3 12a9 3 0 0 0 5 2.69" /> <path d="M21 9.3V5" /> <path d="M3 5v14a9 3 0 0 0 6.47 2.88" /> <path d="M12 12v4h4" /> <path d="M13 20a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L12 16" />`, opt)
}

// DatabaseZap renders the "database-zap" icon.
//
// Usage in templates:
//
//	{{ lucide "database-zap" }}
//
// Direct usage in Go:
//
//	lucide.DatabaseZap()
//	lucide.DatabaseZap(lucide.Options{Size: 32, Class: "my-icon"})
func DatabaseZap(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<ellipse cx="12" cy="5" rx="9" ry="3" /> <path d="M3 5V19A9 3 0 0 0 15 21.84" /> <path d="M21 5V8" /> <path d="M21 12L18 17H22L19 22" /> <path d="M3 12A9 3 0 0 0 14.59 14.87" />`, opt)
}

// DecimalsArrowLeft renders the "decimals-arrow-left" icon.
//
// Usage in templates:
//
//	{{ lucide "decimals-arrow-left" }}
//
// Direct usage in Go:
//
//	lucide.DecimalsArrowLeft()
//	lucide.DecimalsArrowLeft(lucide.Options{Size: 32, Class: "my-icon"})
func DecimalsArrowLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m13 21-3-3 3-3" /> <path d="M20 18H10" /> <path d="M3 11h.01" /> <rect x="6" y="3" width="5" height="8" rx="2.5" />`, opt)
}

// DecimalsArrowRight renders the "decimals-arrow-right" icon.
//
// Usage in templates:
//
//	{{ lucide "decimals-arrow-right" }}
//
// Direct usage in Go:
//
//	lucide.DecimalsArrowRight()
//	lucide.DecimalsArrowRight(lucide.Options{Size: 32, Class: "my-icon"})
func DecimalsArrowRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 18h10" /> <path d="m17 21 3-3-3-3" /> <path d="M3 11h.01" /> <rect x="15" y="3" width="5" height="8" rx="2.5" /> <rect x="6" y="3" width="5" height="8" rx="2.5" />`, opt)
}

// Delete renders the "delete" icon.
//
// Usage in templates:
//
//	{{ lucide "delete" }}
//
// Direct usage in Go:
//
//	lucide.Delete()
//	lucide.Delete(lucide.Options{Size: 32, Class: "my-icon"})
func Delete(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z" /> <path d="m12 9 6 6" /> <path d="m18 9-6 6" />`, opt)
}

// Dessert renders the "dessert" icon.
//
// Usage in templates:
//
//	{{ lucide "dessert" }}
//
// Direct usage in Go:
//
//	lucide.Dessert()
//	lucide.Dessert(lucide.Options{Size: 32, Class: "my-icon"})
func Dessert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.162 3.167A10 10 0 0 0 2 13a2 2 0 0 0 4 0v-1a2 2 0 0 1 4 0v4a2 2 0 0 0 4 0v-4a2 2 0 0 1 4 0v1a2 2 0 0 0 4-.006 10 10 0 0 0-8.161-9.826" /> <path d="M20.804 14.869a9 9 0 0 1-17.608 0" /> <circle cx="12" cy="4" r="2" />`, opt)
}

// Diameter renders the "diameter" icon.
//
// Usage in templates:
//
//	{{ lucide "diameter" }}
//
// Direct usage in Go:
//
//	lucide.Diameter()
//	lucide.Diameter(lucide.Options{Size: 32, Class: "my-icon"})
func Diameter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="19" cy="19" r="2" /> <circle cx="5" cy="5" r="2" /> <path d="M6.48 3.66a10 10 0 0 1 13.86 13.86" /> <path d="m6.41 6.41 11.18 11.18" /> <path d="M3.66 6.48a10 10 0 0 0 13.86 13.86" />`, opt)
}

// Diamond renders the "diamond" icon.
//
// Usage in templates:
//
//	{{ lucide "diamond" }}
//
// Direct usage in Go:
//
//	lucide.Diamond()
//	lucide.Diamond(lucide.Options{Size: 32, Class: "my-icon"})
func Diamond(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z" />`, opt)
}

// DiamondMinus renders the "diamond-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "diamond-minus" }}
//
// Direct usage in Go:
//
//	lucide.DiamondMinus()
//	lucide.DiamondMinus(lucide.Options{Size: 32, Class: "my-icon"})
func DiamondMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z" /> <path d="M8 12h8" />`, opt)
}

// DiamondPercent renders the "diamond-percent" icon.
//
// Usage in templates:
//
//	{{ lucide "diamond-percent" }}
//
// Direct usage in Go:
//
//	lucide.DiamondPercent()
//	lucide.DiamondPercent(lucide.Options{Size: 32, Class: "my-icon"})
func DiamondPercent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0Z" /> <path d="M9.2 9.2h.01" /> <path d="m14.5 9.5-5 5" /> <path d="M14.7 14.8h.01" />`, opt)
}

// DiamondPlus renders the "diamond-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "diamond-plus" }}
//
// Direct usage in Go:
//
//	lucide.DiamondPlus()
//	lucide.DiamondPlus(lucide.Options{Size: 32, Class: "my-icon"})
func DiamondPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 8v8" /> <path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z" /> <path d="M8 12h8" />`, opt)
}

// Dice1 renders the "dice-1" icon.
//
// Usage in templates:
//
//	{{ lucide "dice-1" }}
//
// Direct usage in Go:
//
//	lucide.Dice1()
//	lucide.Dice1(lucide.Options{Size: 32, Class: "my-icon"})
func Dice1(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <path d="M12 12h.01" />`, opt)
}

// Dice2 renders the "dice-2" icon.
//
// Usage in templates:
//
//	{{ lucide "dice-2" }}
//
// Direct usage in Go:
//
//	lucide.Dice2()
//	lucide.Dice2(lucide.Options{Size: 32, Class: "my-icon"})
func Dice2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <path d="M15 9h.01" /> <path d="M9 15h.01" />`, opt)
}

// Dice3 renders the "dice-3" icon.
//
// Usage in templates:
//
//	{{ lucide "dice-3" }}
//
// Direct usage in Go:
//
//	lucide.Dice3()
//	lucide.Dice3(lucide.Options{Size: 32, Class: "my-icon"})
func Dice3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <path d="M16 8h.01" /> <path d="M12 12h.01" /> <path d="M8 16h.01" />`, opt)
}

// Dice4 renders the "dice-4" icon.
//
// Usage in templates:
//
//	{{ lucide "dice-4" }}
//
// Direct usage in Go:
//
//	lucide.Dice4()
//	lucide.Dice4(lucide.Options{Size: 32, Class: "my-icon"})
func Dice4(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <path d="M16 8h.01" /> <path d="M8 8h.01" /> <path d="M8 16h.01" /> <path d="M16 16h.01" />`, opt)
}

// Dice5 renders the "dice-5" icon.
//
// Usage in templates:
//
//	{{ lucide "dice-5" }}
//
// Direct usage in Go:
//
//	lucide.Dice5()
//	lucide.Dice5(lucide.Options{Size: 32, Class: "my-icon"})
func Dice5(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <path d="M16 8h.01" /> <path d="M8 8h.01" /> <path d="M8 16h.01" /> <path d="M16 16h.01" /> <path d="M12 12h.01" />`, opt)
}

// Dice6 renders the "dice-6" icon.
//
// Usage in templates:
//
//	{{ lucide "dice-6" }}
//
// Direct usage in Go:
//
//	lucide.Dice6()
//	lucide.Dice6(lucide.Options{Size: 32, Class: "my-icon"})
func Dice6(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <path d="M16 8h.01" /> <path d="M16 12h.01" /> <path d="M16 16h.01" /> <path d="M8 8h.01" /> <path d="M8 12h.01" /> <path d="M8 16h.01" />`, opt)
}

// Dices renders the "dices" icon.
//
// Usage in templates:
//
//	{{ lucide "dices" }}
//
// Direct usage in Go:
//
//	lucide.Dices()
//	lucide.Dices(lucide.Options{Size: 32, Class: "my-icon"})
func Dices(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="12" height="12" x="2" y="10" rx="2" ry="2" /> <path d="m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6" /> <path d="M6 18h.01" /> <path d="M10 14h.01" /> <path d="M15 6h.01" /> <path d="M18 9h.01" />`, opt)
}

// Diff renders the "diff" icon.
//
// Usage in templates:
//
//	{{ lucide "diff" }}
//
// Direct usage in Go:
//
//	lucide.Diff()
//	lucide.Diff(lucide.Options{Size: 32, Class: "my-icon"})
func Diff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v14" /> <path d="M5 10h14" /> <path d="M5 21h14" />`, opt)
}

// Disc renders the "disc" icon.
//
// Usage in templates:
//
//	{{ lucide "disc" }}
//
// Direct usage in Go:
//
//	lucide.Disc()
//	lucide.Disc(lucide.Options{Size: 32, Class: "my-icon"})
func Disc(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <circle cx="12" cy="12" r="2" />`, opt)
}

// Disc2 renders the "disc-2" icon.
//
// Usage in templates:
//
//	{{ lucide "disc-2" }}
//
// Direct usage in Go:
//
//	lucide.Disc2()
//	lucide.Disc2(lucide.Options{Size: 32, Class: "my-icon"})
func Disc2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <circle cx="12" cy="12" r="4" /> <path d="M12 12h.01" />`, opt)
}

// Disc3 renders the "disc-3" icon.
//
// Usage in templates:
//
//	{{ lucide "disc-3" }}
//
// Direct usage in Go:
//
//	lucide.Disc3()
//	lucide.Disc3(lucide.Options{Size: 32, Class: "my-icon"})
func Disc3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M6 12c0-1.7.7-3.2 1.8-4.2" /> <circle cx="12" cy="12" r="2" /> <path d="M18 12c0 1.7-.7 3.2-1.8 4.2" />`, opt)
}

// DiscAlbum renders the "disc-album" icon.
//
// Usage in templates:
//
//	{{ lucide "disc-album" }}
//
// Direct usage in Go:
//
//	lucide.DiscAlbum()
//	lucide.DiscAlbum(lucide.Options{Size: 32, Class: "my-icon"})
func DiscAlbum(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <circle cx="12" cy="12" r="5" /> <path d="M12 12h.01" />`, opt)
}

// Divide renders the "divide" icon.
//
// Usage in templates:
//
//	{{ lucide "divide" }}
//
// Direct usage in Go:
//
//	lucide.Divide()
//	lucide.Divide(lucide.Options{Size: 32, Class: "my-icon"})
func Divide(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="6" r="1" /> <line x1="5" x2="19" y1="12" y2="12" /> <circle cx="12" cy="18" r="1" />`, opt)
}

// Dna renders the "dna" icon.
//
// Usage in templates:
//
//	{{ lucide "dna" }}
//
// Direct usage in Go:
//
//	lucide.Dna()
//	lucide.Dna(lucide.Options{Size: 32, Class: "my-icon"})
func Dna(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 16 1.5 1.5" /> <path d="m14 8-1.5-1.5" /> <path d="M15 2c-1.798 1.998-2.518 3.995-2.807 5.993" /> <path d="m16.5 10.5 1 1" /> <path d="m17 6-2.891-2.891" /> <path d="M2 15c6.667-6 13.333 0 20-6" /> <path d="m20 9 .891.891" /> <path d="M3.109 14.109 4 15" /> <path d="m6.5 12.5 1 1" /> <path d="m7 18 2.891 2.891" /> <path d="M9 22c1.798-1.998 2.518-3.995 2.807-5.993" />`, opt)
}

// DnaOff renders the "dna-off" icon.
//
// Usage in templates:
//
//	{{ lucide "dna-off" }}
//
// Direct usage in Go:
//
//	lucide.DnaOff()
//	lucide.DnaOff(lucide.Options{Size: 32, Class: "my-icon"})
func DnaOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2c-1.35 1.5-2.092 3-2.5 4.5L14 8" /> <path d="m17 6-2.891-2.891" /> <path d="M2 15c3.333-3 6.667-3 10-3" /> <path d="m2 2 20 20" /> <path d="m20 9 .891.891" /> <path d="M22 9c-1.5 1.35-3 2.092-4.5 2.5l-1-1" /> <path d="M3.109 14.109 4 15" /> <path d="m6.5 12.5 1 1" /> <path d="m7 18 2.891 2.891" /> <path d="M9 22c1.35-1.5 2.092-3 2.5-4.5L10 16" />`, opt)
}

// Dock renders the "dock" icon.
//
// Usage in templates:
//
//	{{ lucide "dock" }}
//
// Direct usage in Go:
//
//	lucide.Dock()
//	lucide.Dock(lucide.Options{Size: 32, Class: "my-icon"})
func Dock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 8h20" /> <rect width="20" height="16" x="2" y="4" rx="2" /> <path d="M6 16h12" />`, opt)
}

// Dog renders the "dog" icon.
//
// Usage in templates:
//
//	{{ lucide "dog" }}
//
// Direct usage in Go:
//
//	lucide.Dog()
//	lucide.Dog(lucide.Options{Size: 32, Class: "my-icon"})
func Dog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.25 16.25h1.5L12 17z" /> <path d="M16 14v.5" /> <path d="M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444a11.702 11.702 0 0 0-.493-3.309" /> <path d="M8 14v.5" /> <path d="M8.5 8.5c-.384 1.05-1.083 2.028-2.344 2.5-1.931.722-3.576-.297-3.656-1-.113-.994 1.177-6.53 4-7 1.923-.321 3.651.845 3.651 2.235A7.497 7.497 0 0 1 14 5.277c0-1.39 1.844-2.598 3.767-2.277 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5" />`, opt)
}

// DollarSign renders the "dollar-sign" icon.
//
// Usage in templates:
//
//	{{ lucide "dollar-sign" }}
//
// Direct usage in Go:
//
//	lucide.DollarSign()
//	lucide.DollarSign(lucide.Options{Size: 32, Class: "my-icon"})
func DollarSign(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="12" x2="12" y1="2" y2="22" /> <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" />`, opt)
}

// Donut renders the "donut" icon.
//
// Usage in templates:
//
//	{{ lucide "donut" }}
//
// Direct usage in Go:
//
//	lucide.Donut()
//	lucide.Donut(lucide.Options{Size: 32, Class: "my-icon"})
func Donut(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20.5 10a2.5 2.5 0 0 1-2.4-3H18a2.95 2.95 0 0 1-2.6-4.4 10 10 0 1 0 6.3 7.1c-.3.2-.8.3-1.2.3" /> <circle cx="12" cy="12" r="3" />`, opt)
}

// DoorClosed renders the "door-closed" icon.
//
// Usage in templates:
//
//	{{ lucide "door-closed" }}
//
// Direct usage in Go:
//
//	lucide.DoorClosed()
//	lucide.DoorClosed(lucide.Options{Size: 32, Class: "my-icon"})
func DoorClosed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 12h.01" /> <path d="M18 20V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14" /> <path d="M2 20h20" />`, opt)
}

// DoorClosedLocked renders the "door-closed-locked" icon.
//
// Usage in templates:
//
//	{{ lucide "door-closed-locked" }}
//
// Direct usage in Go:
//
//	lucide.DoorClosedLocked()
//	lucide.DoorClosedLocked(lucide.Options{Size: 32, Class: "my-icon"})
func DoorClosedLocked(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 12h.01" /> <path d="M18 9V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14" /> <path d="M2 20h8" /> <path d="M20 17v-2a2 2 0 1 0-4 0v2" /> <rect x="14" y="17" width="8" height="5" rx="1" />`, opt)
}

// DoorOpen renders the "door-open" icon.
//
// Usage in templates:
//
//	{{ lucide "door-open" }}
//
// Direct usage in Go:
//
//	lucide.DoorOpen()
//	lucide.DoorOpen(lucide.Options{Size: 32, Class: "my-icon"})
func DoorOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 20H2" /> <path d="M11 4.562v16.157a1 1 0 0 0 1.242.97L19 20V5.562a2 2 0 0 0-1.515-1.94l-4-1A2 2 0 0 0 11 4.561z" /> <path d="M11 4H8a2 2 0 0 0-2 2v14" /> <path d="M14 12h.01" /> <path d="M22 20h-3" />`, opt)
}

// Dot renders the "dot" icon.
//
// Usage in templates:
//
//	{{ lucide "dot" }}
//
// Direct usage in Go:
//
//	lucide.Dot()
//	lucide.Dot(lucide.Options{Size: 32, Class: "my-icon"})
func Dot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12.1" cy="12.1" r="1" />`, opt)
}

// Download renders the "download" icon.
//
// Usage in templates:
//
//	{{ lucide "download" }}
//
// Direct usage in Go:
//
//	lucide.Download()
//	lucide.Download(lucide.Options{Size: 32, Class: "my-icon"})
func Download(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 15V3" /> <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" /> <path d="m7 10 5 5 5-5" />`, opt)
}

// DraftingCompass renders the "drafting-compass" icon.
//
// Usage in templates:
//
//	{{ lucide "drafting-compass" }}
//
// Direct usage in Go:
//
//	lucide.DraftingCompass()
//	lucide.DraftingCompass(lucide.Options{Size: 32, Class: "my-icon"})
func DraftingCompass(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12.99 6.74 1.93 3.44" /> <path d="M19.136 12a10 10 0 0 1-14.271 0" /> <path d="m21 21-2.16-3.84" /> <path d="m3 21 8.02-14.26" /> <circle cx="12" cy="5" r="2" />`, opt)
}

// Drama renders the "drama" icon.
//
// Usage in templates:
//
//	{{ lucide "drama" }}
//
// Direct usage in Go:
//
//	lucide.Drama()
//	lucide.Drama(lucide.Options{Size: 32, Class: "my-icon"})
func Drama(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 11h.01" /> <path d="M14 6h.01" /> <path d="M18 6h.01" /> <path d="M6.5 13.1h.01" /> <path d="M22 5c0 9-4 12-6 12s-6-3-6-12c0-2 2-3 6-3s6 1 6 3" /> <path d="M17.4 9.9c-.8.8-2 .8-2.8 0" /> <path d="M10.1 7.1C9 7.2 7.7 7.7 6 8.6c-3.5 2-4.7 3.9-3.7 5.6 4.5 7.8 9.5 8.4 11.2 7.4.9-.5 1.9-2.1 1.9-4.7" /> <path d="M9.1 16.5c.3-1.1 1.4-1.7 2.4-1.4" />`, opt)
}

// Dribbble renders the "dribbble" icon.
//
// Usage in templates:
//
//	{{ lucide "dribbble" }}
//
// Direct usage in Go:
//
//	lucide.Dribbble()
//	lucide.Dribbble(lucide.Options{Size: 32, Class: "my-icon"})
func Dribbble(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94" /> <path d="M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32" /> <path d="M8.56 2.75c4.37 6 6 9.42 8 17.72" />`, opt)
}

// Drill renders the "drill" icon.
//
// Usage in templates:
//
//	{{ lucide "drill" }}
//
// Direct usage in Go:
//
//	lucide.Drill()
//	lucide.Drill(lucide.Options{Size: 32, Class: "my-icon"})
func Drill(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 18a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a3 3 0 0 1-3-3 1 1 0 0 1 1-1z" /> <path d="M13 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1l-.81 3.242a1 1 0 0 1-.97.758H8" /> <path d="M14 4h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3" /> <path d="M18 6h4" /> <path d="m5 10-2 8" /> <path d="m7 18 2-8" />`, opt)
}

// Drone renders the "drone" icon.
//
// Usage in templates:
//
//	{{ lucide "drone" }}
//
// Direct usage in Go:
//
//	lucide.Drone()
//	lucide.Drone(lucide.Options{Size: 32, Class: "my-icon"})
func Drone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10 7 7" /> <path d="m10 14-3 3" /> <path d="m14 10 3-3" /> <path d="m14 14 3 3" /> <path d="M14.205 4.139a4 4 0 1 1 5.439 5.863" /> <path d="M19.637 14a4 4 0 1 1-5.432 5.868" /> <path d="M4.367 10a4 4 0 1 1 5.438-5.862" /> <path d="M9.795 19.862a4 4 0 1 1-5.429-5.873" /> <rect x="10" y="8" width="4" height="8" rx="1" />`, opt)
}

// Droplet renders the "droplet" icon.
//
// Usage in templates:
//
//	{{ lucide "droplet" }}
//
// Direct usage in Go:
//
//	lucide.Droplet()
//	lucide.Droplet(lucide.Options{Size: 32, Class: "my-icon"})
func Droplet(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z" />`, opt)
}

// DropletOff renders the "droplet-off" icon.
//
// Usage in templates:
//
//	{{ lucide "droplet-off" }}
//
// Direct usage in Go:
//
//	lucide.DropletOff()
//	lucide.DropletOff(lucide.Options{Size: 32, Class: "my-icon"})
func DropletOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18.715 13.186C18.29 11.858 17.384 10.607 16 9.5c-2-1.6-3.5-4-4-6.5a10.7 10.7 0 0 1-.884 2.586" /> <path d="m2 2 20 20" /> <path d="M8.795 8.797A11 11 0 0 1 8 9.5C6 11.1 5 13 5 15a7 7 0 0 0 13.222 3.208" />`, opt)
}

// Droplets renders the "droplets" icon.
//
// Usage in templates:
//
//	{{ lucide "droplets" }}
//
// Direct usage in Go:
//
//	lucide.Droplets()
//	lucide.Droplets(lucide.Options{Size: 32, Class: "my-icon"})
func Droplets(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z" /> <path d="M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97" />`, opt)
}

// Drum renders the "drum" icon.
//
// Usage in templates:
//
//	{{ lucide "drum" }}
//
// Direct usage in Go:
//
//	lucide.Drum()
//	lucide.Drum(lucide.Options{Size: 32, Class: "my-icon"})
func Drum(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 2 8 8" /> <path d="m22 2-8 8" /> <ellipse cx="12" cy="9" rx="10" ry="5" /> <path d="M7 13.4v7.9" /> <path d="M12 14v8" /> <path d="M17 13.4v7.9" /> <path d="M2 9v8a10 5 0 0 0 20 0V9" />`, opt)
}

// Drumstick renders the "drumstick" icon.
//
// Usage in templates:
//
//	{{ lucide "drumstick" }}
//
// Direct usage in Go:
//
//	lucide.Drumstick()
//	lucide.Drumstick(lucide.Options{Size: 32, Class: "my-icon"})
func Drumstick(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.4 15.63a7.875 6 135 1 1 6.23-6.23 4.5 3.43 135 0 0-6.23 6.23" /> <path d="m8.29 12.71-2.6 2.6a2.5 2.5 0 1 0-1.65 4.65A2.5 2.5 0 1 0 8.7 18.3l2.59-2.59" />`, opt)
}

// Dumbbell renders the "dumbbell" icon.
//
// Usage in templates:
//
//	{{ lucide "dumbbell" }}
//
// Direct usage in Go:
//
//	lucide.Dumbbell()
//	lucide.Dumbbell(lucide.Options{Size: 32, Class: "my-icon"})
func Dumbbell(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.596 12.768a2 2 0 1 0 2.829-2.829l-1.768-1.767a2 2 0 0 0 2.828-2.829l-2.828-2.828a2 2 0 0 0-2.829 2.828l-1.767-1.768a2 2 0 1 0-2.829 2.829z" /> <path d="m2.5 21.5 1.4-1.4" /> <path d="m20.1 3.9 1.4-1.4" /> <path d="M5.343 21.485a2 2 0 1 0 2.829-2.828l1.767 1.768a2 2 0 1 0 2.829-2.829l-6.364-6.364a2 2 0 1 0-2.829 2.829l1.768 1.767a2 2 0 0 0-2.828 2.829z" /> <path d="m9.6 14.4 4.8-4.8" />`, opt)
}

// Ear renders the "ear" icon.
//
// Usage in templates:
//
//	{{ lucide "ear" }}
//
// Direct usage in Go:
//
//	lucide.Ear()
//	lucide.Ear(lucide.Options{Size: 32, Class: "my-icon"})
func Ear(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0" /> <path d="M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4" />`, opt)
}

// EarOff renders the "ear-off" icon.
//
// Usage in templates:
//
//	{{ lucide "ear-off" }}
//
// Direct usage in Go:
//
//	lucide.EarOff()
//	lucide.EarOff(lucide.Options{Size: 32, Class: "my-icon"})
func EarOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46" /> <path d="M6 8.5c0-.75.13-1.47.36-2.14" /> <path d="M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76" /> <path d="M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// Earth renders the "earth" icon.
//
// Usage in templates:
//
//	{{ lucide "earth" }}
//
// Direct usage in Go:
//
//	lucide.Earth()
//	lucide.Earth(lucide.Options{Size: 32, Class: "my-icon"})
func Earth(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.54 15H17a2 2 0 0 0-2 2v4.54" /> <path d="M7 3.34V5a3 3 0 0 0 3 3a2 2 0 0 1 2 2c0 1.1.9 2 2 2a2 2 0 0 0 2-2c0-1.1.9-2 2-2h3.17" /> <path d="M11 21.95V18a2 2 0 0 0-2-2a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// EarthLock renders the "earth-lock" icon.
//
// Usage in templates:
//
//	{{ lucide "earth-lock" }}
//
// Direct usage in Go:
//
//	lucide.EarthLock()
//	lucide.EarthLock(lucide.Options{Size: 32, Class: "my-icon"})
func EarthLock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 3.34V5a3 3 0 0 0 3 3" /> <path d="M11 21.95V18a2 2 0 0 0-2-2 2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05" /> <path d="M21.54 15H17a2 2 0 0 0-2 2v4.54" /> <path d="M12 2a10 10 0 1 0 9.54 13" /> <path d="M20 6V4a2 2 0 1 0-4 0v2" /> <rect width="8" height="5" x="14" y="6" rx="1" />`, opt)
}

// Eclipse renders the "eclipse" icon.
//
// Usage in templates:
//
//	{{ lucide "eclipse" }}
//
// Direct usage in Go:
//
//	lucide.Eclipse()
//	lucide.Eclipse(lucide.Options{Size: 32, Class: "my-icon"})
func Eclipse(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M12 2a7 7 0 1 0 10 10" />`, opt)
}

// Egg renders the "egg" icon.
//
// Usage in templates:
//
//	{{ lucide "egg" }}
//
// Direct usage in Go:
//
//	lucide.Egg()
//	lucide.Egg(lucide.Options{Size: 32, Class: "my-icon"})
func Egg(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2C8 2 4 8 4 14a8 8 0 0 0 16 0c0-6-4-12-8-12" />`, opt)
}

// EggFried renders the "egg-fried" icon.
//
// Usage in templates:
//
//	{{ lucide "egg-fried" }}
//
// Direct usage in Go:
//
//	lucide.EggFried()
//	lucide.EggFried(lucide.Options{Size: 32, Class: "my-icon"})
func EggFried(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="11.5" cy="12.5" r="3.5" /> <path d="M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z" />`, opt)
}

// EggOff renders the "egg-off" icon.
//
// Usage in templates:
//
//	{{ lucide "egg-off" }}
//
// Direct usage in Go:
//
//	lucide.EggOff()
//	lucide.EggOff(lucide.Options{Size: 32, Class: "my-icon"})
func EggOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 2 20 20" /> <path d="M20 14.347V14c0-6-4-12-8-12-1.078 0-2.157.436-3.157 1.19" /> <path d="M6.206 6.21C4.871 8.4 4 11.2 4 14a8 8 0 0 0 14.568 4.568" />`, opt)
}

// Ellipsis renders the "ellipsis" icon.
//
// Usage in templates:
//
//	{{ lucide "ellipsis" }}
//
// Direct usage in Go:
//
//	lucide.Ellipsis()
//	lucide.Ellipsis(lucide.Options{Size: 32, Class: "my-icon"})
func Ellipsis(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="1" /> <circle cx="19" cy="12" r="1" /> <circle cx="5" cy="12" r="1" />`, opt)
}

// EllipsisVertical renders the "ellipsis-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "ellipsis-vertical" }}
//
// Direct usage in Go:
//
//	lucide.EllipsisVertical()
//	lucide.EllipsisVertical(lucide.Options{Size: 32, Class: "my-icon"})
func EllipsisVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="1" /> <circle cx="12" cy="5" r="1" /> <circle cx="12" cy="19" r="1" />`, opt)
}

// Equal renders the "equal" icon.
//
// Usage in templates:
//
//	{{ lucide "equal" }}
//
// Direct usage in Go:
//
//	lucide.Equal()
//	lucide.Equal(lucide.Options{Size: 32, Class: "my-icon"})
func Equal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="5" x2="19" y1="9" y2="9" /> <line x1="5" x2="19" y1="15" y2="15" />`, opt)
}

// EqualApproximately renders the "equal-approximately" icon.
//
// Usage in templates:
//
//	{{ lucide "equal-approximately" }}
//
// Direct usage in Go:
//
//	lucide.EqualApproximately()
//	lucide.EqualApproximately(lucide.Options{Size: 32, Class: "my-icon"})
func EqualApproximately(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 15a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0" /> <path d="M5 9a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0" />`, opt)
}

// EqualNot renders the "equal-not" icon.
//
// Usage in templates:
//
//	{{ lucide "equal-not" }}
//
// Direct usage in Go:
//
//	lucide.EqualNot()
//	lucide.EqualNot(lucide.Options{Size: 32, Class: "my-icon"})
func EqualNot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="5" x2="19" y1="9" y2="9" /> <line x1="5" x2="19" y1="15" y2="15" /> <line x1="19" x2="5" y1="5" y2="19" />`, opt)
}

// Eraser renders the "eraser" icon.
//
// Usage in templates:
//
//	{{ lucide "eraser" }}
//
// Direct usage in Go:
//
//	lucide.Eraser()
//	lucide.Eraser(lucide.Options{Size: 32, Class: "my-icon"})
func Eraser(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 21H8a2 2 0 0 1-1.42-.587l-3.994-3.999a2 2 0 0 1 0-2.828l10-10a2 2 0 0 1 2.829 0l5.999 6a2 2 0 0 1 0 2.828L12.834 21" /> <path d="m5.082 11.09 8.828 8.828" />`, opt)
}

// EthernetPort renders the "ethernet-port" icon.
//
// Usage in templates:
//
//	{{ lucide "ethernet-port" }}
//
// Direct usage in Go:
//
//	lucide.EthernetPort()
//	lucide.EthernetPort(lucide.Options{Size: 32, Class: "my-icon"})
func EthernetPort(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 20 3-3h2a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h2l3 3z" /> <path d="M6 8v1" /> <path d="M10 8v1" /> <path d="M14 8v1" /> <path d="M18 8v1" />`, opt)
}

// Euro renders the "euro" icon.
//
// Usage in templates:
//
//	{{ lucide "euro" }}
//
// Direct usage in Go:
//
//	lucide.Euro()
//	lucide.Euro(lucide.Options{Size: 32, Class: "my-icon"})
func Euro(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 10h12" /> <path d="M4 14h9" /> <path d="M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2" />`, opt)
}

// EvCharger renders the "ev-charger" icon.
//
// Usage in templates:
//
//	{{ lucide "ev-charger" }}
//
// Direct usage in Go:
//
//	lucide.EvCharger()
//	lucide.EvCharger(lucide.Options{Size: 32, Class: "my-icon"})
func EvCharger(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 4 0v-6.998a2 2 0 0 0-.59-1.42L18 5" /> <path d="M14 21V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v16" /> <path d="M2 21h13" /> <path d="M3 7h11" /> <path d="m9 11-2 3h3l-2 3" />`, opt)
}

// Expand renders the "expand" icon.
//
// Usage in templates:
//
//	{{ lucide "expand" }}
//
// Direct usage in Go:
//
//	lucide.Expand()
//	lucide.Expand(lucide.Options{Size: 32, Class: "my-icon"})
func Expand(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 15 6 6" /> <path d="m15 9 6-6" /> <path d="M21 16v5h-5" /> <path d="M21 8V3h-5" /> <path d="M3 16v5h5" /> <path d="m3 21 6-6" /> <path d="M3 8V3h5" /> <path d="M9 9 3 3" />`, opt)
}

// ExternalLink renders the "external-link" icon.
//
// Usage in templates:
//
//	{{ lucide "external-link" }}
//
// Direct usage in Go:
//
//	lucide.ExternalLink()
//	lucide.ExternalLink(lucide.Options{Size: 32, Class: "my-icon"})
func ExternalLink(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 3h6v6" /> <path d="M10 14 21 3" /> <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />`, opt)
}

// Eye renders the "eye" icon.
//
// Usage in templates:
//
//	{{ lucide "eye" }}
//
// Direct usage in Go:
//
//	lucide.Eye()
//	lucide.Eye(lucide.Options{Size: 32, Class: "my-icon"})
func Eye(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0" /> <circle cx="12" cy="12" r="3" />`, opt)
}

// EyeClosed renders the "eye-closed" icon.
//
// Usage in templates:
//
//	{{ lucide "eye-closed" }}
//
// Direct usage in Go:
//
//	lucide.EyeClosed()
//	lucide.EyeClosed(lucide.Options{Size: 32, Class: "my-icon"})
func EyeClosed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 18-.722-3.25" /> <path d="M2 8a10.645 10.645 0 0 0 20 0" /> <path d="m20 15-1.726-2.05" /> <path d="m4 15 1.726-2.05" /> <path d="m9 18 .722-3.25" />`, opt)
}

// EyeOff renders the "eye-off" icon.
//
// Usage in templates:
//
//	{{ lucide "eye-off" }}
//
// Direct usage in Go:
//
//	lucide.EyeOff()
//	lucide.EyeOff(lucide.Options{Size: 32, Class: "my-icon"})
func EyeOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49" /> <path d="M14.084 14.158a3 3 0 0 1-4.242-4.242" /> <path d="M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143" /> <path d="m2 2 20 20" />`, opt)
}

// Facebook renders the "facebook" icon.
//
// Usage in templates:
//
//	{{ lucide "facebook" }}
//
// Direct usage in Go:
//
//	lucide.Facebook()
//	lucide.Facebook(lucide.Options{Size: 32, Class: "my-icon"})
func Facebook(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" />`, opt)
}

// Factory renders the "factory" icon.
//
// Usage in templates:
//
//	{{ lucide "factory" }}
//
// Direct usage in Go:
//
//	lucide.Factory()
//	lucide.Factory(lucide.Options{Size: 32, Class: "my-icon"})
func Factory(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 16h.01" /> <path d="M16 16h.01" /> <path d="M3 19a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8.5a.5.5 0 0 0-.769-.422l-4.462 2.844A.5.5 0 0 1 15 10.5v-2a.5.5 0 0 0-.769-.422L9.77 10.922A.5.5 0 0 1 9 10.5V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2z" /> <path d="M8 16h.01" />`, opt)
}

// Fan renders the "fan" icon.
//
// Usage in templates:
//
//	{{ lucide "fan" }}
//
// Direct usage in Go:
//
//	lucide.Fan()
//	lucide.Fan(lucide.Options{Size: 32, Class: "my-icon"})
func Fan(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z" /> <path d="M12 12v.01" />`, opt)
}

// FastForward renders the "fast-forward" icon.
//
// Usage in templates:
//
//	{{ lucide "fast-forward" }}
//
// Direct usage in Go:
//
//	lucide.FastForward()
//	lucide.FastForward(lucide.Options{Size: 32, Class: "my-icon"})
func FastForward(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6a2 2 0 0 1 3.414-1.414l6 6a2 2 0 0 1 0 2.828l-6 6A2 2 0 0 1 12 18z" /> <path d="M2 6a2 2 0 0 1 3.414-1.414l6 6a2 2 0 0 1 0 2.828l-6 6A2 2 0 0 1 2 18z" />`, opt)
}

// Feather renders the "feather" icon.
//
// Usage in templates:
//
//	{{ lucide "feather" }}
//
// Direct usage in Go:
//
//	lucide.Feather()
//	lucide.Feather(lucide.Options{Size: 32, Class: "my-icon"})
func Feather(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.67 19a2 2 0 0 0 1.416-.588l6.154-6.172a6 6 0 0 0-8.49-8.49L5.586 9.914A2 2 0 0 0 5 11.328V18a1 1 0 0 0 1 1z" /> <path d="M16 8 2 22" /> <path d="M17.5 15H9" />`, opt)
}

// Fence renders the "fence" icon.
//
// Usage in templates:
//
//	{{ lucide "fence" }}
//
// Direct usage in Go:
//
//	lucide.Fence()
//	lucide.Fence(lucide.Options{Size: 32, Class: "my-icon"})
func Fence(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 3 2 5v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z" /> <path d="M6 8h4" /> <path d="M6 18h4" /> <path d="m12 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z" /> <path d="M14 8h4" /> <path d="M14 18h4" /> <path d="m20 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z" />`, opt)
}

// FerrisWheel renders the "ferris-wheel" icon.
//
// Usage in templates:
//
//	{{ lucide "ferris-wheel" }}
//
// Direct usage in Go:
//
//	lucide.FerrisWheel()
//	lucide.FerrisWheel(lucide.Options{Size: 32, Class: "my-icon"})
func FerrisWheel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="2" /> <path d="M12 2v4" /> <path d="m6.8 15-3.5 2" /> <path d="m20.7 7-3.5 2" /> <path d="M6.8 9 3.3 7" /> <path d="m20.7 17-3.5-2" /> <path d="m9 22 3-8 3 8" /> <path d="M8 22h8" /> <path d="M18 18.7a9 9 0 1 0-12 0" />`, opt)
}

// Figma renders the "figma" icon.
//
// Usage in templates:
//
//	{{ lucide "figma" }}
//
// Direct usage in Go:
//
//	lucide.Figma()
//	lucide.Figma(lucide.Options{Size: 32, Class: "my-icon"})
func Figma(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z" /> <path d="M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z" /> <path d="M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z" /> <path d="M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z" /> <path d="M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z" />`, opt)
}

// File renders the "file" icon.
//
// Usage in templates:
//
//	{{ lucide "file" }}
//
// Direct usage in Go:
//
//	lucide.File()
//	lucide.File(lucide.Options{Size: 32, Class: "my-icon"})
func File(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" />`, opt)
}

// FileArchive renders the "file-archive" icon.
//
// Usage in templates:
//
//	{{ lucide "file-archive" }}
//
// Direct usage in Go:
//
//	lucide.FileArchive()
//	lucide.FileArchive(lucide.Options{Size: 32, Class: "my-icon"})
func FileArchive(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 12v-1" /> <path d="M10 18v-2" /> <path d="M10 7V6" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M15.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 .274 1.01" /> <circle cx="10" cy="20" r="2" />`, opt)
}

// FileAudio renders the "file-audio" icon.
//
// Usage in templates:
//
//	{{ lucide "file-audio" }}
//
// Direct usage in Go:
//
//	lucide.FileAudio()
//	lucide.FileAudio(lucide.Options{Size: 32, Class: "my-icon"})
func FileAudio(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.5 22h.5a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M2 19a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0v-4a6 6 0 0 1 12 0v4a2 2 0 1 1-4 0v-1a2 2 0 1 1 4 0" />`, opt)
}

// FileAudio2 renders the "file-audio-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-audio-2" }}
//
// Direct usage in Go:
//
//	lucide.FileAudio2()
//	lucide.FileAudio2(lucide.Options{Size: 32, Class: "my-icon"})
func FileAudio2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <circle cx="3" cy="17" r="1" /> <path d="M2 17v-3a4 4 0 0 1 8 0v3" /> <circle cx="9" cy="17" r="1" />`, opt)
}

// FileAxis3d renders the "file-axis-3d" icon.
//
// Usage in templates:
//
//	{{ lucide "file-axis-3d" }}
//
// Direct usage in Go:
//
//	lucide.FileAxis3d()
//	lucide.FileAxis3d(lucide.Options{Size: 32, Class: "my-icon"})
func FileAxis3d(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m8 18 4-4" /> <path d="M8 10v8h8" />`, opt)
}

// FileBadge renders the "file-badge" icon.
//
// Usage in templates:
//
//	{{ lucide "file-badge" }}
//
// Direct usage in Go:
//
//	lucide.FileBadge()
//	lucide.FileBadge(lucide.Options{Size: 32, Class: "my-icon"})
func FileBadge(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.072" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m6.69 16.479 1.29 4.88a.5.5 0 0 1-.698.591l-1.843-.849a1 1 0 0 0-.88.001l-1.846.85a.5.5 0 0 1-.693-.593l1.29-4.88" /> <circle cx="5" cy="14" r="3" />`, opt)
}

// FileBadge2 renders the "file-badge-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-badge-2" }}
//
// Direct usage in Go:
//
//	lucide.FileBadge2()
//	lucide.FileBadge2(lucide.Options{Size: 32, Class: "my-icon"})
func FileBadge2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m13.69 12.479 1.29 4.88a.5.5 0 0 1-.697.591l-1.844-.849a1 1 0 0 0-.88.001l-1.846.85a.5.5 0 0 1-.693-.593l1.29-4.88" /> <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z" /> <circle cx="12" cy="10" r="3" />`, opt)
}

// FileBox renders the "file-box" icon.
//
// Usage in templates:
//
//	{{ lucide "file-box" }}
//
// Direct usage in Go:
//
//	lucide.FileBox()
//	lucide.FileBox(lucide.Options{Size: 32, Class: "my-icon"})
func FileBox(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M3 13.1a2 2 0 0 0-1 1.76v3.24a2 2 0 0 0 .97 1.78L6 21.7a2 2 0 0 0 2.03.01L11 19.9a2 2 0 0 0 1-1.76V14.9a2 2 0 0 0-.97-1.78L8 11.3a2 2 0 0 0-2.03-.01Z" /> <path d="M7 17v5" /> <path d="M11.7 14.2 7 17l-4.7-2.8" />`, opt)
}

// FileChartColumn renders the "file-chart-column" icon.
//
// Usage in templates:
//
//	{{ lucide "file-chart-column" }}
//
// Direct usage in Go:
//
//	lucide.FileChartColumn()
//	lucide.FileChartColumn(lucide.Options{Size: 32, Class: "my-icon"})
func FileChartColumn(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M8 18v-1" /> <path d="M12 18v-6" /> <path d="M16 18v-3" />`, opt)
}

// FileChartColumnIncreasing renders the "file-chart-column-increasing" icon.
//
// Usage in templates:
//
//	{{ lucide "file-chart-column-increasing" }}
//
// Direct usage in Go:
//
//	lucide.FileChartColumnIncreasing()
//	lucide.FileChartColumnIncreasing(lucide.Options{Size: 32, Class: "my-icon"})
func FileChartColumnIncreasing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M8 18v-2" /> <path d="M12 18v-4" /> <path d="M16 18v-6" />`, opt)
}

// FileChartLine renders the "file-chart-line" icon.
//
// Usage in templates:
//
//	{{ lucide "file-chart-line" }}
//
// Direct usage in Go:
//
//	lucide.FileChartLine()
//	lucide.FileChartLine(lucide.Options{Size: 32, Class: "my-icon"})
func FileChartLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m16 13-3.5 3.5-2-2L8 17" />`, opt)
}

// FileChartPie renders the "file-chart-pie" icon.
//
// Usage in templates:
//
//	{{ lucide "file-chart-pie" }}
//
// Direct usage in Go:
//
//	lucide.FileChartPie()
//	lucide.FileChartPie(lucide.Options{Size: 32, Class: "my-icon"})
func FileChartPie(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.5" /> <path d="M4.017 11.512a6 6 0 1 0 8.466 8.475" /> <path d="M9 16a1 1 0 0 1-1-1v-4c0-.552.45-1.008.995-.917a6 6 0 0 1 4.922 4.922c.091.544-.365.995-.917.995z" />`, opt)
}

// FileCheck renders the "file-check" icon.
//
// Usage in templates:
//
//	{{ lucide "file-check" }}
//
// Direct usage in Go:
//
//	lucide.FileCheck()
//	lucide.FileCheck(lucide.Options{Size: 32, Class: "my-icon"})
func FileCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m9 15 2 2 4-4" />`, opt)
}

// FileCheck2 renders the "file-check-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-check-2" }}
//
// Direct usage in Go:
//
//	lucide.FileCheck2()
//	lucide.FileCheck2(lucide.Options{Size: 32, Class: "my-icon"})
func FileCheck2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m3 15 2 2 4-4" />`, opt)
}

// FileClock renders the "file-clock" icon.
//
// Usage in templates:
//
//	{{ lucide "file-clock" }}
//
// Direct usage in Go:
//
//	lucide.FileClock()
//	lucide.FileClock(lucide.Options{Size: 32, Class: "my-icon"})
func FileClock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3" /> <path d="M8 14v2.2l1.6 1" /> <circle cx="8" cy="16" r="6" />`, opt)
}

// FileCode renders the "file-code" icon.
//
// Usage in templates:
//
//	{{ lucide "file-code" }}
//
// Direct usage in Go:
//
//	lucide.FileCode()
//	lucide.FileCode(lucide.Options{Size: 32, Class: "my-icon"})
func FileCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 12.5 8 15l2 2.5" /> <path d="m14 12.5 2 2.5-2 2.5" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z" />`, opt)
}

// FileCode2 renders the "file-code-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-code-2" }}
//
// Direct usage in Go:
//
//	lucide.FileCode2()
//	lucide.FileCode2(lucide.Options{Size: 32, Class: "my-icon"})
func FileCode2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m5 12-3 3 3 3" /> <path d="m9 18 3-3-3-3" />`, opt)
}

// FileCog renders the "file-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "file-cog" }}
//
// Direct usage in Go:
//
//	lucide.FileCog()
//	lucide.FileCog(lucide.Options{Size: 32, Class: "my-icon"})
func FileCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m2.305 15.53.923-.382" /> <path d="m3.228 12.852-.924-.383" /> <path d="M4.677 21.5a2 2 0 0 0 1.313.5H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2.5" /> <path d="m4.852 11.228-.383-.923" /> <path d="m4.852 16.772-.383.924" /> <path d="m7.148 11.228.383-.923" /> <path d="m7.53 17.696-.382-.924" /> <path d="m8.772 12.852.923-.383" /> <path d="m8.772 15.148.923.383" /> <circle cx="6" cy="14" r="3" />`, opt)
}

// FileDiff renders the "file-diff" icon.
//
// Usage in templates:
//
//	{{ lucide "file-diff" }}
//
// Direct usage in Go:
//
//	lucide.FileDiff()
//	lucide.FileDiff(lucide.Options{Size: 32, Class: "my-icon"})
func FileDiff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M9 10h6" /> <path d="M12 13V7" /> <path d="M9 17h6" />`, opt)
}

// FileDigit renders the "file-digit" icon.
//
// Usage in templates:
//
//	{{ lucide "file-digit" }}
//
// Direct usage in Go:
//
//	lucide.FileDigit()
//	lucide.FileDigit(lucide.Options{Size: 32, Class: "my-icon"})
func FileDigit(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <rect width="4" height="6" x="2" y="12" rx="2" /> <path d="M10 12h2v6" /> <path d="M10 18h4" />`, opt)
}

// FileDown renders the "file-down" icon.
//
// Usage in templates:
//
//	{{ lucide "file-down" }}
//
// Direct usage in Go:
//
//	lucide.FileDown()
//	lucide.FileDown(lucide.Options{Size: 32, Class: "my-icon"})
func FileDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M12 18v-6" /> <path d="m9 15 3 3 3-3" />`, opt)
}

// FileHeart renders the "file-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "file-heart" }}
//
// Direct usage in Go:
//
//	lucide.FileHeart()
//	lucide.FileHeart(lucide.Options{Size: 32, Class: "my-icon"})
func FileHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M2.62 13.8A2.25 2.25 0 1 1 6 10.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z" /> <path d="M4 6.005V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-1.9-1.376" />`, opt)
}

// FileImage renders the "file-image" icon.
//
// Usage in templates:
//
//	{{ lucide "file-image" }}
//
// Direct usage in Go:
//
//	lucide.FileImage()
//	lucide.FileImage(lucide.Options{Size: 32, Class: "my-icon"})
func FileImage(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <circle cx="10" cy="12" r="2" /> <path d="m20 17-1.296-1.296a2.41 2.41 0 0 0-3.408 0L9 22" />`, opt)
}

// FileInput renders the "file-input" icon.
//
// Usage in templates:
//
//	{{ lucide "file-input" }}
//
// Direct usage in Go:
//
//	lucide.FileInput()
//	lucide.FileInput(lucide.Options{Size: 32, Class: "my-icon"})
func FileInput(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M2 15h10" /> <path d="m9 18 3-3-3-3" />`, opt)
}

// FileJson renders the "file-json" icon.
//
// Usage in templates:
//
//	{{ lucide "file-json" }}
//
// Direct usage in Go:
//
//	lucide.FileJson()
//	lucide.FileJson(lucide.Options{Size: 32, Class: "my-icon"})
func FileJson(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1" /> <path d="M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1" />`, opt)
}

// FileJson2 renders the "file-json-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-json-2" }}
//
// Direct usage in Go:
//
//	lucide.FileJson2()
//	lucide.FileJson2(lucide.Options{Size: 32, Class: "my-icon"})
func FileJson2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1" /> <path d="M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1" />`, opt)
}

// FileKey renders the "file-key" icon.
//
// Usage in templates:
//
//	{{ lucide "file-key" }}
//
// Direct usage in Go:
//
//	lucide.FileKey()
//	lucide.FileKey(lucide.Options{Size: 32, Class: "my-icon"})
func FileKey(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <circle cx="10" cy="16" r="2" /> <path d="m16 10-4.5 4.5" /> <path d="m15 11 1 1" />`, opt)
}

// FileKey2 renders the "file-key-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-key-2" }}
//
// Direct usage in Go:
//
//	lucide.FileKey2()
//	lucide.FileKey2(lucide.Options{Size: 32, Class: "my-icon"})
func FileKey2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v6" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <circle cx="4" cy="16" r="2" /> <path d="m10 10-4.5 4.5" /> <path d="m9 11 1 1" />`, opt)
}

// FileLock renders the "file-lock" icon.
//
// Usage in templates:
//
//	{{ lucide "file-lock" }}
//
// Direct usage in Go:
//
//	lucide.FileLock()
//	lucide.FileLock(lucide.Options{Size: 32, Class: "my-icon"})
func FileLock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <rect width="8" height="6" x="8" y="12" rx="1" /> <path d="M10 12v-2a2 2 0 1 1 4 0v2" />`, opt)
}

// FileLock2 renders the "file-lock-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-lock-2" }}
//
// Direct usage in Go:
//
//	lucide.FileLock2()
//	lucide.FileLock2(lucide.Options{Size: 32, Class: "my-icon"})
func FileLock2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v1" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <rect width="8" height="5" x="2" y="13" rx="1" /> <path d="M8 13v-2a2 2 0 1 0-4 0v2" />`, opt)
}

// FileMinus renders the "file-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "file-minus" }}
//
// Direct usage in Go:
//
//	lucide.FileMinus()
//	lucide.FileMinus(lucide.Options{Size: 32, Class: "my-icon"})
func FileMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M9 15h6" />`, opt)
}

// FileMinus2 renders the "file-minus-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-minus-2" }}
//
// Direct usage in Go:
//
//	lucide.FileMinus2()
//	lucide.FileMinus2(lucide.Options{Size: 32, Class: "my-icon"})
func FileMinus2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M3 15h6" />`, opt)
}

// FileMusic renders the "file-music" icon.
//
// Usage in templates:
//
//	{{ lucide "file-music" }}
//
// Direct usage in Go:
//
//	lucide.FileMusic()
//	lucide.FileMusic(lucide.Options{Size: 32, Class: "my-icon"})
func FileMusic(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v8.4" /> <path d="M8 18v-7.7L16 9v7" /> <circle cx="14" cy="16" r="2" /> <circle cx="6" cy="18" r="2" />`, opt)
}

// FileOutput renders the "file-output" icon.
//
// Usage in templates:
//
//	{{ lucide "file-output" }}
//
// Direct usage in Go:
//
//	lucide.FileOutput()
//	lucide.FileOutput(lucide.Options{Size: 32, Class: "my-icon"})
func FileOutput(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M4 7V4a2 2 0 0 1 2-2 2 2 0 0 0-2 2" /> <path d="M4.063 20.999a2 2 0 0 0 2 1L18 22a2 2 0 0 0 2-2V7l-5-5H6" /> <path d="m5 11-3 3" /> <path d="m5 17-3-3h10" />`, opt)
}

// FilePen renders the "file-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "file-pen" }}
//
// Direct usage in Go:
//
//	lucide.FilePen()
//	lucide.FilePen(lucide.Options{Size: 32, Class: "my-icon"})
func FilePen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v9.5" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" />`, opt)
}

// FilePenLine renders the "file-pen-line" icon.
//
// Usage in templates:
//
//	{{ lucide "file-pen-line" }}
//
// Direct usage in Go:
//
//	lucide.FilePenLine()
//	lucide.FilePenLine(lucide.Options{Size: 32, Class: "my-icon"})
func FilePenLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18 5-2.414-2.414A2 2 0 0 0 14.172 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2" /> <path d="M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" /> <path d="M8 18h1" />`, opt)
}

// FilePlay renders the "file-play" icon.
//
// Usage in templates:
//
//	{{ lucide "file-play" }}
//
// Direct usage in Go:
//
//	lucide.FilePlay()
//	lucide.FilePlay(lucide.Options{Size: 32, Class: "my-icon"})
func FilePlay(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z" /> <path d="M15.033 13.44a.647.647 0 0 1 0 1.12l-4.065 2.352a.645.645 0 0 1-.968-.56v-4.704a.645.645 0 0 1 .967-.56z" />`, opt)
}

// FilePlus renders the "file-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "file-plus" }}
//
// Direct usage in Go:
//
//	lucide.FilePlus()
//	lucide.FilePlus(lucide.Options{Size: 32, Class: "my-icon"})
func FilePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M9 15h6" /> <path d="M12 18v-6" />`, opt)
}

// FilePlus2 renders the "file-plus-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-plus-2" }}
//
// Direct usage in Go:
//
//	lucide.FilePlus2()
//	lucide.FilePlus2(lucide.Options{Size: 32, Class: "my-icon"})
func FilePlus2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M3 15h6" /> <path d="M6 12v6" />`, opt)
}

// FileQuestionMark renders the "file-question-mark" icon.
//
// Usage in templates:
//
//	{{ lucide "file-question-mark" }}
//
// Direct usage in Go:
//
//	lucide.FileQuestionMark()
//	lucide.FileQuestionMark(lucide.Options{Size: 32, Class: "my-icon"})
func FileQuestionMark(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17h.01" /> <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z" /> <path d="M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3" />`, opt)
}

// FileScan renders the "file-scan" icon.
//
// Usage in templates:
//
//	{{ lucide "file-scan" }}
//
// Direct usage in Go:
//
//	lucide.FileScan()
//	lucide.FileScan(lucide.Options{Size: 32, Class: "my-icon"})
func FileScan(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 10V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M16 14a2 2 0 0 0-2 2" /> <path d="M20 14a2 2 0 0 1 2 2" /> <path d="M20 22a2 2 0 0 0 2-2" /> <path d="M16 22a2 2 0 0 1-2-2" />`, opt)
}

// FileSearch renders the "file-search" icon.
//
// Usage in templates:
//
//	{{ lucide "file-search" }}
//
// Direct usage in Go:
//
//	lucide.FileSearch()
//	lucide.FileSearch(lucide.Options{Size: 32, Class: "my-icon"})
func FileSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M4.268 21a2 2 0 0 0 1.727 1H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3" /> <path d="m9 18-1.5-1.5" /> <circle cx="5" cy="14" r="3" />`, opt)
}

// FileSearch2 renders the "file-search-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-search-2" }}
//
// Direct usage in Go:
//
//	lucide.FileSearch2()
//	lucide.FileSearch2(lucide.Options{Size: 32, Class: "my-icon"})
func FileSearch2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <circle cx="11.5" cy="14.5" r="2.5" /> <path d="M13.3 16.3 15 18" />`, opt)
}

// FileSliders renders the "file-sliders" icon.
//
// Usage in templates:
//
//	{{ lucide "file-sliders" }}
//
// Direct usage in Go:
//
//	lucide.FileSliders()
//	lucide.FileSliders(lucide.Options{Size: 32, Class: "my-icon"})
func FileSliders(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M8 12h8" /> <path d="M10 11v2" /> <path d="M8 17h8" /> <path d="M14 16v2" />`, opt)
}

// FileSpreadsheet renders the "file-spreadsheet" icon.
//
// Usage in templates:
//
//	{{ lucide "file-spreadsheet" }}
//
// Direct usage in Go:
//
//	lucide.FileSpreadsheet()
//	lucide.FileSpreadsheet(lucide.Options{Size: 32, Class: "my-icon"})
func FileSpreadsheet(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M8 13h2" /> <path d="M14 13h2" /> <path d="M8 17h2" /> <path d="M14 17h2" />`, opt)
}

// FileStack renders the "file-stack" icon.
//
// Usage in templates:
//
//	{{ lucide "file-stack" }}
//
// Direct usage in Go:
//
//	lucide.FileStack()
//	lucide.FileStack(lucide.Options{Size: 32, Class: "my-icon"})
func FileStack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 21a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-8a1 1 0 0 1 1-1" /> <path d="M16 16a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1" /> <path d="M21 6a2 2 0 0 0-.586-1.414l-2-2A2 2 0 0 0 17 2h-3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1z" />`, opt)
}

// FileSymlink renders the "file-symlink" icon.
//
// Usage in templates:
//
//	{{ lucide "file-symlink" }}
//
// Direct usage in Go:
//
//	lucide.FileSymlink()
//	lucide.FileSymlink(lucide.Options{Size: 32, Class: "my-icon"})
func FileSymlink(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 18 3-3-3-3" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M4 11V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7" />`, opt)
}

// FileTerminal renders the "file-terminal" icon.
//
// Usage in templates:
//
//	{{ lucide "file-terminal" }}
//
// Direct usage in Go:
//
//	lucide.FileTerminal()
//	lucide.FileTerminal(lucide.Options{Size: 32, Class: "my-icon"})
func FileTerminal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m8 16 2-2-2-2" /> <path d="M12 18h4" />`, opt)
}

// FileText renders the "file-text" icon.
//
// Usage in templates:
//
//	{{ lucide "file-text" }}
//
// Direct usage in Go:
//
//	lucide.FileText()
//	lucide.FileText(lucide.Options{Size: 32, Class: "my-icon"})
func FileText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M10 9H8" /> <path d="M16 13H8" /> <path d="M16 17H8" />`, opt)
}

// FileType renders the "file-type" icon.
//
// Usage in templates:
//
//	{{ lucide "file-type" }}
//
// Direct usage in Go:
//
//	lucide.FileType()
//	lucide.FileType(lucide.Options{Size: 32, Class: "my-icon"})
func FileType(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M9 13v-1h6v1" /> <path d="M12 12v6" /> <path d="M11 18h2" />`, opt)
}

// FileType2 renders the "file-type-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-type-2" }}
//
// Direct usage in Go:
//
//	lucide.FileType2()
//	lucide.FileType2(lucide.Options{Size: 32, Class: "my-icon"})
func FileType2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M2 13v-1h6v1" /> <path d="M5 12v6" /> <path d="M4 18h2" />`, opt)
}

// FileUp renders the "file-up" icon.
//
// Usage in templates:
//
//	{{ lucide "file-up" }}
//
// Direct usage in Go:
//
//	lucide.FileUp()
//	lucide.FileUp(lucide.Options{Size: 32, Class: "my-icon"})
func FileUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M12 12v6" /> <path d="m15 15-3-3-3 3" />`, opt)
}

// FileUser renders the "file-user" icon.
//
// Usage in templates:
//
//	{{ lucide "file-user" }}
//
// Direct usage in Go:
//
//	lucide.FileUser()
//	lucide.FileUser(lucide.Options{Size: 32, Class: "my-icon"})
func FileUser(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M15 18a3 3 0 1 0-6 0" /> <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z" /> <circle cx="12" cy="13" r="2" />`, opt)
}

// FileVideoCamera renders the "file-video-camera" icon.
//
// Usage in templates:
//
//	{{ lucide "file-video-camera" }}
//
// Direct usage in Go:
//
//	lucide.FileVideoCamera()
//	lucide.FileVideoCamera(lucide.Options{Size: 32, Class: "my-icon"})
func FileVideoCamera(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <rect width="8" height="6" x="2" y="12" rx="1" /> <path d="m10 13.843 3.033-1.755a.645.645 0 0 1 .967.56v4.704a.645.645 0 0 1-.967.56L10 16.157" />`, opt)
}

// FileVolume renders the "file-volume" icon.
//
// Usage in templates:
//
//	{{ lucide "file-volume" }}
//
// Direct usage in Go:
//
//	lucide.FileVolume()
//	lucide.FileVolume(lucide.Options{Size: 32, Class: "my-icon"})
func FileVolume(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 11a5 5 0 0 1 0 6" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M4 6.765V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-.93-.23" /> <path d="M7 10.51a.5.5 0 0 0-.826-.38l-1.893 1.628A1 1 0 0 1 3.63 12H2.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h1.129a1 1 0 0 1 .652.242l1.893 1.63a.5.5 0 0 0 .826-.38z" />`, opt)
}

// FileVolume2 renders the "file-volume-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-volume-2" }}
//
// Direct usage in Go:
//
//	lucide.FileVolume2()
//	lucide.FileVolume2(lucide.Options{Size: 32, Class: "my-icon"})
func FileVolume2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M8 15h.01" /> <path d="M11.5 13.5a2.5 2.5 0 0 1 0 3" /> <path d="M15 12a5 5 0 0 1 0 6" />`, opt)
}

// FileWarning renders the "file-warning" icon.
//
// Usage in templates:
//
//	{{ lucide "file-warning" }}
//
// Direct usage in Go:
//
//	lucide.FileWarning()
//	lucide.FileWarning(lucide.Options{Size: 32, Class: "my-icon"})
func FileWarning(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M12 9v4" /> <path d="M12 17h.01" />`, opt)
}

// FileX renders the "file-x" icon.
//
// Usage in templates:
//
//	{{ lucide "file-x" }}
//
// Direct usage in Go:
//
//	lucide.FileX()
//	lucide.FileX(lucide.Options{Size: 32, Class: "my-icon"})
func FileX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m14.5 12.5-5 5" /> <path d="m9.5 12.5 5 5" />`, opt)
}

// FileX2 renders the "file-x-2" icon.
//
// Usage in templates:
//
//	{{ lucide "file-x-2" }}
//
// Direct usage in Go:
//
//	lucide.FileX2()
//	lucide.FileX2(lucide.Options{Size: 32, Class: "my-icon"})
func FileX2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="m8 12.5-5 5" /> <path d="m3 12.5 5 5" />`, opt)
}

// Files renders the "files" icon.
//
// Usage in templates:
//
//	{{ lucide "files" }}
//
// Direct usage in Go:
//
//	lucide.Files()
//	lucide.Files(lucide.Options{Size: 32, Class: "my-icon"})
func Files(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 2a2 2 0 0 1 1.414.586l4 4A2 2 0 0 1 21 8v7a2 2 0 0 1-2 2h-8a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2z" /> <path d="M15 2v4a2 2 0 0 0 2 2h4" /> <path d="M5 7a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h8a2 2 0 0 0 1.732-1" />`, opt)
}

// Film renders the "film" icon.
//
// Usage in templates:
//
//	{{ lucide "film" }}
//
// Direct usage in Go:
//
//	lucide.Film()
//	lucide.Film(lucide.Options{Size: 32, Class: "my-icon"})
func Film(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M7 3v18" /> <path d="M3 7.5h4" /> <path d="M3 12h18" /> <path d="M3 16.5h4" /> <path d="M17 3v18" /> <path d="M17 7.5h4" /> <path d="M17 16.5h4" />`, opt)
}

// Fingerprint renders the "fingerprint" icon.
//
// Usage in templates:
//
//	{{ lucide "fingerprint" }}
//
// Direct usage in Go:
//
//	lucide.Fingerprint()
//	lucide.Fingerprint(lucide.Options{Size: 32, Class: "my-icon"})
func Fingerprint(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4" /> <path d="M14 13.12c0 2.38 0 6.38-1 8.88" /> <path d="M17.29 21.02c.12-.6.43-2.3.5-3.02" /> <path d="M2 12a10 10 0 0 1 18-6" /> <path d="M2 16h.01" /> <path d="M21.8 16c.2-2 .131-5.354 0-6" /> <path d="M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2" /> <path d="M8.65 22c.21-.66.45-1.32.57-2" /> <path d="M9 6.8a6 6 0 0 1 9 5.2v2" />`, opt)
}

// FireExtinguisher renders the "fire-extinguisher" icon.
//
// Usage in templates:
//
//	{{ lucide "fire-extinguisher" }}
//
// Direct usage in Go:
//
//	lucide.FireExtinguisher()
//	lucide.FireExtinguisher(lucide.Options{Size: 32, Class: "my-icon"})
func FireExtinguisher(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 6.5V3a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3.5" /> <path d="M9 18h8" /> <path d="M18 3h-3" /> <path d="M11 3a6 6 0 0 0-6 6v11" /> <path d="M5 13h4" /> <path d="M17 10a4 4 0 0 0-8 0v10a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2Z" />`, opt)
}

// Fish renders the "fish" icon.
//
// Usage in templates:
//
//	{{ lucide "fish" }}
//
// Direct usage in Go:
//
//	lucide.Fish()
//	lucide.Fish(lucide.Options{Size: 32, Class: "my-icon"})
func Fish(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z" /> <path d="M18 12v.5" /> <path d="M16 17.93a9.77 9.77 0 0 1 0-11.86" /> <path d="M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33" /> <path d="M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4" /> <path d="m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98" />`, opt)
}

// FishOff renders the "fish-off" icon.
//
// Usage in templates:
//
//	{{ lucide "fish-off" }}
//
// Direct usage in Go:
//
//	lucide.FishOff()
//	lucide.FishOff(lucide.Options{Size: 32, Class: "my-icon"})
func FishOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 12.47v.03m0-.5v.47m-.475 5.056A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38m3.444-2.088A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058" /> <path d="M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33m7.48-4.372A9.77 9.77 0 0 1 16 6.07m0 11.86a9.77 9.77 0 0 1-1.728-3.618" /> <path d="m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20" />`, opt)
}

// FishSymbol renders the "fish-symbol" icon.
//
// Usage in templates:
//
//	{{ lucide "fish-symbol" }}
//
// Direct usage in Go:
//
//	lucide.FishSymbol()
//	lucide.FishSymbol(lucide.Options{Size: 32, Class: "my-icon"})
func FishSymbol(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 16s9-15 20-4C11 23 2 8 2 8" />`, opt)
}

// Flag renders the "flag" icon.
//
// Usage in templates:
//
//	{{ lucide "flag" }}
//
// Direct usage in Go:
//
//	lucide.Flag()
//	lucide.Flag(lucide.Options{Size: 32, Class: "my-icon"})
func Flag(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22V4a1 1 0 0 1 .4-.8A6 6 0 0 1 8 2c3 0 5 2 7.333 2q2 0 3.067-.8A1 1 0 0 1 20 4v10a1 1 0 0 1-.4.8A6 6 0 0 1 16 16c-3 0-5-2-8-2a6 6 0 0 0-4 1.528" />`, opt)
}

// FlagOff renders the "flag-off" icon.
//
// Usage in templates:
//
//	{{ lucide "flag-off" }}
//
// Direct usage in Go:
//
//	lucide.FlagOff()
//	lucide.FlagOff(lucide.Options{Size: 32, Class: "my-icon"})
func FlagOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 16c-3 0-5-2-8-2a6 6 0 0 0-4 1.528" /> <path d="m2 2 20 20" /> <path d="M4 22V4" /> <path d="M7.656 2H8c3 0 5 2 7.333 2q2 0 3.067-.8A1 1 0 0 1 20 4v10.347" />`, opt)
}

// FlagTriangleLeft renders the "flag-triangle-left" icon.
//
// Usage in templates:
//
//	{{ lucide "flag-triangle-left" }}
//
// Direct usage in Go:
//
//	lucide.FlagTriangleLeft()
//	lucide.FlagTriangleLeft(lucide.Options{Size: 32, Class: "my-icon"})
func FlagTriangleLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 22V2.8a.8.8 0 0 0-1.17-.71L5.45 7.78a.8.8 0 0 0 0 1.44L18 15.5" />`, opt)
}

// FlagTriangleRight renders the "flag-triangle-right" icon.
//
// Usage in templates:
//
//	{{ lucide "flag-triangle-right" }}
//
// Direct usage in Go:
//
//	lucide.FlagTriangleRight()
//	lucide.FlagTriangleRight(lucide.Options{Size: 32, Class: "my-icon"})
func FlagTriangleRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 22V2.8a.8.8 0 0 1 1.17-.71l11.38 5.69a.8.8 0 0 1 0 1.44L6 15.5" />`, opt)
}

// Flame renders the "flame" icon.
//
// Usage in templates:
//
//	{{ lucide "flame" }}
//
// Direct usage in Go:
//
//	lucide.Flame()
//	lucide.Flame(lucide.Options{Size: 32, Class: "my-icon"})
func Flame(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3q1 4 4 6.5t3 5.5a1 1 0 0 1-14 0 5 5 0 0 1 1-3 1 1 0 0 0 5 0c0-2-1.5-3-1.5-5q0-2 2.5-4" />`, opt)
}

// FlameKindling renders the "flame-kindling" icon.
//
// Usage in templates:
//
//	{{ lucide "flame-kindling" }}
//
// Direct usage in Go:
//
//	lucide.FlameKindling()
//	lucide.FlameKindling(lucide.Options{Size: 32, Class: "my-icon"})
func FlameKindling(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 17 10a5 5 0 1 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C8 4.5 11 2 12 2Z" /> <path d="m5 22 14-4" /> <path d="m5 18 14 4" />`, opt)
}

// Flashlight renders the "flashlight" icon.
//
// Usage in templates:
//
//	{{ lucide "flashlight" }}
//
// Direct usage in Go:
//
//	lucide.Flashlight()
//	lucide.Flashlight(lucide.Options{Size: 32, Class: "my-icon"})
func Flashlight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z" /> <line x1="6" x2="18" y1="6" y2="6" /> <line x1="12" x2="12" y1="12" y2="12" />`, opt)
}

// FlashlightOff renders the "flashlight-off" icon.
//
// Usage in templates:
//
//	{{ lucide "flashlight-off" }}
//
// Direct usage in Go:
//
//	lucide.FlashlightOff()
//	lucide.FlashlightOff(lucide.Options{Size: 32, Class: "my-icon"})
func FlashlightOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4" /> <path d="M7 2h11v4c0 2-2 2-2 4v1" /> <line x1="11" x2="18" y1="6" y2="6" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// FlaskConical renders the "flask-conical" icon.
//
// Usage in templates:
//
//	{{ lucide "flask-conical" }}
//
// Direct usage in Go:
//
//	lucide.FlaskConical()
//	lucide.FlaskConical(lucide.Options{Size: 32, Class: "my-icon"})
func FlaskConical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 2v6a2 2 0 0 0 .245.96l5.51 10.08A2 2 0 0 1 18 22H6a2 2 0 0 1-1.755-2.96l5.51-10.08A2 2 0 0 0 10 8V2" /> <path d="M6.453 15h11.094" /> <path d="M8.5 2h7" />`, opt)
}

// FlaskConicalOff renders the "flask-conical-off" icon.
//
// Usage in templates:
//
//	{{ lucide "flask-conical-off" }}
//
// Direct usage in Go:
//
//	lucide.FlaskConicalOff()
//	lucide.FlaskConicalOff(lucide.Options{Size: 32, Class: "my-icon"})
func FlaskConicalOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v2.343" /> <path d="M14 2v6.343" /> <path d="m2 2 20 20" /> <path d="M20 20a2 2 0 0 1-2 2H6a2 2 0 0 1-1.755-2.96l5.227-9.563" /> <path d="M6.453 15H15" /> <path d="M8.5 2h7" />`, opt)
}

// FlaskRound renders the "flask-round" icon.
//
// Usage in templates:
//
//	{{ lucide "flask-round" }}
//
// Direct usage in Go:
//
//	lucide.FlaskRound()
//	lucide.FlaskRound(lucide.Options{Size: 32, Class: "my-icon"})
func FlaskRound(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v6.292a7 7 0 1 0 4 0V2" /> <path d="M5 15h14" /> <path d="M8.5 2h7" />`, opt)
}

// FlipHorizontal renders the "flip-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "flip-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.FlipHorizontal()
//	lucide.FlipHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func FlipHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3" /> <path d="M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3" /> <path d="M12 20v2" /> <path d="M12 14v2" /> <path d="M12 8v2" /> <path d="M12 2v2" />`, opt)
}

// FlipHorizontal2 renders the "flip-horizontal-2" icon.
//
// Usage in templates:
//
//	{{ lucide "flip-horizontal-2" }}
//
// Direct usage in Go:
//
//	lucide.FlipHorizontal2()
//	lucide.FlipHorizontal2(lucide.Options{Size: 32, Class: "my-icon"})
func FlipHorizontal2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m3 7 5 5-5 5V7" /> <path d="m21 7-5 5 5 5V7" /> <path d="M12 20v2" /> <path d="M12 14v2" /> <path d="M12 8v2" /> <path d="M12 2v2" />`, opt)
}

// FlipVertical renders the "flip-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "flip-vertical" }}
//
// Direct usage in Go:
//
//	lucide.FlipVertical()
//	lucide.FlipVertical(lucide.Options{Size: 32, Class: "my-icon"})
func FlipVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3" /> <path d="M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3" /> <path d="M4 12H2" /> <path d="M10 12H8" /> <path d="M16 12h-2" /> <path d="M22 12h-2" />`, opt)
}

// FlipVertical2 renders the "flip-vertical-2" icon.
//
// Usage in templates:
//
//	{{ lucide "flip-vertical-2" }}
//
// Direct usage in Go:
//
//	lucide.FlipVertical2()
//	lucide.FlipVertical2(lucide.Options{Size: 32, Class: "my-icon"})
func FlipVertical2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 3-5 5-5-5h10" /> <path d="m17 21-5-5-5 5h10" /> <path d="M4 12H2" /> <path d="M10 12H8" /> <path d="M16 12h-2" /> <path d="M22 12h-2" />`, opt)
}

// Flower renders the "flower" icon.
//
// Usage in templates:
//
//	{{ lucide "flower" }}
//
// Direct usage in Go:
//
//	lucide.Flower()
//	lucide.Flower(lucide.Options{Size: 32, Class: "my-icon"})
func Flower(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="3" /> <path d="M12 16.5A4.5 4.5 0 1 1 7.5 12 4.5 4.5 0 1 1 12 7.5a4.5 4.5 0 1 1 4.5 4.5 4.5 4.5 0 1 1-4.5 4.5" /> <path d="M12 7.5V9" /> <path d="M7.5 12H9" /> <path d="M16.5 12H15" /> <path d="M12 16.5V15" /> <path d="m8 8 1.88 1.88" /> <path d="M14.12 9.88 16 8" /> <path d="m8 16 1.88-1.88" /> <path d="M14.12 14.12 16 16" />`, opt)
}

// Flower2 renders the "flower-2" icon.
//
// Usage in templates:
//
//	{{ lucide "flower-2" }}
//
// Direct usage in Go:
//
//	lucide.Flower2()
//	lucide.Flower2(lucide.Options{Size: 32, Class: "my-icon"})
func Flower2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1" /> <circle cx="12" cy="8" r="2" /> <path d="M12 10v12" /> <path d="M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z" /> <path d="M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z" />`, opt)
}

// Focus renders the "focus" icon.
//
// Usage in templates:
//
//	{{ lucide "focus" }}
//
// Direct usage in Go:
//
//	lucide.Focus()
//	lucide.Focus(lucide.Options{Size: 32, Class: "my-icon"})
func Focus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="3" /> <path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" />`, opt)
}

// FoldHorizontal renders the "fold-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "fold-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.FoldHorizontal()
//	lucide.FoldHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func FoldHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 12h6" /> <path d="M22 12h-6" /> <path d="M12 2v2" /> <path d="M12 8v2" /> <path d="M12 14v2" /> <path d="M12 20v2" /> <path d="m19 9-3 3 3 3" /> <path d="m5 15 3-3-3-3" />`, opt)
}

// FoldVertical renders the "fold-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "fold-vertical" }}
//
// Direct usage in Go:
//
//	lucide.FoldVertical()
//	lucide.FoldVertical(lucide.Options{Size: 32, Class: "my-icon"})
func FoldVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22v-6" /> <path d="M12 8V2" /> <path d="M4 12H2" /> <path d="M10 12H8" /> <path d="M16 12h-2" /> <path d="M22 12h-2" /> <path d="m15 19-3-3-3 3" /> <path d="m15 5-3 3-3-3" />`, opt)
}

// Folder renders the "folder" icon.
//
// Usage in templates:
//
//	{{ lucide "folder" }}
//
// Direct usage in Go:
//
//	lucide.Folder()
//	lucide.Folder(lucide.Options{Size: 32, Class: "my-icon"})
func Folder(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" />`, opt)
}

// FolderArchive renders the "folder-archive" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-archive" }}
//
// Direct usage in Go:
//
//	lucide.FolderArchive()
//	lucide.FolderArchive(lucide.Options{Size: 32, Class: "my-icon"})
func FolderArchive(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="15" cy="19" r="2" /> <path d="M20.9 19.8A2 2 0 0 0 22 18V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h5.1" /> <path d="M15 11v-1" /> <path d="M15 17v-2" />`, opt)
}

// FolderCheck renders the "folder-check" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-check" }}
//
// Direct usage in Go:
//
//	lucide.FolderCheck()
//	lucide.FolderCheck(lucide.Options{Size: 32, Class: "my-icon"})
func FolderCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" /> <path d="m9 13 2 2 4-4" />`, opt)
}

// FolderClock renders the "folder-clock" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-clock" }}
//
// Direct usage in Go:
//
//	lucide.FolderClock()
//	lucide.FolderClock(lucide.Options{Size: 32, Class: "my-icon"})
func FolderClock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 14v2.2l1.6 1" /> <path d="M7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2" /> <circle cx="16" cy="16" r="6" />`, opt)
}

// FolderClosed renders the "folder-closed" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-closed" }}
//
// Direct usage in Go:
//
//	lucide.FolderClosed()
//	lucide.FolderClosed(lucide.Options{Size: 32, Class: "my-icon"})
func FolderClosed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" /> <path d="M2 10h20" />`, opt)
}

// FolderCode renders the "folder-code" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-code" }}
//
// Direct usage in Go:
//
//	lucide.FolderCode()
//	lucide.FolderCode(lucide.Options{Size: 32, Class: "my-icon"})
func FolderCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10.5 8 13l2 2.5" /> <path d="m14 10.5 2 2.5-2 2.5" /> <path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2z" />`, opt)
}

// FolderCog renders the "folder-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-cog" }}
//
// Direct usage in Go:
//
//	lucide.FolderCog()
//	lucide.FolderCog(lucide.Options{Size: 32, Class: "my-icon"})
func FolderCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.3 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.98a2 2 0 0 1 1.69.9l.66 1.2A2 2 0 0 0 12 6h8a2 2 0 0 1 2 2v3.3" /> <path d="m14.305 19.53.923-.382" /> <path d="m15.228 16.852-.923-.383" /> <path d="m16.852 15.228-.383-.923" /> <path d="m16.852 20.772-.383.924" /> <path d="m19.148 15.228.383-.923" /> <path d="m19.53 21.696-.382-.924" /> <path d="m20.772 16.852.924-.383" /> <path d="m20.772 19.148.924.383" /> <circle cx="18" cy="18" r="3" />`, opt)
}

// FolderDot renders the "folder-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-dot" }}
//
// Direct usage in Go:
//
//	lucide.FolderDot()
//	lucide.FolderDot(lucide.Options{Size: 32, Class: "my-icon"})
func FolderDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> <circle cx="12" cy="13" r="1" />`, opt)
}

// FolderDown renders the "folder-down" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-down" }}
//
// Direct usage in Go:
//
//	lucide.FolderDown()
//	lucide.FolderDown(lucide.Options{Size: 32, Class: "my-icon"})
func FolderDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" /> <path d="M12 10v6" /> <path d="m15 13-3 3-3-3" />`, opt)
}

// FolderGit renders the "folder-git" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-git" }}
//
// Direct usage in Go:
//
//	lucide.FolderGit()
//	lucide.FolderGit(lucide.Options{Size: 32, Class: "my-icon"})
func FolderGit(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="13" r="2" /> <path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" /> <path d="M14 13h3" /> <path d="M7 13h3" />`, opt)
}

// FolderGit2 renders the "folder-git-2" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-git-2" }}
//
// Direct usage in Go:
//
//	lucide.FolderGit2()
//	lucide.FolderGit2(lucide.Options{Size: 32, Class: "my-icon"})
func FolderGit2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5" /> <circle cx="13" cy="12" r="2" /> <path d="M18 19c-2.8 0-5-2.2-5-5v8" /> <circle cx="20" cy="19" r="2" />`, opt)
}

// FolderHeart renders the "folder-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-heart" }}
//
// Direct usage in Go:
//
//	lucide.FolderHeart()
//	lucide.FolderHeart(lucide.Options{Size: 32, Class: "my-icon"})
func FolderHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.638 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v3.417" /> <path d="M14.62 18.8A2.25 2.25 0 1 1 18 15.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z" />`, opt)
}

// FolderInput renders the "folder-input" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-input" }}
//
// Direct usage in Go:
//
//	lucide.FolderInput()
//	lucide.FolderInput(lucide.Options{Size: 32, Class: "my-icon"})
func FolderInput(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1" /> <path d="M2 13h10" /> <path d="m9 16 3-3-3-3" />`, opt)
}

// FolderKanban renders the "folder-kanban" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-kanban" }}
//
// Direct usage in Go:
//
//	lucide.FolderKanban()
//	lucide.FolderKanban(lucide.Options{Size: 32, Class: "my-icon"})
func FolderKanban(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> <path d="M8 10v4" /> <path d="M12 10v2" /> <path d="M16 10v6" />`, opt)
}

// FolderKey renders the "folder-key" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-key" }}
//
// Direct usage in Go:
//
//	lucide.FolderKey()
//	lucide.FolderKey(lucide.Options{Size: 32, Class: "my-icon"})
func FolderKey(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="16" cy="20" r="2" /> <path d="M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2" /> <path d="m22 14-4.5 4.5" /> <path d="m21 15 1 1" />`, opt)
}

// FolderLock renders the "folder-lock" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-lock" }}
//
// Direct usage in Go:
//
//	lucide.FolderLock()
//	lucide.FolderLock(lucide.Options{Size: 32, Class: "my-icon"})
func FolderLock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="5" x="14" y="17" rx="1" /> <path d="M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2.5" /> <path d="M20 17v-2a2 2 0 1 0-4 0v2" />`, opt)
}

// FolderMinus renders the "folder-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-minus" }}
//
// Direct usage in Go:
//
//	lucide.FolderMinus()
//	lucide.FolderMinus(lucide.Options{Size: 32, Class: "my-icon"})
func FolderMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 13h6" /> <path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" />`, opt)
}

// FolderOpen renders the "folder-open" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-open" }}
//
// Direct usage in Go:
//
//	lucide.FolderOpen()
//	lucide.FolderOpen(lucide.Options{Size: 32, Class: "my-icon"})
func FolderOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2" />`, opt)
}

// FolderOpenDot renders the "folder-open-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-open-dot" }}
//
// Direct usage in Go:
//
//	lucide.FolderOpenDot()
//	lucide.FolderOpenDot(lucide.Options{Size: 32, Class: "my-icon"})
func FolderOpenDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2" /> <circle cx="14" cy="15" r="1" />`, opt)
}

// FolderOutput renders the "folder-output" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-output" }}
//
// Direct usage in Go:
//
//	lucide.FolderOutput()
//	lucide.FolderOutput(lucide.Options{Size: 32, Class: "my-icon"})
func FolderOutput(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 7.5V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-1.5" /> <path d="M2 13h10" /> <path d="m5 10-3 3 3 3" />`, opt)
}

// FolderPen renders the "folder-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-pen" }}
//
// Direct usage in Go:
//
//	lucide.FolderPen()
//	lucide.FolderPen(lucide.Options{Size: 32, Class: "my-icon"})
func FolderPen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5" /> <path d="M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" />`, opt)
}

// FolderPlus renders the "folder-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-plus" }}
//
// Direct usage in Go:
//
//	lucide.FolderPlus()
//	lucide.FolderPlus(lucide.Options{Size: 32, Class: "my-icon"})
func FolderPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 10v6" /> <path d="M9 13h6" /> <path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" />`, opt)
}

// FolderRoot renders the "folder-root" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-root" }}
//
// Direct usage in Go:
//
//	lucide.FolderRoot()
//	lucide.FolderRoot(lucide.Options{Size: 32, Class: "my-icon"})
func FolderRoot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> <circle cx="12" cy="13" r="2" /> <path d="M12 15v5" />`, opt)
}

// FolderSearch renders the "folder-search" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-search" }}
//
// Direct usage in Go:
//
//	lucide.FolderSearch()
//	lucide.FolderSearch(lucide.Options{Size: 32, Class: "my-icon"})
func FolderSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v4.1" /> <path d="m21 21-1.9-1.9" /> <circle cx="17" cy="17" r="3" />`, opt)
}

// FolderSearch2 renders the "folder-search-2" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-search-2" }}
//
// Direct usage in Go:
//
//	lucide.FolderSearch2()
//	lucide.FolderSearch2(lucide.Options{Size: 32, Class: "my-icon"})
func FolderSearch2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="11.5" cy="12.5" r="2.5" /> <path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" /> <path d="M13.3 14.3 15 16" />`, opt)
}

// FolderSymlink renders the "folder-symlink" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-symlink" }}
//
// Direct usage in Go:
//
//	lucide.FolderSymlink()
//	lucide.FolderSymlink(lucide.Options{Size: 32, Class: "my-icon"})
func FolderSymlink(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9.35V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7" /> <path d="m8 16 3-3-3-3" />`, opt)
}

// FolderSync renders the "folder-sync" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-sync" }}
//
// Direct usage in Go:
//
//	lucide.FolderSync()
//	lucide.FolderSync(lucide.Options{Size: 32, Class: "my-icon"})
func FolderSync(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v.5" /> <path d="M12 10v4h4" /> <path d="m12 14 1.535-1.605a5 5 0 0 1 8 1.5" /> <path d="M22 22v-4h-4" /> <path d="m22 18-1.535 1.605a5 5 0 0 1-8-1.5" />`, opt)
}

// FolderTree renders the "folder-tree" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-tree" }}
//
// Direct usage in Go:
//
//	lucide.FolderTree()
//	lucide.FolderTree(lucide.Options{Size: 32, Class: "my-icon"})
func FolderTree(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z" /> <path d="M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z" /> <path d="M3 5a2 2 0 0 0 2 2h3" /> <path d="M3 3v13a2 2 0 0 0 2 2h3" />`, opt)
}

// FolderUp renders the "folder-up" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-up" }}
//
// Direct usage in Go:
//
//	lucide.FolderUp()
//	lucide.FolderUp(lucide.Options{Size: 32, Class: "my-icon"})
func FolderUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" /> <path d="M12 10v6" /> <path d="m9 13 3-3 3 3" />`, opt)
}

// FolderX renders the "folder-x" icon.
//
// Usage in templates:
//
//	{{ lucide "folder-x" }}
//
// Direct usage in Go:
//
//	lucide.FolderX()
//	lucide.FolderX(lucide.Options{Size: 32, Class: "my-icon"})
func FolderX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" /> <path d="m9.5 10.5 5 5" /> <path d="m14.5 10.5-5 5" />`, opt)
}

// Folders renders the "folders" icon.
//
// Usage in templates:
//
//	{{ lucide "folders" }}
//
// Direct usage in Go:
//
//	lucide.Folders()
//	lucide.Folders(lucide.Options{Size: 32, Class: "my-icon"})
func Folders(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 5a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H9a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2.5a1.5 1.5 0 0 1 1.2.6l.6.8a1.5 1.5 0 0 0 1.2.6z" /> <path d="M3 8.268a2 2 0 0 0-1 1.738V19a2 2 0 0 0 2 2h11a2 2 0 0 0 1.732-1" />`, opt)
}

// Footprints renders the "footprints" icon.
//
// Usage in templates:
//
//	{{ lucide "footprints" }}
//
// Direct usage in Go:
//
//	lucide.Footprints()
//	lucide.Footprints(lucide.Options{Size: 32, Class: "my-icon"})
func Footprints(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z" /> <path d="M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z" /> <path d="M16 17h4" /> <path d="M4 13h4" />`, opt)
}

// Forklift renders the "forklift" icon.
//
// Usage in templates:
//
//	{{ lucide "forklift" }}
//
// Direct usage in Go:
//
//	lucide.Forklift()
//	lucide.Forklift(lucide.Options{Size: 32, Class: "my-icon"})
func Forklift(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 12H5a2 2 0 0 0-2 2v5" /> <circle cx="13" cy="19" r="2" /> <circle cx="5" cy="19" r="2" /> <path d="M8 19h3m5-17v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5" />`, opt)
}

// Forward renders the "forward" icon.
//
// Usage in templates:
//
//	{{ lucide "forward" }}
//
// Direct usage in Go:
//
//	lucide.Forward()
//	lucide.Forward(lucide.Options{Size: 32, Class: "my-icon"})
func Forward(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 17 5-5-5-5" /> <path d="M4 18v-2a4 4 0 0 1 4-4h12" />`, opt)
}

// Frame renders the "frame" icon.
//
// Usage in templates:
//
//	{{ lucide "frame" }}
//
// Direct usage in Go:
//
//	lucide.Frame()
//	lucide.Frame(lucide.Options{Size: 32, Class: "my-icon"})
func Frame(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="22" x2="2" y1="6" y2="6" /> <line x1="22" x2="2" y1="18" y2="18" /> <line x1="6" x2="6" y1="2" y2="22" /> <line x1="18" x2="18" y1="2" y2="22" />`, opt)
}

// Framer renders the "framer" icon.
//
// Usage in templates:
//
//	{{ lucide "framer" }}
//
// Direct usage in Go:
//
//	lucide.Framer()
//	lucide.Framer(lucide.Options{Size: 32, Class: "my-icon"})
func Framer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7" />`, opt)
}

// Frown renders the "frown" icon.
//
// Usage in templates:
//
//	{{ lucide "frown" }}
//
// Direct usage in Go:
//
//	lucide.Frown()
//	lucide.Frown(lucide.Options{Size: 32, Class: "my-icon"})
func Frown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M16 16s-1.5-2-4-2-4 2-4 2" /> <line x1="9" x2="9.01" y1="9" y2="9" /> <line x1="15" x2="15.01" y1="9" y2="9" />`, opt)
}

// Fuel renders the "fuel" icon.
//
// Usage in templates:
//
//	{{ lucide "fuel" }}
//
// Direct usage in Go:
//
//	lucide.Fuel()
//	lucide.Fuel(lucide.Options{Size: 32, Class: "my-icon"})
func Fuel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 4 0v-6.998a2 2 0 0 0-.59-1.42L18 5" /> <path d="M14 21V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v16" /> <path d="M2 21h13" /> <path d="M3 9h11" />`, opt)
}

// Fullscreen renders the "fullscreen" icon.
//
// Usage in templates:
//
//	{{ lucide "fullscreen" }}
//
// Direct usage in Go:
//
//	lucide.Fullscreen()
//	lucide.Fullscreen(lucide.Options{Size: 32, Class: "my-icon"})
func Fullscreen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <rect width="10" height="8" x="7" y="8" rx="1" />`, opt)
}

// Funnel renders the "funnel" icon.
//
// Usage in templates:
//
//	{{ lucide "funnel" }}
//
// Direct usage in Go:
//
//	lucide.Funnel()
//	lucide.Funnel(lucide.Options{Size: 32, Class: "my-icon"})
func Funnel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 20a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341L21.74 4.67A1 1 0 0 0 21 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14z" />`, opt)
}

// FunnelPlus renders the "funnel-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "funnel-plus" }}
//
// Direct usage in Go:
//
//	lucide.FunnelPlus()
//	lucide.FunnelPlus(lucide.Options{Size: 32, Class: "my-icon"})
func FunnelPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.354 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l1.218-1.348" /> <path d="M16 6h6" /> <path d="M19 3v6" />`, opt)
}

// FunnelX renders the "funnel-x" icon.
//
// Usage in templates:
//
//	{{ lucide "funnel-x" }}
//
// Direct usage in Go:
//
//	lucide.FunnelX()
//	lucide.FunnelX(lucide.Options{Size: 32, Class: "my-icon"})
func FunnelX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.531 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l.427-.473" /> <path d="m16.5 3.5 5 5" /> <path d="m21.5 3.5-5 5" />`, opt)
}

// GalleryHorizontal renders the "gallery-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "gallery-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.GalleryHorizontal()
//	lucide.GalleryHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func GalleryHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 3v18" /> <rect width="12" height="18" x="6" y="3" rx="2" /> <path d="M22 3v18" />`, opt)
}

// GalleryHorizontalEnd renders the "gallery-horizontal-end" icon.
//
// Usage in templates:
//
//	{{ lucide "gallery-horizontal-end" }}
//
// Direct usage in Go:
//
//	lucide.GalleryHorizontalEnd()
//	lucide.GalleryHorizontalEnd(lucide.Options{Size: 32, Class: "my-icon"})
func GalleryHorizontalEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 7v10" /> <path d="M6 5v14" /> <rect width="12" height="18" x="10" y="3" rx="2" />`, opt)
}

// GalleryThumbnails renders the "gallery-thumbnails" icon.
//
// Usage in templates:
//
//	{{ lucide "gallery-thumbnails" }}
//
// Direct usage in Go:
//
//	lucide.GalleryThumbnails()
//	lucide.GalleryThumbnails(lucide.Options{Size: 32, Class: "my-icon"})
func GalleryThumbnails(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="14" x="3" y="3" rx="2" /> <path d="M4 21h1" /> <path d="M9 21h1" /> <path d="M14 21h1" /> <path d="M19 21h1" />`, opt)
}

// GalleryVertical renders the "gallery-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "gallery-vertical" }}
//
// Direct usage in Go:
//
//	lucide.GalleryVertical()
//	lucide.GalleryVertical(lucide.Options{Size: 32, Class: "my-icon"})
func GalleryVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 2h18" /> <rect width="18" height="12" x="3" y="6" rx="2" /> <path d="M3 22h18" />`, opt)
}

// GalleryVerticalEnd renders the "gallery-vertical-end" icon.
//
// Usage in templates:
//
//	{{ lucide "gallery-vertical-end" }}
//
// Direct usage in Go:
//
//	lucide.GalleryVerticalEnd()
//	lucide.GalleryVerticalEnd(lucide.Options{Size: 32, Class: "my-icon"})
func GalleryVerticalEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 2h10" /> <path d="M5 6h14" /> <rect width="18" height="12" x="3" y="10" rx="2" />`, opt)
}

// Gamepad renders the "gamepad" icon.
//
// Usage in templates:
//
//	{{ lucide "gamepad" }}
//
// Direct usage in Go:
//
//	lucide.Gamepad()
//	lucide.Gamepad(lucide.Options{Size: 32, Class: "my-icon"})
func Gamepad(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="6" x2="10" y1="12" y2="12" /> <line x1="8" x2="8" y1="10" y2="14" /> <line x1="15" x2="15.01" y1="13" y2="13" /> <line x1="18" x2="18.01" y1="11" y2="11" /> <rect width="20" height="12" x="2" y="6" rx="2" />`, opt)
}

// Gamepad2 renders the "gamepad-2" icon.
//
// Usage in templates:
//
//	{{ lucide "gamepad-2" }}
//
// Direct usage in Go:
//
//	lucide.Gamepad2()
//	lucide.Gamepad2(lucide.Options{Size: 32, Class: "my-icon"})
func Gamepad2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="6" x2="10" y1="11" y2="11" /> <line x1="8" x2="8" y1="9" y2="13" /> <line x1="15" x2="15.01" y1="12" y2="12" /> <line x1="18" x2="18.01" y1="10" y2="10" /> <path d="M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z" />`, opt)
}

// GamepadDirectional renders the "gamepad-directional" icon.
//
// Usage in templates:
//
//	{{ lucide "gamepad-directional" }}
//
// Direct usage in Go:
//
//	lucide.GamepadDirectional()
//	lucide.GamepadDirectional(lucide.Options{Size: 32, Class: "my-icon"})
func GamepadDirectional(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.146 15.854a1.207 1.207 0 0 1 1.708 0l1.56 1.56A2 2 0 0 1 15 18.828V21a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2.172a2 2 0 0 1 .586-1.414z" /> <path d="M18.828 15a2 2 0 0 1-1.414-.586l-1.56-1.56a1.207 1.207 0 0 1 0-1.708l1.56-1.56A2 2 0 0 1 18.828 9H21a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1z" /> <path d="M6.586 14.414A2 2 0 0 1 5.172 15H3a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1h2.172a2 2 0 0 1 1.414.586l1.56 1.56a1.207 1.207 0 0 1 0 1.708z" /> <path d="M9 3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2.172a2 2 0 0 1-.586 1.414l-1.56 1.56a1.207 1.207 0 0 1-1.708 0l-1.56-1.56A2 2 0 0 1 9 5.172z" />`, opt)
}

// Gauge renders the "gauge" icon.
//
// Usage in templates:
//
//	{{ lucide "gauge" }}
//
// Direct usage in Go:
//
//	lucide.Gauge()
//	lucide.Gauge(lucide.Options{Size: 32, Class: "my-icon"})
func Gauge(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 14 4-4" /> <path d="M3.34 19a10 10 0 1 1 17.32 0" />`, opt)
}

// Gavel renders the "gavel" icon.
//
// Usage in templates:
//
//	{{ lucide "gavel" }}
//
// Direct usage in Go:
//
//	lucide.Gavel()
//	lucide.Gavel(lucide.Options{Size: 32, Class: "my-icon"})
func Gavel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 13-8.381 8.38a1 1 0 0 1-3.001-3l8.384-8.381" /> <path d="m16 16 6-6" /> <path d="m21.5 10.5-8-8" /> <path d="m8 8 6-6" /> <path d="m8.5 7.5 8 8" />`, opt)
}

// Gem renders the "gem" icon.
//
// Usage in templates:
//
//	{{ lucide "gem" }}
//
// Direct usage in Go:
//
//	lucide.Gem()
//	lucide.Gem(lucide.Options{Size: 32, Class: "my-icon"})
func Gem(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.5 3 8 9l4 13 4-13-2.5-6" /> <path d="M17 3a2 2 0 0 1 1.6.8l3 4a2 2 0 0 1 .013 2.382l-7.99 10.986a2 2 0 0 1-3.247 0l-7.99-10.986A2 2 0 0 1 2.4 7.8l2.998-3.997A2 2 0 0 1 7 3z" /> <path d="M2 9h20" />`, opt)
}

// GeorgianLari renders the "georgian-lari" icon.
//
// Usage in templates:
//
//	{{ lucide "georgian-lari" }}
//
// Direct usage in Go:
//
//	lucide.GeorgianLari()
//	lucide.GeorgianLari(lucide.Options{Size: 32, Class: "my-icon"})
func GeorgianLari(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.5 21a7.5 7.5 0 1 1 7.35-9" /> <path d="M13 12V3" /> <path d="M4 21h16" /> <path d="M9 12V3" />`, opt)
}

// Ghost renders the "ghost" icon.
//
// Usage in templates:
//
//	{{ lucide "ghost" }}
//
// Direct usage in Go:
//
//	lucide.Ghost()
//	lucide.Ghost(lucide.Options{Size: 32, Class: "my-icon"})
func Ghost(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 10h.01" /> <path d="M15 10h.01" /> <path d="M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z" />`, opt)
}

// Gift renders the "gift" icon.
//
// Usage in templates:
//
//	{{ lucide "gift" }}
//
// Direct usage in Go:
//
//	lucide.Gift()
//	lucide.Gift(lucide.Options{Size: 32, Class: "my-icon"})
func Gift(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="3" y="8" width="18" height="4" rx="1" /> <path d="M12 8v13" /> <path d="M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7" /> <path d="M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5" />`, opt)
}

// GitBranch renders the "git-branch" icon.
//
// Usage in templates:
//
//	{{ lucide "git-branch" }}
//
// Direct usage in Go:
//
//	lucide.GitBranch()
//	lucide.GitBranch(lucide.Options{Size: 32, Class: "my-icon"})
func GitBranch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="6" x2="6" y1="3" y2="15" /> <circle cx="18" cy="6" r="3" /> <circle cx="6" cy="18" r="3" /> <path d="M18 9a9 9 0 0 1-9 9" />`, opt)
}

// GitBranchPlus renders the "git-branch-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "git-branch-plus" }}
//
// Direct usage in Go:
//
//	lucide.GitBranchPlus()
//	lucide.GitBranchPlus(lucide.Options{Size: 32, Class: "my-icon"})
func GitBranchPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 3v12" /> <path d="M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" /> <path d="M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" /> <path d="M15 6a9 9 0 0 0-9 9" /> <path d="M18 15v6" /> <path d="M21 18h-6" />`, opt)
}

// GitCommitHorizontal renders the "git-commit-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "git-commit-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.GitCommitHorizontal()
//	lucide.GitCommitHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func GitCommitHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="3" /> <line x1="3" x2="9" y1="12" y2="12" /> <line x1="15" x2="21" y1="12" y2="12" />`, opt)
}

// GitCommitVertical renders the "git-commit-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "git-commit-vertical" }}
//
// Direct usage in Go:
//
//	lucide.GitCommitVertical()
//	lucide.GitCommitVertical(lucide.Options{Size: 32, Class: "my-icon"})
func GitCommitVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v6" /> <circle cx="12" cy="12" r="3" /> <path d="M12 15v6" />`, opt)
}

// GitCompare renders the "git-compare" icon.
//
// Usage in templates:
//
//	{{ lucide "git-compare" }}
//
// Direct usage in Go:
//
//	lucide.GitCompare()
//	lucide.GitCompare(lucide.Options{Size: 32, Class: "my-icon"})
func GitCompare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="18" cy="18" r="3" /> <circle cx="6" cy="6" r="3" /> <path d="M13 6h3a2 2 0 0 1 2 2v7" /> <path d="M11 18H8a2 2 0 0 1-2-2V9" />`, opt)
}

// GitCompareArrows renders the "git-compare-arrows" icon.
//
// Usage in templates:
//
//	{{ lucide "git-compare-arrows" }}
//
// Direct usage in Go:
//
//	lucide.GitCompareArrows()
//	lucide.GitCompareArrows(lucide.Options{Size: 32, Class: "my-icon"})
func GitCompareArrows(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="5" cy="6" r="3" /> <path d="M12 6h5a2 2 0 0 1 2 2v7" /> <path d="m15 9-3-3 3-3" /> <circle cx="19" cy="18" r="3" /> <path d="M12 18H7a2 2 0 0 1-2-2V9" /> <path d="m9 15 3 3-3 3" />`, opt)
}

// GitFork renders the "git-fork" icon.
//
// Usage in templates:
//
//	{{ lucide "git-fork" }}
//
// Direct usage in Go:
//
//	lucide.GitFork()
//	lucide.GitFork(lucide.Options{Size: 32, Class: "my-icon"})
func GitFork(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="18" r="3" /> <circle cx="6" cy="6" r="3" /> <circle cx="18" cy="6" r="3" /> <path d="M18 9v2c0 .6-.4 1-1 1H7c-.6 0-1-.4-1-1V9" /> <path d="M12 12v3" />`, opt)
}

// GitGraph renders the "git-graph" icon.
//
// Usage in templates:
//
//	{{ lucide "git-graph" }}
//
// Direct usage in Go:
//
//	lucide.GitGraph()
//	lucide.GitGraph(lucide.Options{Size: 32, Class: "my-icon"})
func GitGraph(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="5" cy="6" r="3" /> <path d="M5 9v6" /> <circle cx="5" cy="18" r="3" /> <path d="M12 3v18" /> <circle cx="19" cy="6" r="3" /> <path d="M16 15.7A9 9 0 0 0 19 9" />`, opt)
}

// GitMerge renders the "git-merge" icon.
//
// Usage in templates:
//
//	{{ lucide "git-merge" }}
//
// Direct usage in Go:
//
//	lucide.GitMerge()
//	lucide.GitMerge(lucide.Options{Size: 32, Class: "my-icon"})
func GitMerge(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="18" cy="18" r="3" /> <circle cx="6" cy="6" r="3" /> <path d="M6 21V9a9 9 0 0 0 9 9" />`, opt)
}

// GitPullRequest renders the "git-pull-request" icon.
//
// Usage in templates:
//
//	{{ lucide "git-pull-request" }}
//
// Direct usage in Go:
//
//	lucide.GitPullRequest()
//	lucide.GitPullRequest(lucide.Options{Size: 32, Class: "my-icon"})
func GitPullRequest(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="18" cy="18" r="3" /> <circle cx="6" cy="6" r="3" /> <path d="M13 6h3a2 2 0 0 1 2 2v7" /> <line x1="6" x2="6" y1="9" y2="21" />`, opt)
}

// GitPullRequestArrow renders the "git-pull-request-arrow" icon.
//
// Usage in templates:
//
//	{{ lucide "git-pull-request-arrow" }}
//
// Direct usage in Go:
//
//	lucide.GitPullRequestArrow()
//	lucide.GitPullRequestArrow(lucide.Options{Size: 32, Class: "my-icon"})
func GitPullRequestArrow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="5" cy="6" r="3" /> <path d="M5 9v12" /> <circle cx="19" cy="18" r="3" /> <path d="m15 9-3-3 3-3" /> <path d="M12 6h5a2 2 0 0 1 2 2v7" />`, opt)
}

// GitPullRequestClosed renders the "git-pull-request-closed" icon.
//
// Usage in templates:
//
//	{{ lucide "git-pull-request-closed" }}
//
// Direct usage in Go:
//
//	lucide.GitPullRequestClosed()
//	lucide.GitPullRequestClosed(lucide.Options{Size: 32, Class: "my-icon"})
func GitPullRequestClosed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="6" cy="6" r="3" /> <path d="M6 9v12" /> <path d="m21 3-6 6" /> <path d="m21 9-6-6" /> <path d="M18 11.5V15" /> <circle cx="18" cy="18" r="3" />`, opt)
}

// GitPullRequestCreate renders the "git-pull-request-create" icon.
//
// Usage in templates:
//
//	{{ lucide "git-pull-request-create" }}
//
// Direct usage in Go:
//
//	lucide.GitPullRequestCreate()
//	lucide.GitPullRequestCreate(lucide.Options{Size: 32, Class: "my-icon"})
func GitPullRequestCreate(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="6" cy="6" r="3" /> <path d="M6 9v12" /> <path d="M13 6h3a2 2 0 0 1 2 2v3" /> <path d="M18 15v6" /> <path d="M21 18h-6" />`, opt)
}

// GitPullRequestCreateArrow renders the "git-pull-request-create-arrow" icon.
//
// Usage in templates:
//
//	{{ lucide "git-pull-request-create-arrow" }}
//
// Direct usage in Go:
//
//	lucide.GitPullRequestCreateArrow()
//	lucide.GitPullRequestCreateArrow(lucide.Options{Size: 32, Class: "my-icon"})
func GitPullRequestCreateArrow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="5" cy="6" r="3" /> <path d="M5 9v12" /> <path d="m15 9-3-3 3-3" /> <path d="M12 6h5a2 2 0 0 1 2 2v3" /> <path d="M19 15v6" /> <path d="M22 18h-6" />`, opt)
}

// GitPullRequestDraft renders the "git-pull-request-draft" icon.
//
// Usage in templates:
//
//	{{ lucide "git-pull-request-draft" }}
//
// Direct usage in Go:
//
//	lucide.GitPullRequestDraft()
//	lucide.GitPullRequestDraft(lucide.Options{Size: 32, Class: "my-icon"})
func GitPullRequestDraft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="18" cy="18" r="3" /> <circle cx="6" cy="6" r="3" /> <path d="M18 6V5" /> <path d="M18 11v-1" /> <line x1="6" x2="6" y1="9" y2="21" />`, opt)
}

// Github renders the "github" icon.
//
// Usage in templates:
//
//	{{ lucide "github" }}
//
// Direct usage in Go:
//
//	lucide.Github()
//	lucide.Github(lucide.Options{Size: 32, Class: "my-icon"})
func Github(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" /> <path d="M9 18c-4.51 2-5-2-7-2" />`, opt)
}

// Gitlab renders the "gitlab" icon.
//
// Usage in templates:
//
//	{{ lucide "gitlab" }}
//
// Direct usage in Go:
//
//	lucide.Gitlab()
//	lucide.Gitlab(lucide.Options{Size: 32, Class: "my-icon"})
func Gitlab(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z" />`, opt)
}

// GlassWater renders the "glass-water" icon.
//
// Usage in templates:
//
//	{{ lucide "glass-water" }}
//
// Direct usage in Go:
//
//	lucide.GlassWater()
//	lucide.GlassWater(lucide.Options{Size: 32, Class: "my-icon"})
func GlassWater(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5.116 4.104A1 1 0 0 1 6.11 3h11.78a1 1 0 0 1 .994 1.105L17.19 20.21A2 2 0 0 1 15.2 22H8.8a2 2 0 0 1-2-1.79z" /> <path d="M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0" />`, opt)
}

// Glasses renders the "glasses" icon.
//
// Usage in templates:
//
//	{{ lucide "glasses" }}
//
// Direct usage in Go:
//
//	lucide.Glasses()
//	lucide.Glasses(lucide.Options{Size: 32, Class: "my-icon"})
func Glasses(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="6" cy="15" r="4" /> <circle cx="18" cy="15" r="4" /> <path d="M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2" /> <path d="M2.5 13 5 7c.7-1.3 1.4-2 3-2" /> <path d="M21.5 13 19 7c-.7-1.3-1.5-2-3-2" />`, opt)
}

// Globe renders the "globe" icon.
//
// Usage in templates:
//
//	{{ lucide "globe" }}
//
// Direct usage in Go:
//
//	lucide.Globe()
//	lucide.Globe(lucide.Options{Size: 32, Class: "my-icon"})
func Globe(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20" /> <path d="M2 12h20" />`, opt)
}

// GlobeLock renders the "globe-lock" icon.
//
// Usage in templates:
//
//	{{ lucide "globe-lock" }}
//
// Direct usage in Go:
//
//	lucide.GlobeLock()
//	lucide.GlobeLock(lucide.Options{Size: 32, Class: "my-icon"})
func GlobeLock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.686 15A14.5 14.5 0 0 1 12 22a14.5 14.5 0 0 1 0-20 10 10 0 1 0 9.542 13" /> <path d="M2 12h8.5" /> <path d="M20 6V4a2 2 0 1 0-4 0v2" /> <rect width="8" height="5" x="14" y="6" rx="1" />`, opt)
}

// Goal renders the "goal" icon.
//
// Usage in templates:
//
//	{{ lucide "goal" }}
//
// Direct usage in Go:
//
//	lucide.Goal()
//	lucide.Goal(lucide.Options{Size: 32, Class: "my-icon"})
func Goal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13V2l8 4-8 4" /> <path d="M20.561 10.222a9 9 0 1 1-12.55-5.29" /> <path d="M8.002 9.997a5 5 0 1 0 8.9 2.02" />`, opt)
}

// Gpu renders the "gpu" icon.
//
// Usage in templates:
//
//	{{ lucide "gpu" }}
//
// Direct usage in Go:
//
//	lucide.Gpu()
//	lucide.Gpu(lucide.Options{Size: 32, Class: "my-icon"})
func Gpu(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 21V3" /> <path d="M2 5h18a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2.26" /> <path d="M7 17v3a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1v-3" /> <circle cx="16" cy="11" r="2" /> <circle cx="8" cy="11" r="2" />`, opt)
}

// GraduationCap renders the "graduation-cap" icon.
//
// Usage in templates:
//
//	{{ lucide "graduation-cap" }}
//
// Direct usage in Go:
//
//	lucide.GraduationCap()
//	lucide.GraduationCap(lucide.Options{Size: 32, Class: "my-icon"})
func GraduationCap(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z" /> <path d="M22 10v6" /> <path d="M6 12.5V16a6 3 0 0 0 12 0v-3.5" />`, opt)
}

// Grape renders the "grape" icon.
//
// Usage in templates:
//
//	{{ lucide "grape" }}
//
// Direct usage in Go:
//
//	lucide.Grape()
//	lucide.Grape(lucide.Options{Size: 32, Class: "my-icon"})
func Grape(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 5V2l-5.89 5.89" /> <circle cx="16.6" cy="15.89" r="3" /> <circle cx="8.11" cy="7.4" r="3" /> <circle cx="12.35" cy="11.65" r="3" /> <circle cx="13.91" cy="5.85" r="3" /> <circle cx="18.15" cy="10.09" r="3" /> <circle cx="6.56" cy="13.2" r="3" /> <circle cx="10.8" cy="17.44" r="3" /> <circle cx="5" cy="19" r="3" />`, opt)
}

// Grid2x2 renders the "grid-2x2" icon.
//
// Usage in templates:
//
//	{{ lucide "grid-2x2" }}
//
// Direct usage in Go:
//
//	lucide.Grid2x2()
//	lucide.Grid2x2(lucide.Options{Size: 32, Class: "my-icon"})
func Grid2x2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v18" /> <path d="M3 12h18" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// Grid2x2Check renders the "grid-2x2-check" icon.
//
// Usage in templates:
//
//	{{ lucide "grid-2x2-check" }}
//
// Direct usage in Go:
//
//	lucide.Grid2x2Check()
//	lucide.Grid2x2Check(lucide.Options{Size: 32, Class: "my-icon"})
func Grid2x2Check(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3" /> <path d="m16 19 2 2 4-4" />`, opt)
}

// Grid2x2Plus renders the "grid-2x2-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "grid-2x2-plus" }}
//
// Direct usage in Go:
//
//	lucide.Grid2x2Plus()
//	lucide.Grid2x2Plus(lucide.Options{Size: 32, Class: "my-icon"})
func Grid2x2Plus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3" /> <path d="M16 19h6" /> <path d="M19 22v-6" />`, opt)
}

// Grid2x2X renders the "grid-2x2-x" icon.
//
// Usage in templates:
//
//	{{ lucide "grid-2x2-x" }}
//
// Direct usage in Go:
//
//	lucide.Grid2x2X()
//	lucide.Grid2x2X(lucide.Options{Size: 32, Class: "my-icon"})
func Grid2x2X(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3" /> <path d="m16 16 5 5" /> <path d="m16 21 5-5" />`, opt)
}

// Grid3x2 renders the "grid-3x2" icon.
//
// Usage in templates:
//
//	{{ lucide "grid-3x2" }}
//
// Direct usage in Go:
//
//	lucide.Grid3x2()
//	lucide.Grid3x2(lucide.Options{Size: 32, Class: "my-icon"})
func Grid3x2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 3v18" /> <path d="M3 12h18" /> <path d="M9 3v18" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// Grid3x3 renders the "grid-3x3" icon.
//
// Usage in templates:
//
//	{{ lucide "grid-3x3" }}
//
// Direct usage in Go:
//
//	lucide.Grid3x3()
//	lucide.Grid3x3(lucide.Options{Size: 32, Class: "my-icon"})
func Grid3x3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 9h18" /> <path d="M3 15h18" /> <path d="M9 3v18" /> <path d="M15 3v18" />`, opt)
}

// Grip renders the "grip" icon.
//
// Usage in templates:
//
//	{{ lucide "grip" }}
//
// Direct usage in Go:
//
//	lucide.Grip()
//	lucide.Grip(lucide.Options{Size: 32, Class: "my-icon"})
func Grip(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="5" r="1" /> <circle cx="19" cy="5" r="1" /> <circle cx="5" cy="5" r="1" /> <circle cx="12" cy="12" r="1" /> <circle cx="19" cy="12" r="1" /> <circle cx="5" cy="12" r="1" /> <circle cx="12" cy="19" r="1" /> <circle cx="19" cy="19" r="1" /> <circle cx="5" cy="19" r="1" />`, opt)
}

// GripHorizontal renders the "grip-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "grip-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.GripHorizontal()
//	lucide.GripHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func GripHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="9" r="1" /> <circle cx="19" cy="9" r="1" /> <circle cx="5" cy="9" r="1" /> <circle cx="12" cy="15" r="1" /> <circle cx="19" cy="15" r="1" /> <circle cx="5" cy="15" r="1" />`, opt)
}

// GripVertical renders the "grip-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "grip-vertical" }}
//
// Direct usage in Go:
//
//	lucide.GripVertical()
//	lucide.GripVertical(lucide.Options{Size: 32, Class: "my-icon"})
func GripVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="9" cy="12" r="1" /> <circle cx="9" cy="5" r="1" /> <circle cx="9" cy="19" r="1" /> <circle cx="15" cy="12" r="1" /> <circle cx="15" cy="5" r="1" /> <circle cx="15" cy="19" r="1" />`, opt)
}

// Group renders the "group" icon.
//
// Usage in templates:
//
//	{{ lucide "group" }}
//
// Direct usage in Go:
//
//	lucide.Group()
//	lucide.Group(lucide.Options{Size: 32, Class: "my-icon"})
func Group(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5c0-1.1.9-2 2-2h2" /> <path d="M17 3h2c1.1 0 2 .9 2 2v2" /> <path d="M21 17v2c0 1.1-.9 2-2 2h-2" /> <path d="M7 21H5c-1.1 0-2-.9-2-2v-2" /> <rect width="7" height="5" x="7" y="7" rx="1" /> <rect width="7" height="5" x="10" y="12" rx="1" />`, opt)
}

// Guitar renders the "guitar" icon.
//
// Usage in templates:
//
//	{{ lucide "guitar" }}
//
// Direct usage in Go:
//
//	lucide.Guitar()
//	lucide.Guitar(lucide.Options{Size: 32, Class: "my-icon"})
func Guitar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11.9 12.1 4.514-4.514" /> <path d="M20.1 2.3a1 1 0 0 0-1.4 0l-1.114 1.114A2 2 0 0 0 17 4.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 17.828 7h1.344a2 2 0 0 0 1.414-.586L21.7 5.3a1 1 0 0 0 0-1.4z" /> <path d="m6 16 2 2" /> <path d="M8.23 9.85A3 3 0 0 1 11 8a5 5 0 0 1 5 5 3 3 0 0 1-1.85 2.77l-.92.38A2 2 0 0 0 12 18a4 4 0 0 1-4 4 6 6 0 0 1-6-6 4 4 0 0 1 4-4 2 2 0 0 0 1.85-1.23z" />`, opt)
}

// Ham renders the "ham" icon.
//
// Usage in templates:
//
//	{{ lucide "ham" }}
//
// Direct usage in Go:
//
//	lucide.Ham()
//	lucide.Ham(lucide.Options{Size: 32, Class: "my-icon"})
func Ham(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.144 21.144A7.274 10.445 45 1 0 2.856 10.856" /> <path d="M13.144 21.144A7.274 4.365 45 0 0 2.856 10.856a7.274 4.365 45 0 0 10.288 10.288" /> <path d="M16.565 10.435 18.6 8.4a2.501 2.501 0 1 0 1.65-4.65 2.5 2.5 0 1 0-4.66 1.66l-2.024 2.025" /> <path d="m8.5 16.5-1-1" />`, opt)
}

// Hamburger renders the "hamburger" icon.
//
// Usage in templates:
//
//	{{ lucide "hamburger" }}
//
// Direct usage in Go:
//
//	lucide.Hamburger()
//	lucide.Hamburger(lucide.Options{Size: 32, Class: "my-icon"})
func Hamburger(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 16H4a2 2 0 1 1 0-4h16a2 2 0 1 1 0 4h-4.25" /> <path d="M5 12a2 2 0 0 1-2-2 9 7 0 0 1 18 0 2 2 0 0 1-2 2" /> <path d="M5 16a2 2 0 0 0-2 2 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 2 2 0 0 0-2-2q0 0 0 0" /> <path d="m6.67 12 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2" />`, opt)
}

// Hammer renders the "hammer" icon.
//
// Usage in templates:
//
//	{{ lucide "hammer" }}
//
// Direct usage in Go:
//
//	lucide.Hammer()
//	lucide.Hammer(lucide.Options{Size: 32, Class: "my-icon"})
func Hammer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 12-9.373 9.373a1 1 0 0 1-3.001-3L12 9" /> <path d="m18 15 4-4" /> <path d="m21.5 11.5-1.914-1.914A2 2 0 0 1 19 8.172v-.344a2 2 0 0 0-.586-1.414l-1.657-1.657A6 6 0 0 0 12.516 3H9l1.243 1.243A6 6 0 0 1 12 8.485V10l2 2h1.172a2 2 0 0 1 1.414.586L18.5 14.5" />`, opt)
}

// Hand renders the "hand" icon.
//
// Usage in templates:
//
//	{{ lucide "hand" }}
//
// Direct usage in Go:
//
//	lucide.Hand()
//	lucide.Hand(lucide.Options{Size: 32, Class: "my-icon"})
func Hand(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 11V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2" /> <path d="M14 10V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2" /> <path d="M10 10.5V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2v8" /> <path d="M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15" />`, opt)
}

// HandCoins renders the "hand-coins" icon.
//
// Usage in templates:
//
//	{{ lucide "hand-coins" }}
//
// Direct usage in Go:
//
//	lucide.HandCoins()
//	lucide.HandCoins(lucide.Options{Size: 32, Class: "my-icon"})
func HandCoins(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 15h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 17" /> <path d="m7 21 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9" /> <path d="m2 16 6 6" /> <circle cx="16" cy="9" r="2.9" /> <circle cx="6" cy="5" r="3" />`, opt)
}

// HandFist renders the "hand-fist" icon.
//
// Usage in templates:
//
//	{{ lucide "hand-fist" }}
//
// Direct usage in Go:
//
//	lucide.HandFist()
//	lucide.HandFist(lucide.Options{Size: 32, Class: "my-icon"})
func HandFist(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.035 17.012a3 3 0 0 0-3-3l-.311-.002a.72.72 0 0 1-.505-1.229l1.195-1.195A2 2 0 0 1 10.828 11H12a2 2 0 0 0 0-4H9.243a3 3 0 0 0-2.122.879l-2.707 2.707A4.83 4.83 0 0 0 3 14a8 8 0 0 0 8 8h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v2a2 2 0 1 0 4 0" /> <path d="M13.888 9.662A2 2 0 0 0 17 8V5A2 2 0 1 0 13 5" /> <path d="M9 5A2 2 0 1 0 5 5V10" /> <path d="M9 7V4A2 2 0 1 1 13 4V7.268" />`, opt)
}

// HandGrab renders the "hand-grab" icon.
//
// Usage in templates:
//
//	{{ lucide "hand-grab" }}
//
// Direct usage in Go:
//
//	lucide.HandGrab()
//	lucide.HandGrab(lucide.Options{Size: 32, Class: "my-icon"})
func HandGrab(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 11.5V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4" /> <path d="M14 10V8a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2" /> <path d="M10 9.9V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5" /> <path d="M6 14a2 2 0 0 0-2-2a2 2 0 0 0-2 2" /> <path d="M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0" />`, opt)
}

// HandHeart renders the "hand-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "hand-heart" }}
//
// Direct usage in Go:
//
//	lucide.HandHeart()
//	lucide.HandHeart(lucide.Options{Size: 32, Class: "my-icon"})
func HandHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 14h2a2 2 0 0 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 16" /> <path d="m14.45 13.39 5.05-4.694C20.196 8 21 6.85 21 5.75a2.75 2.75 0 0 0-4.797-1.837.276.276 0 0 1-.406 0A2.75 2.75 0 0 0 11 5.75c0 1.2.802 2.248 1.5 2.946L16 11.95" /> <path d="m2 15 6 6" /> <path d="m7 20 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a1 1 0 0 0-2.75-2.91" />`, opt)
}

// HandHelping renders the "hand-helping" icon.
//
// Usage in templates:
//
//	{{ lucide "hand-helping" }}
//
// Direct usage in Go:
//
//	lucide.HandHelping()
//	lucide.HandHelping(lucide.Options{Size: 32, Class: "my-icon"})
func HandHelping(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 12h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 14" /> <path d="m7 18 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9" /> <path d="m2 13 6 6" />`, opt)
}

// HandMetal renders the "hand-metal" icon.
//
// Usage in templates:
//
//	{{ lucide "hand-metal" }}
//
// Direct usage in Go:
//
//	lucide.HandMetal()
//	lucide.HandMetal(lucide.Options{Size: 32, Class: "my-icon"})
func HandMetal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 12.5V10a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4" /> <path d="M14 11V9a2 2 0 1 0-4 0v2" /> <path d="M10 10.5V5a2 2 0 1 0-4 0v9" /> <path d="m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5" />`, opt)
}

// HandPlatter renders the "hand-platter" icon.
//
// Usage in templates:
//
//	{{ lucide "hand-platter" }}
//
// Direct usage in Go:
//
//	lucide.HandPlatter()
//	lucide.HandPlatter(lucide.Options{Size: 32, Class: "my-icon"})
func HandPlatter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3V2" /> <path d="m15.4 17.4 3.2-2.8a2 2 0 1 1 2.8 2.9l-3.6 3.3c-.7.8-1.7 1.2-2.8 1.2h-4c-1.1 0-2.1-.4-2.8-1.2l-1.302-1.464A1 1 0 0 0 6.151 19H5" /> <path d="M2 14h12a2 2 0 0 1 0 4h-2" /> <path d="M4 10h16" /> <path d="M5 10a7 7 0 0 1 14 0" /> <path d="M5 14v6a1 1 0 0 1-1 1H2" />`, opt)
}

// Handbag renders the "handbag" icon.
//
// Usage in templates:
//
//	{{ lucide "handbag" }}
//
// Direct usage in Go:
//
//	lucide.Handbag()
//	lucide.Handbag(lucide.Options{Size: 32, Class: "my-icon"})
func Handbag(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.048 18.566A2 2 0 0 0 4 21h16a2 2 0 0 0 1.952-2.434l-2-9A2 2 0 0 0 18 8H6a2 2 0 0 0-1.952 1.566z" /> <path d="M8 11V6a4 4 0 0 1 8 0v5" />`, opt)
}

// Handshake renders the "handshake" icon.
//
// Usage in templates:
//
//	{{ lucide "handshake" }}
//
// Direct usage in Go:
//
//	lucide.Handshake()
//	lucide.Handshake(lucide.Options{Size: 32, Class: "my-icon"})
func Handshake(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11 17 2 2a1 1 0 1 0 3-3" /> <path d="m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4" /> <path d="m21 3 1 11h-2" /> <path d="M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3" /> <path d="M3 4h8" />`, opt)
}

// HardDrive renders the "hard-drive" icon.
//
// Usage in templates:
//
//	{{ lucide "hard-drive" }}
//
// Direct usage in Go:
//
//	lucide.HardDrive()
//	lucide.HardDrive(lucide.Options{Size: 32, Class: "my-icon"})
func HardDrive(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="22" x2="2" y1="12" y2="12" /> <path d="M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z" /> <line x1="6" x2="6.01" y1="16" y2="16" /> <line x1="10" x2="10.01" y1="16" y2="16" />`, opt)
}

// HardDriveDownload renders the "hard-drive-download" icon.
//
// Usage in templates:
//
//	{{ lucide "hard-drive-download" }}
//
// Direct usage in Go:
//
//	lucide.HardDriveDownload()
//	lucide.HardDriveDownload(lucide.Options{Size: 32, Class: "my-icon"})
func HardDriveDownload(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v8" /> <path d="m16 6-4 4-4-4" /> <rect width="20" height="8" x="2" y="14" rx="2" /> <path d="M6 18h.01" /> <path d="M10 18h.01" />`, opt)
}

// HardDriveUpload renders the "hard-drive-upload" icon.
//
// Usage in templates:
//
//	{{ lucide "hard-drive-upload" }}
//
// Direct usage in Go:
//
//	lucide.HardDriveUpload()
//	lucide.HardDriveUpload(lucide.Options{Size: 32, Class: "my-icon"})
func HardDriveUpload(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 6-4-4-4 4" /> <path d="M12 2v8" /> <rect width="20" height="8" x="2" y="14" rx="2" /> <path d="M6 18h.01" /> <path d="M10 18h.01" />`, opt)
}

// HardHat renders the "hard-hat" icon.
//
// Usage in templates:
//
//	{{ lucide "hard-hat" }}
//
// Direct usage in Go:
//
//	lucide.HardHat()
//	lucide.HardHat(lucide.Options{Size: 32, Class: "my-icon"})
func HardHat(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5" /> <path d="M14 6a6 6 0 0 1 6 6v3" /> <path d="M4 15v-3a6 6 0 0 1 6-6" /> <rect x="2" y="15" width="20" height="4" rx="1" />`, opt)
}

// Hash renders the "hash" icon.
//
// Usage in templates:
//
//	{{ lucide "hash" }}
//
// Direct usage in Go:
//
//	lucide.Hash()
//	lucide.Hash(lucide.Options{Size: 32, Class: "my-icon"})
func Hash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="4" x2="20" y1="9" y2="9" /> <line x1="4" x2="20" y1="15" y2="15" /> <line x1="10" x2="8" y1="3" y2="21" /> <line x1="16" x2="14" y1="3" y2="21" />`, opt)
}

// HatGlasses renders the "hat-glasses" icon.
//
// Usage in templates:
//
//	{{ lucide "hat-glasses" }}
//
// Direct usage in Go:
//
//	lucide.HatGlasses()
//	lucide.HatGlasses(lucide.Options{Size: 32, Class: "my-icon"})
func HatGlasses(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 18a2 2 0 0 0-4 0" /> <path d="m19 11-2.11-6.657a2 2 0 0 0-2.752-1.148l-1.276.61A2 2 0 0 1 12 4H8.5a2 2 0 0 0-1.925 1.456L5 11" /> <path d="M2 11h20" /> <circle cx="17" cy="18" r="3" /> <circle cx="7" cy="18" r="3" />`, opt)
}

// Haze renders the "haze" icon.
//
// Usage in templates:
//
//	{{ lucide "haze" }}
//
// Direct usage in Go:
//
//	lucide.Haze()
//	lucide.Haze(lucide.Options{Size: 32, Class: "my-icon"})
func Haze(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m5.2 6.2 1.4 1.4" /> <path d="M2 13h2" /> <path d="M20 13h2" /> <path d="m17.4 7.6 1.4-1.4" /> <path d="M22 17H2" /> <path d="M22 21H2" /> <path d="M16 13a4 4 0 0 0-8 0" /> <path d="M12 5V2.5" />`, opt)
}

// HdmiPort renders the "hdmi-port" icon.
//
// Usage in templates:
//
//	{{ lucide "hdmi-port" }}
//
// Direct usage in Go:
//
//	lucide.HdmiPort()
//	lucide.HdmiPort(lucide.Options{Size: 32, Class: "my-icon"})
func HdmiPort(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 9a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h1l2 2h12l2-2h1a1 1 0 0 0 1-1Z" /> <path d="M7.5 12h9" />`, opt)
}

// Heading renders the "heading" icon.
//
// Usage in templates:
//
//	{{ lucide "heading" }}
//
// Direct usage in Go:
//
//	lucide.Heading()
//	lucide.Heading(lucide.Options{Size: 32, Class: "my-icon"})
func Heading(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 12h12" /> <path d="M6 20V4" /> <path d="M18 20V4" />`, opt)
}

// Heading1 renders the "heading-1" icon.
//
// Usage in templates:
//
//	{{ lucide "heading-1" }}
//
// Direct usage in Go:
//
//	lucide.Heading1()
//	lucide.Heading1(lucide.Options{Size: 32, Class: "my-icon"})
func Heading1(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 12h8" /> <path d="M4 18V6" /> <path d="M12 18V6" /> <path d="m17 12 3-2v8" />`, opt)
}

// Heading2 renders the "heading-2" icon.
//
// Usage in templates:
//
//	{{ lucide "heading-2" }}
//
// Direct usage in Go:
//
//	lucide.Heading2()
//	lucide.Heading2(lucide.Options{Size: 32, Class: "my-icon"})
func Heading2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 12h8" /> <path d="M4 18V6" /> <path d="M12 18V6" /> <path d="M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1" />`, opt)
}

// Heading3 renders the "heading-3" icon.
//
// Usage in templates:
//
//	{{ lucide "heading-3" }}
//
// Direct usage in Go:
//
//	lucide.Heading3()
//	lucide.Heading3(lucide.Options{Size: 32, Class: "my-icon"})
func Heading3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 12h8" /> <path d="M4 18V6" /> <path d="M12 18V6" /> <path d="M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2" /> <path d="M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2" />`, opt)
}

// Heading4 renders the "heading-4" icon.
//
// Usage in templates:
//
//	{{ lucide "heading-4" }}
//
// Direct usage in Go:
//
//	lucide.Heading4()
//	lucide.Heading4(lucide.Options{Size: 32, Class: "my-icon"})
func Heading4(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 18V6" /> <path d="M17 10v3a1 1 0 0 0 1 1h3" /> <path d="M21 10v8" /> <path d="M4 12h8" /> <path d="M4 18V6" />`, opt)
}

// Heading5 renders the "heading-5" icon.
//
// Usage in templates:
//
//	{{ lucide "heading-5" }}
//
// Direct usage in Go:
//
//	lucide.Heading5()
//	lucide.Heading5(lucide.Options{Size: 32, Class: "my-icon"})
func Heading5(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 12h8" /> <path d="M4 18V6" /> <path d="M12 18V6" /> <path d="M17 13v-3h4" /> <path d="M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17" />`, opt)
}

// Heading6 renders the "heading-6" icon.
//
// Usage in templates:
//
//	{{ lucide "heading-6" }}
//
// Direct usage in Go:
//
//	lucide.Heading6()
//	lucide.Heading6(lucide.Options{Size: 32, Class: "my-icon"})
func Heading6(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 12h8" /> <path d="M4 18V6" /> <path d="M12 18V6" /> <circle cx="19" cy="16" r="2" /> <path d="M20 10c-2 2-3 3.5-3 6" />`, opt)
}

// HeadphoneOff renders the "headphone-off" icon.
//
// Usage in templates:
//
//	{{ lucide "headphone-off" }}
//
// Direct usage in Go:
//
//	lucide.HeadphoneOff()
//	lucide.HeadphoneOff(lucide.Options{Size: 32, Class: "my-icon"})
func HeadphoneOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 14h-1.343" /> <path d="M9.128 3.47A9 9 0 0 1 21 12v3.343" /> <path d="m2 2 20 20" /> <path d="M20.414 20.414A2 2 0 0 1 19 21h-1a2 2 0 0 1-2-2v-3" /> <path d="M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 2.636-6.364" />`, opt)
}

// Headphones renders the "headphones" icon.
//
// Usage in templates:
//
//	{{ lucide "headphones" }}
//
// Direct usage in Go:
//
//	lucide.Headphones()
//	lucide.Headphones(lucide.Options{Size: 32, Class: "my-icon"})
func Headphones(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3" />`, opt)
}

// Headset renders the "headset" icon.
//
// Usage in templates:
//
//	{{ lucide "headset" }}
//
// Direct usage in Go:
//
//	lucide.Headset()
//	lucide.Headset(lucide.Options{Size: 32, Class: "my-icon"})
func Headset(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 11h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5Zm0 0a9 9 0 1 1 18 0m0 0v5a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3Z" /> <path d="M21 16v2a4 4 0 0 1-4 4h-5" />`, opt)
}

// Heart renders the "heart" icon.
//
// Usage in templates:
//
//	{{ lucide "heart" }}
//
// Direct usage in Go:
//
//	lucide.Heart()
//	lucide.Heart(lucide.Options{Size: 32, Class: "my-icon"})
func Heart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5c0 2.29-1.5 4-3 5.5l-5.492 5.313a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5" />`, opt)
}

// HeartCrack renders the "heart-crack" icon.
//
// Usage in templates:
//
//	{{ lucide "heart-crack" }}
//
// Direct usage in Go:
//
//	lucide.HeartCrack()
//	lucide.HeartCrack(lucide.Options{Size: 32, Class: "my-icon"})
func HeartCrack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.409 5.824c-.702.792-1.15 1.496-1.415 2.166l2.153 2.156a.5.5 0 0 1 0 .707l-2.293 2.293a.5.5 0 0 0 0 .707L12 15" /> <path d="M13.508 20.313a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5a5.5 5.5 0 0 1 9.591-3.677.6.6 0 0 0 .818.001A5.5 5.5 0 0 1 22 9.5c0 2.29-1.5 4-3 5.5z" />`, opt)
}

// HeartHandshake renders the "heart-handshake" icon.
//
// Usage in templates:
//
//	{{ lucide "heart-handshake" }}
//
// Direct usage in Go:
//
//	lucide.HeartHandshake()
//	lucide.HeartHandshake(lucide.Options{Size: 32, Class: "my-icon"})
func HeartHandshake(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19.414 14.414C21 12.828 22 11.5 22 9.5a5.5 5.5 0 0 0-9.591-3.676.6.6 0 0 1-.818.001A5.5 5.5 0 0 0 2 9.5c0 2.3 1.5 4 3 5.5l5.535 5.362a2 2 0 0 0 2.879.052 2.12 2.12 0 0 0-.004-3 2.124 2.124 0 1 0 3-3 2.124 2.124 0 0 0 3.004 0 2 2 0 0 0 0-2.828l-1.881-1.882a2.41 2.41 0 0 0-3.409 0l-1.71 1.71a2 2 0 0 1-2.828 0 2 2 0 0 1 0-2.828l2.823-2.762" />`, opt)
}

// HeartMinus renders the "heart-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "heart-minus" }}
//
// Direct usage in Go:
//
//	lucide.HeartMinus()
//	lucide.HeartMinus(lucide.Options{Size: 32, Class: "my-icon"})
func HeartMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14.876 18.99-1.368 1.323a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5a5.2 5.2 0 0 1-.244 1.572" /> <path d="M15 15h6" />`, opt)
}

// HeartOff renders the "heart-off" icon.
//
// Usage in templates:
//
//	{{ lucide "heart-off" }}
//
// Direct usage in Go:
//
//	lucide.HeartOff()
//	lucide.HeartOff(lucide.Options{Size: 32, Class: "my-icon"})
func HeartOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.5 4.893a5.5 5.5 0 0 1 1.091.931.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5c0 1.872-1.002 3.356-2.187 4.655" /> <path d="m16.967 16.967-3.459 3.346a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5a5.5 5.5 0 0 1 2.747-4.761" /> <path d="m2 2 20 20" />`, opt)
}

// HeartPlus renders the "heart-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "heart-plus" }}
//
// Direct usage in Go:
//
//	lucide.HeartPlus()
//	lucide.HeartPlus(lucide.Options{Size: 32, Class: "my-icon"})
func HeartPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14.479 19.374-.971.939a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5a5.2 5.2 0 0 1-.219 1.49" /> <path d="M15 15h6" /> <path d="M18 12v6" />`, opt)
}

// HeartPulse renders the "heart-pulse" icon.
//
// Usage in templates:
//
//	{{ lucide "heart-pulse" }}
//
// Direct usage in Go:
//
//	lucide.HeartPulse()
//	lucide.HeartPulse(lucide.Options{Size: 32, Class: "my-icon"})
func HeartPulse(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5c0 2.29-1.5 4-3 5.5l-5.492 5.313a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5" /> <path d="M3.22 13H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27" />`, opt)
}

// Heater renders the "heater" icon.
//
// Usage in templates:
//
//	{{ lucide "heater" }}
//
// Direct usage in Go:
//
//	lucide.Heater()
//	lucide.Heater(lucide.Options{Size: 32, Class: "my-icon"})
func Heater(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 8c2-3-2-3 0-6" /> <path d="M15.5 8c2-3-2-3 0-6" /> <path d="M6 10h.01" /> <path d="M6 14h.01" /> <path d="M10 16v-4" /> <path d="M14 16v-4" /> <path d="M18 16v-4" /> <path d="M20 6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3" /> <path d="M5 20v2" /> <path d="M19 20v2" />`, opt)
}

// Hexagon renders the "hexagon" icon.
//
// Usage in templates:
//
//	{{ lucide "hexagon" }}
//
// Direct usage in Go:
//
//	lucide.Hexagon()
//	lucide.Hexagon(lucide.Options{Size: 32, Class: "my-icon"})
func Hexagon(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" />`, opt)
}

// Highlighter renders the "highlighter" icon.
//
// Usage in templates:
//
//	{{ lucide "highlighter" }}
//
// Direct usage in Go:
//
//	lucide.Highlighter()
//	lucide.Highlighter(lucide.Options{Size: 32, Class: "my-icon"})
func Highlighter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m9 11-6 6v3h9l3-3" /> <path d="m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4" />`, opt)
}

// History renders the "history" icon.
//
// Usage in templates:
//
//	{{ lucide "history" }}
//
// Direct usage in Go:
//
//	lucide.History()
//	lucide.History(lucide.Options{Size: 32, Class: "my-icon"})
func History(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" /> <path d="M3 3v5h5" /> <path d="M12 7v5l4 2" />`, opt)
}

// Hop renders the "hop" icon.
//
// Usage in templates:
//
//	{{ lucide "hop" }}
//
// Direct usage in Go:
//
//	lucide.Hop()
//	lucide.Hop(lucide.Options{Size: 32, Class: "my-icon"})
func Hop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.82 16.12c1.69.6 3.91.79 5.18.85.55.03 1-.42.97-.97-.06-1.27-.26-3.5-.85-5.18" /> <path d="M11.5 6.5c1.64 0 5-.38 6.71-1.07.52-.2.55-.82.12-1.17A10 10 0 0 0 4.26 18.33c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.88.88 0 0 0 .73-.74c.3-2.14-.15-3.5-.61-4.88" /> <path d="M15.62 16.95c.2.85.62 2.76.5 4.28a.77.77 0 0 1-.9.7 16.64 16.64 0 0 1-4.08-1.36" /> <path d="M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .96-.96 17.68 17.68 0 0 0-.9-4.87" /> <path d="M16.94 15.62c.86.2 2.77.62 4.29.5a.77.77 0 0 0 .7-.9 16.64 16.64 0 0 0-1.36-4.08" /> <path d="M17.99 5.52a20.82 20.82 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-2.33.2-5.3-.32-8.27-1.57" /> <path d="M4.93 4.93 3 3a.7.7 0 0 1 0-1" /> <path d="M9.58 12.18c1.24 2.98 1.77 5.95 1.57 8.28a.8.8 0 0 1-1.13.68 20.82 20.82 0 0 1-4.5-3.15" />`, opt)
}

// HopOff renders the "hop-off" icon.
//
// Usage in templates:
//
//	{{ lucide "hop-off" }}
//
// Direct usage in Go:
//
//	lucide.HopOff()
//	lucide.HopOff(lucide.Options{Size: 32, Class: "my-icon"})
func HopOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.82 16.12c1.69.6 3.91.79 5.18.85.28.01.53-.09.7-.27" /> <path d="M11.14 20.57c.52.24 2.44 1.12 4.08 1.37.46.06.86-.25.9-.71.12-1.52-.3-3.43-.5-4.28" /> <path d="M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .7-.26" /> <path d="M17.99 5.52a20.83 20.83 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-1.17.1-2.5.02-3.9-.25" /> <path d="M20.57 11.14c.24.52 1.12 2.44 1.37 4.08.04.3-.08.59-.31.75" /> <path d="M4.93 4.93a10 10 0 0 0-.67 13.4c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.85.85 0 0 0 .48-.24" /> <path d="M5.52 17.99c1.05.95 2.91 2.42 4.5 3.15a.8.8 0 0 0 1.13-.68c.2-2.34-.33-5.3-1.57-8.28" /> <path d="M8.35 2.68a10 10 0 0 1 9.98 1.58c.43.35.4.96-.12 1.17-1.5.6-4.3.98-6.07 1.05" /> <path d="m2 2 20 20" />`, opt)
}

// Hospital renders the "hospital" icon.
//
// Usage in templates:
//
//	{{ lucide "hospital" }}
//
// Direct usage in Go:
//
//	lucide.Hospital()
//	lucide.Hospital(lucide.Options{Size: 32, Class: "my-icon"})
func Hospital(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 7v4" /> <path d="M14 21v-3a2 2 0 0 0-4 0v3" /> <path d="M14 9h-4" /> <path d="M18 11h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-9a2 2 0 0 1 2-2h2" /> <path d="M18 21V5a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16" />`, opt)
}

// Hotel renders the "hotel" icon.
//
// Usage in templates:
//
//	{{ lucide "hotel" }}
//
// Direct usage in Go:
//
//	lucide.Hotel()
//	lucide.Hotel(lucide.Options{Size: 32, Class: "my-icon"})
func Hotel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 22v-6.57" /> <path d="M12 11h.01" /> <path d="M12 7h.01" /> <path d="M14 15.43V22" /> <path d="M15 16a5 5 0 0 0-6 0" /> <path d="M16 11h.01" /> <path d="M16 7h.01" /> <path d="M8 11h.01" /> <path d="M8 7h.01" /> <rect x="4" y="2" width="16" height="20" rx="2" />`, opt)
}

// Hourglass renders the "hourglass" icon.
//
// Usage in templates:
//
//	{{ lucide "hourglass" }}
//
// Direct usage in Go:
//
//	lucide.Hourglass()
//	lucide.Hourglass(lucide.Options{Size: 32, Class: "my-icon"})
func Hourglass(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 22h14" /> <path d="M5 2h14" /> <path d="M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22" /> <path d="M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2" />`, opt)
}

// House renders the "house" icon.
//
// Usage in templates:
//
//	{{ lucide "house" }}
//
// Direct usage in Go:
//
//	lucide.House()
//	lucide.House(lucide.Options{Size: 32, Class: "my-icon"})
func House(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8" /> <path d="M3 10a2 2 0 0 1 .709-1.528l7-6a2 2 0 0 1 2.582 0l7 6A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />`, opt)
}

// HouseHeart renders the "house-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "house-heart" }}
//
// Direct usage in Go:
//
//	lucide.HouseHeart()
//	lucide.HouseHeart(lucide.Options{Size: 32, Class: "my-icon"})
func HouseHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8.62 13.8A2.25 2.25 0 1 1 12 10.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z" /> <path d="M3 10a2 2 0 0 1 .709-1.528l7-6a2 2 0 0 1 2.582 0l7 6A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />`, opt)
}

// HousePlug renders the "house-plug" icon.
//
// Usage in templates:
//
//	{{ lucide "house-plug" }}
//
// Direct usage in Go:
//
//	lucide.HousePlug()
//	lucide.HousePlug(lucide.Options{Size: 32, Class: "my-icon"})
func HousePlug(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 12V8.964" /> <path d="M14 12V8.964" /> <path d="M15 12a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2a1 1 0 0 1 1-1z" /> <path d="M8.5 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .709-1.528l7-6a2 2 0 0 1 2.582 0l7 6A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2h-5a2 2 0 0 1-2-2v-2" />`, opt)
}

// HousePlus renders the "house-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "house-plus" }}
//
// Direct usage in Go:
//
//	lucide.HousePlus()
//	lucide.HousePlus(lucide.Options{Size: 32, Class: "my-icon"})
func HousePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.35 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .71-1.53l7-6a2 2 0 0 1 2.58 0l7 6A2 2 0 0 1 21 10v2.35" /> <path d="M14.8 12.4A1 1 0 0 0 14 12h-4a1 1 0 0 0-1 1v8" /> <path d="M15 18h6" /> <path d="M18 15v6" />`, opt)
}

// HouseWifi renders the "house-wifi" icon.
//
// Usage in templates:
//
//	{{ lucide "house-wifi" }}
//
// Direct usage in Go:
//
//	lucide.HouseWifi()
//	lucide.HouseWifi(lucide.Options{Size: 32, Class: "my-icon"})
func HouseWifi(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9.5 13.866a4 4 0 0 1 5 .01" /> <path d="M12 17h.01" /> <path d="M3 10a2 2 0 0 1 .709-1.528l7-6a2 2 0 0 1 2.582 0l7 6A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" /> <path d="M7 10.754a8 8 0 0 1 10 0" />`, opt)
}

// IceCreamBowl renders the "ice-cream-bowl" icon.
//
// Usage in templates:
//
//	{{ lucide "ice-cream-bowl" }}
//
// Direct usage in Go:
//
//	lucide.IceCreamBowl()
//	lucide.IceCreamBowl(lucide.Options{Size: 32, Class: "my-icon"})
func IceCreamBowl(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6m-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0" /> <path d="M12.14 11a3.5 3.5 0 1 1 6.71 0" /> <path d="M15.5 6.5a3.5 3.5 0 1 0-7 0" />`, opt)
}

// IceCreamCone renders the "ice-cream-cone" icon.
//
// Usage in templates:
//
//	{{ lucide "ice-cream-cone" }}
//
// Direct usage in Go:
//
//	lucide.IceCreamCone()
//	lucide.IceCreamCone(lucide.Options{Size: 32, Class: "my-icon"})
func IceCreamCone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11" /> <path d="M17 7A5 5 0 0 0 7 7" /> <path d="M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4" />`, opt)
}

// IdCard renders the "id-card" icon.
//
// Usage in templates:
//
//	{{ lucide "id-card" }}
//
// Direct usage in Go:
//
//	lucide.IdCard()
//	lucide.IdCard(lucide.Options{Size: 32, Class: "my-icon"})
func IdCard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 10h2" /> <path d="M16 14h2" /> <path d="M6.17 15a3 3 0 0 1 5.66 0" /> <circle cx="9" cy="11" r="2" /> <rect x="2" y="5" width="20" height="14" rx="2" />`, opt)
}

// IdCardLanyard renders the "id-card-lanyard" icon.
//
// Usage in templates:
//
//	{{ lucide "id-card-lanyard" }}
//
// Direct usage in Go:
//
//	lucide.IdCardLanyard()
//	lucide.IdCardLanyard(lucide.Options{Size: 32, Class: "my-icon"})
func IdCardLanyard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.5 8h-3" /> <path d="m15 2-1 2h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h3" /> <path d="M16.899 22A5 5 0 0 0 7.1 22" /> <path d="m9 2 3 6" /> <circle cx="12" cy="15" r="3" />`, opt)
}

// Image renders the "image" icon.
//
// Usage in templates:
//
//	{{ lucide "image" }}
//
// Direct usage in Go:
//
//	lucide.Image()
//	lucide.Image(lucide.Options{Size: 32, Class: "my-icon"})
func Image(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <circle cx="9" cy="9" r="2" /> <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />`, opt)
}

// ImageDown renders the "image-down" icon.
//
// Usage in templates:
//
//	{{ lucide "image-down" }}
//
// Direct usage in Go:
//
//	lucide.ImageDown()
//	lucide.ImageDown(lucide.Options{Size: 32, Class: "my-icon"})
func ImageDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21" /> <path d="m14 19 3 3v-5.5" /> <path d="m17 22 3-3" /> <circle cx="9" cy="9" r="2" />`, opt)
}

// ImageMinus renders the "image-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "image-minus" }}
//
// Direct usage in Go:
//
//	lucide.ImageMinus()
//	lucide.ImageMinus(lucide.Options{Size: 32, Class: "my-icon"})
func ImageMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7" /> <line x1="16" x2="22" y1="5" y2="5" /> <circle cx="9" cy="9" r="2" /> <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />`, opt)
}

// ImageOff renders the "image-off" icon.
//
// Usage in templates:
//
//	{{ lucide "image-off" }}
//
// Direct usage in Go:
//
//	lucide.ImageOff()
//	lucide.ImageOff(lucide.Options{Size: 32, Class: "my-icon"})
func ImageOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="2" x2="22" y1="2" y2="22" /> <path d="M10.41 10.41a2 2 0 1 1-2.83-2.83" /> <line x1="13.5" x2="6" y1="13.5" y2="21" /> <line x1="18" x2="21" y1="12" y2="15" /> <path d="M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59" /> <path d="M21 15V5a2 2 0 0 0-2-2H9" />`, opt)
}

// ImagePlay renders the "image-play" icon.
//
// Usage in templates:
//
//	{{ lucide "image-play" }}
//
// Direct usage in Go:
//
//	lucide.ImagePlay()
//	lucide.ImagePlay(lucide.Options{Size: 32, Class: "my-icon"})
func ImagePlay(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 15.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997a1 1 0 0 1-1.517-.86z" /> <path d="M21 12.17V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6" /> <path d="m6 21 5-5" /> <circle cx="9" cy="9" r="2" />`, opt)
}

// ImagePlus renders the "image-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "image-plus" }}
//
// Direct usage in Go:
//
//	lucide.ImagePlus()
//	lucide.ImagePlus(lucide.Options{Size: 32, Class: "my-icon"})
func ImagePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5h6" /> <path d="M19 2v6" /> <path d="M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5" /> <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" /> <circle cx="9" cy="9" r="2" />`, opt)
}

// ImageUp renders the "image-up" icon.
//
// Usage in templates:
//
//	{{ lucide "image-up" }}
//
// Direct usage in Go:
//
//	lucide.ImageUp()
//	lucide.ImageUp(lucide.Options{Size: 32, Class: "my-icon"})
func ImageUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21" /> <path d="m14 19.5 3-3 3 3" /> <path d="M17 22v-5.5" /> <circle cx="9" cy="9" r="2" />`, opt)
}

// ImageUpscale renders the "image-upscale" icon.
//
// Usage in templates:
//
//	{{ lucide "image-upscale" }}
//
// Direct usage in Go:
//
//	lucide.ImageUpscale()
//	lucide.ImageUpscale(lucide.Options{Size: 32, Class: "my-icon"})
func ImageUpscale(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 3h5v5" /> <path d="M17 21h2a2 2 0 0 0 2-2" /> <path d="M21 12v3" /> <path d="m21 3-5 5" /> <path d="M3 7V5a2 2 0 0 1 2-2" /> <path d="m5 21 4.144-4.144a1.21 1.21 0 0 1 1.712 0L13 19" /> <path d="M9 3h3" /> <rect x="3" y="11" width="10" height="10" rx="1" />`, opt)
}

// Images renders the "images" icon.
//
// Usage in templates:
//
//	{{ lucide "images" }}
//
// Direct usage in Go:
//
//	lucide.Images()
//	lucide.Images(lucide.Options{Size: 32, Class: "my-icon"})
func Images(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m22 11-1.296-1.296a2.4 2.4 0 0 0-3.408 0L11 16" /> <path d="M4 8a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2" /> <circle cx="13" cy="7" r="1" fill="currentColor" /> <rect x="8" y="2" width="14" height="14" rx="2" />`, opt)
}

// Import renders the "import" icon.
//
// Usage in templates:
//
//	{{ lucide "import" }}
//
// Direct usage in Go:
//
//	lucide.Import()
//	lucide.Import(lucide.Options{Size: 32, Class: "my-icon"})
func Import(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v12" /> <path d="m8 11 4 4 4-4" /> <path d="M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4" />`, opt)
}

// Inbox renders the "inbox" icon.
//
// Usage in templates:
//
//	{{ lucide "inbox" }}
//
// Direct usage in Go:
//
//	lucide.Inbox()
//	lucide.Inbox(lucide.Options{Size: 32, Class: "my-icon"})
func Inbox(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<polyline points="22 12 16 12 14 15 10 15 8 12 2 12" /> <path d="M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z" />`, opt)
}

// IndianRupee renders the "indian-rupee" icon.
//
// Usage in templates:
//
//	{{ lucide "indian-rupee" }}
//
// Direct usage in Go:
//
//	lucide.IndianRupee()
//	lucide.IndianRupee(lucide.Options{Size: 32, Class: "my-icon"})
func IndianRupee(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 3h12" /> <path d="M6 8h12" /> <path d="m6 13 8.5 8" /> <path d="M6 13h3" /> <path d="M9 13c6.667 0 6.667-10 0-10" />`, opt)
}

// Infinity renders the "infinity" icon.
//
// Usage in templates:
//
//	{{ lucide "infinity" }}
//
// Direct usage in Go:
//
//	lucide.Infinity()
//	lucide.Infinity(lucide.Options{Size: 32, Class: "my-icon"})
func Infinity(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 16c5 0 7-8 12-8a4 4 0 0 1 0 8c-5 0-7-8-12-8a4 4 0 1 0 0 8" />`, opt)
}

// Info renders the "info" icon.
//
// Usage in templates:
//
//	{{ lucide "info" }}
//
// Direct usage in Go:
//
//	lucide.Info()
//	lucide.Info(lucide.Options{Size: 32, Class: "my-icon"})
func Info(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M12 16v-4" /> <path d="M12 8h.01" />`, opt)
}

// InspectionPanel renders the "inspection-panel" icon.
//
// Usage in templates:
//
//	{{ lucide "inspection-panel" }}
//
// Direct usage in Go:
//
//	lucide.InspectionPanel()
//	lucide.InspectionPanel(lucide.Options{Size: 32, Class: "my-icon"})
func InspectionPanel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M7 7h.01" /> <path d="M17 7h.01" /> <path d="M7 17h.01" /> <path d="M17 17h.01" />`, opt)
}

// Instagram renders the "instagram" icon.
//
// Usage in templates:
//
//	{{ lucide "instagram" }}
//
// Direct usage in Go:
//
//	lucide.Instagram()
//	lucide.Instagram(lucide.Options{Size: 32, Class: "my-icon"})
func Instagram(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="20" x="2" y="2" rx="5" ry="5" /> <path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" /> <line x1="17.5" x2="17.51" y1="6.5" y2="6.5" />`, opt)
}

// Italic renders the "italic" icon.
//
// Usage in templates:
//
//	{{ lucide "italic" }}
//
// Direct usage in Go:
//
//	lucide.Italic()
//	lucide.Italic(lucide.Options{Size: 32, Class: "my-icon"})
func Italic(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="19" x2="10" y1="4" y2="4" /> <line x1="14" x2="5" y1="20" y2="20" /> <line x1="15" x2="9" y1="4" y2="20" />`, opt)
}

// IterationCcw renders the "iteration-ccw" icon.
//
// Usage in templates:
//
//	{{ lucide "iteration-ccw" }}
//
// Direct usage in Go:
//
//	lucide.IterationCcw()
//	lucide.IterationCcw(lucide.Options{Size: 32, Class: "my-icon"})
func IterationCcw(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 14 4 4-4 4" /> <path d="M20 10a8 8 0 1 0-8 8h8" />`, opt)
}

// IterationCw renders the "iteration-cw" icon.
//
// Usage in templates:
//
//	{{ lucide "iteration-cw" }}
//
// Direct usage in Go:
//
//	lucide.IterationCw()
//	lucide.IterationCw(lucide.Options{Size: 32, Class: "my-icon"})
func IterationCw(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 10a8 8 0 1 1 8 8H4" /> <path d="m8 22-4-4 4-4" />`, opt)
}

// JapaneseYen renders the "japanese-yen" icon.
//
// Usage in templates:
//
//	{{ lucide "japanese-yen" }}
//
// Direct usage in Go:
//
//	lucide.JapaneseYen()
//	lucide.JapaneseYen(lucide.Options{Size: 32, Class: "my-icon"})
func JapaneseYen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 9.5V21m0-11.5L6 3m6 6.5L18 3" /> <path d="M6 15h12" /> <path d="M6 11h12" />`, opt)
}

// Joystick renders the "joystick" icon.
//
// Usage in templates:
//
//	{{ lucide "joystick" }}
//
// Direct usage in Go:
//
//	lucide.Joystick()
//	lucide.Joystick(lucide.Options{Size: 32, Class: "my-icon"})
func Joystick(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z" /> <path d="M6 15v-2" /> <path d="M12 15V9" /> <circle cx="12" cy="6" r="3" />`, opt)
}

// Kanban renders the "kanban" icon.
//
// Usage in templates:
//
//	{{ lucide "kanban" }}
//
// Direct usage in Go:
//
//	lucide.Kanban()
//	lucide.Kanban(lucide.Options{Size: 32, Class: "my-icon"})
func Kanban(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 3v14" /> <path d="M12 3v8" /> <path d="M19 3v18" />`, opt)
}

// Kayak renders the "kayak" icon.
//
// Usage in templates:
//
//	{{ lucide "kayak" }}
//
// Direct usage in Go:
//
//	lucide.Kayak()
//	lucide.Kayak(lucide.Options{Size: 32, Class: "my-icon"})
func Kayak(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 17a1 1 0 0 0-1 1v1a2 2 0 1 0 2-2z" /> <path d="M20.97 3.61a.45.45 0 0 0-.58-.58C10.2 6.6 6.6 10.2 3.03 20.39a.45.45 0 0 0 .58.58C13.8 17.4 17.4 13.8 20.97 3.61" /> <path d="m6.707 6.707 10.586 10.586" /> <path d="M7 5a2 2 0 1 0-2 2h1a1 1 0 0 0 1-1z" />`, opt)
}

// Key renders the "key" icon.
//
// Usage in templates:
//
//	{{ lucide "key" }}
//
// Direct usage in Go:
//
//	lucide.Key()
//	lucide.Key(lucide.Options{Size: 32, Class: "my-icon"})
func Key(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4" /> <path d="m21 2-9.6 9.6" /> <circle cx="7.5" cy="15.5" r="5.5" />`, opt)
}

// KeyRound renders the "key-round" icon.
//
// Usage in templates:
//
//	{{ lucide "key-round" }}
//
// Direct usage in Go:
//
//	lucide.KeyRound()
//	lucide.KeyRound(lucide.Options{Size: 32, Class: "my-icon"})
func KeyRound(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z" /> <circle cx="16.5" cy="7.5" r=".5" fill="currentColor" />`, opt)
}

// KeySquare renders the "key-square" icon.
//
// Usage in templates:
//
//	{{ lucide "key-square" }}
//
// Direct usage in Go:
//
//	lucide.KeySquare()
//	lucide.KeySquare(lucide.Options{Size: 32, Class: "my-icon"})
func KeySquare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.4 2.7a2.5 2.5 0 0 1 3.4 0l5.5 5.5a2.5 2.5 0 0 1 0 3.4l-3.7 3.7a2.5 2.5 0 0 1-3.4 0L8.7 9.8a2.5 2.5 0 0 1 0-3.4z" /> <path d="m14 7 3 3" /> <path d="m9.4 10.6-6.814 6.814A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814" />`, opt)
}

// Keyboard renders the "keyboard" icon.
//
// Usage in templates:
//
//	{{ lucide "keyboard" }}
//
// Direct usage in Go:
//
//	lucide.Keyboard()
//	lucide.Keyboard(lucide.Options{Size: 32, Class: "my-icon"})
func Keyboard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 8h.01" /> <path d="M12 12h.01" /> <path d="M14 8h.01" /> <path d="M16 12h.01" /> <path d="M18 8h.01" /> <path d="M6 8h.01" /> <path d="M7 16h10" /> <path d="M8 12h.01" /> <rect width="20" height="16" x="2" y="4" rx="2" />`, opt)
}

// KeyboardMusic renders the "keyboard-music" icon.
//
// Usage in templates:
//
//	{{ lucide "keyboard-music" }}
//
// Direct usage in Go:
//
//	lucide.KeyboardMusic()
//	lucide.KeyboardMusic(lucide.Options{Size: 32, Class: "my-icon"})
func KeyboardMusic(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="16" x="2" y="4" rx="2" /> <path d="M6 8h4" /> <path d="M14 8h.01" /> <path d="M18 8h.01" /> <path d="M2 12h20" /> <path d="M6 12v4" /> <path d="M10 12v4" /> <path d="M14 12v4" /> <path d="M18 12v4" />`, opt)
}

// KeyboardOff renders the "keyboard-off" icon.
//
// Usage in templates:
//
//	{{ lucide "keyboard-off" }}
//
// Direct usage in Go:
//
//	lucide.KeyboardOff()
//	lucide.KeyboardOff(lucide.Options{Size: 32, Class: "my-icon"})
func KeyboardOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M 20 4 A2 2 0 0 1 22 6" /> <path d="M 22 6 L 22 16.41" /> <path d="M 7 16 L 16 16" /> <path d="M 9.69 4 L 20 4" /> <path d="M14 8h.01" /> <path d="M18 8h.01" /> <path d="m2 2 20 20" /> <path d="M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2" /> <path d="M6 8h.01" /> <path d="M8 12h.01" />`, opt)
}

// Lamp renders the "lamp" icon.
//
// Usage in templates:
//
//	{{ lucide "lamp" }}
//
// Direct usage in Go:
//
//	lucide.Lamp()
//	lucide.Lamp(lucide.Options{Size: 32, Class: "my-icon"})
func Lamp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 12v6" /> <path d="M4.077 10.615A1 1 0 0 0 5 12h14a1 1 0 0 0 .923-1.385l-3.077-7.384A2 2 0 0 0 15 2H9a2 2 0 0 0-1.846 1.23Z" /> <path d="M8 20a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1z" />`, opt)
}

// LampCeiling renders the "lamp-ceiling" icon.
//
// Usage in templates:
//
//	{{ lucide "lamp-ceiling" }}
//
// Direct usage in Go:
//
//	lucide.LampCeiling()
//	lucide.LampCeiling(lucide.Options{Size: 32, Class: "my-icon"})
func LampCeiling(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v5" /> <path d="M14.829 15.998a3 3 0 1 1-5.658 0" /> <path d="M20.92 14.606A1 1 0 0 1 20 16H4a1 1 0 0 1-.92-1.394l3-7A1 1 0 0 1 7 7h10a1 1 0 0 1 .92.606z" />`, opt)
}

// LampDesk renders the "lamp-desk" icon.
//
// Usage in templates:
//
//	{{ lucide "lamp-desk" }}
//
// Direct usage in Go:
//
//	lucide.LampDesk()
//	lucide.LampDesk(lucide.Options{Size: 32, Class: "my-icon"})
func LampDesk(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.293 2.293a1 1 0 0 1 1.414 0l2.5 2.5 5.994 1.227a1 1 0 0 1 .506 1.687l-7 7a1 1 0 0 1-1.687-.506l-1.227-5.994-2.5-2.5a1 1 0 0 1 0-1.414z" /> <path d="m14.207 4.793-3.414 3.414" /> <path d="M3 20a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1z" /> <path d="m9.086 6.5-4.793 4.793a1 1 0 0 0-.18 1.17L7 18" />`, opt)
}

// LampFloor renders the "lamp-floor" icon.
//
// Usage in templates:
//
//	{{ lucide "lamp-floor" }}
//
// Direct usage in Go:
//
//	lucide.LampFloor()
//	lucide.LampFloor(lucide.Options{Size: 32, Class: "my-icon"})
func LampFloor(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 10v12" /> <path d="M17.929 7.629A1 1 0 0 1 17 9H7a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 9 2h6a1 1 0 0 1 .928.629z" /> <path d="M9 22h6" />`, opt)
}

// LampWallDown renders the "lamp-wall-down" icon.
//
// Usage in templates:
//
//	{{ lucide "lamp-wall-down" }}
//
// Direct usage in Go:
//
//	lucide.LampWallDown()
//	lucide.LampWallDown(lucide.Options{Size: 32, Class: "my-icon"})
func LampWallDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19.929 18.629A1 1 0 0 1 19 20H9a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 11 13h6a1 1 0 0 1 .928.629z" /> <path d="M6 3a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z" /> <path d="M8 6h4a2 2 0 0 1 2 2v5" />`, opt)
}

// LampWallUp renders the "lamp-wall-up" icon.
//
// Usage in templates:
//
//	{{ lucide "lamp-wall-up" }}
//
// Direct usage in Go:
//
//	lucide.LampWallUp()
//	lucide.LampWallUp(lucide.Options{Size: 32, Class: "my-icon"})
func LampWallUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19.929 9.629A1 1 0 0 1 19 11H9a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 11 4h6a1 1 0 0 1 .928.629z" /> <path d="M6 15a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H5a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z" /> <path d="M8 18h4a2 2 0 0 0 2-2v-5" />`, opt)
}

// LandPlot renders the "land-plot" icon.
//
// Usage in templates:
//
//	{{ lucide "land-plot" }}
//
// Direct usage in Go:
//
//	lucide.LandPlot()
//	lucide.LandPlot(lucide.Options{Size: 32, Class: "my-icon"})
func LandPlot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 8 6-3-6-3v10" /> <path d="m8 11.99-5.5 3.14a1 1 0 0 0 0 1.74l8.5 4.86a2 2 0 0 0 2 0l8.5-4.86a1 1 0 0 0 0-1.74L16 12" /> <path d="m6.49 12.85 11.02 6.3" /> <path d="M17.51 12.85 6.5 19.15" />`, opt)
}

// Landmark renders the "landmark" icon.
//
// Usage in templates:
//
//	{{ lucide "landmark" }}
//
// Direct usage in Go:
//
//	lucide.Landmark()
//	lucide.Landmark(lucide.Options{Size: 32, Class: "my-icon"})
func Landmark(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 18v-7" /> <path d="M11.12 2.198a2 2 0 0 1 1.76.006l7.866 3.847c.476.233.31.949-.22.949H3.474c-.53 0-.695-.716-.22-.949z" /> <path d="M14 18v-7" /> <path d="M18 18v-7" /> <path d="M3 22h18" /> <path d="M6 18v-7" />`, opt)
}

// Languages renders the "languages" icon.
//
// Usage in templates:
//
//	{{ lucide "languages" }}
//
// Direct usage in Go:
//
//	lucide.Languages()
//	lucide.Languages(lucide.Options{Size: 32, Class: "my-icon"})
func Languages(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m5 8 6 6" /> <path d="m4 14 6-6 2-3" /> <path d="M2 5h12" /> <path d="M7 2h1" /> <path d="m22 22-5-10-5 10" /> <path d="M14 18h6" />`, opt)
}

// Laptop renders the "laptop" icon.
//
// Usage in templates:
//
//	{{ lucide "laptop" }}
//
// Direct usage in Go:
//
//	lucide.Laptop()
//	lucide.Laptop(lucide.Options{Size: 32, Class: "my-icon"})
func Laptop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 5a2 2 0 0 1 2 2v8.526a2 2 0 0 0 .212.897l1.068 2.127a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45l1.068-2.127A2 2 0 0 0 4 15.526V7a2 2 0 0 1 2-2z" /> <path d="M20.054 15.987H3.946" />`, opt)
}

// LaptopMinimal renders the "laptop-minimal" icon.
//
// Usage in templates:
//
//	{{ lucide "laptop-minimal" }}
//
// Direct usage in Go:
//
//	lucide.LaptopMinimal()
//	lucide.LaptopMinimal(lucide.Options{Size: 32, Class: "my-icon"})
func LaptopMinimal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="12" x="3" y="4" rx="2" ry="2" /> <line x1="2" x2="22" y1="20" y2="20" />`, opt)
}

// LaptopMinimalCheck renders the "laptop-minimal-check" icon.
//
// Usage in templates:
//
//	{{ lucide "laptop-minimal-check" }}
//
// Direct usage in Go:
//
//	lucide.LaptopMinimalCheck()
//	lucide.LaptopMinimalCheck(lucide.Options{Size: 32, Class: "my-icon"})
func LaptopMinimalCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 20h20" /> <path d="m9 10 2 2 4-4" /> <rect x="3" y="4" width="18" height="12" rx="2" />`, opt)
}

// Lasso renders the "lasso" icon.
//
// Usage in templates:
//
//	{{ lucide "lasso" }}
//
// Direct usage in Go:
//
//	lucide.Lasso()
//	lucide.Lasso(lucide.Options{Size: 32, Class: "my-icon"})
func Lasso(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.704 14.467A10 8 0 0 1 2 10a10 8 0 0 1 20 0 10 8 0 0 1-10 8 10 8 0 0 1-5.181-1.158" /> <path d="M7 22a5 5 0 0 1-2-3.994" /> <circle cx="5" cy="16" r="2" />`, opt)
}

// LassoSelect renders the "lasso-select" icon.
//
// Usage in templates:
//
//	{{ lucide "lasso-select" }}
//
// Direct usage in Go:
//
//	lucide.LassoSelect()
//	lucide.LassoSelect(lucide.Options{Size: 32, Class: "my-icon"})
func LassoSelect(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 22a5 5 0 0 1-2-4" /> <path d="M7 16.93c.96.43 1.96.74 2.99.91" /> <path d="M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2" /> <path d="M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" /> <path d="M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14z" />`, opt)
}

// Laugh renders the "laugh" icon.
//
// Usage in templates:
//
//	{{ lucide "laugh" }}
//
// Direct usage in Go:
//
//	lucide.Laugh()
//	lucide.Laugh(lucide.Options{Size: 32, Class: "my-icon"})
func Laugh(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z" /> <line x1="9" x2="9.01" y1="9" y2="9" /> <line x1="15" x2="15.01" y1="9" y2="9" />`, opt)
}

// Layers renders the "layers" icon.
//
// Usage in templates:
//
//	{{ lucide "layers" }}
//
// Direct usage in Go:
//
//	lucide.Layers()
//	lucide.Layers(lucide.Options{Size: 32, Class: "my-icon"})
func Layers(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z" /> <path d="M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12" /> <path d="M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17" />`, opt)
}

// Layers2 renders the "layers-2" icon.
//
// Usage in templates:
//
//	{{ lucide "layers-2" }}
//
// Direct usage in Go:
//
//	lucide.Layers2()
//	lucide.Layers2(lucide.Options{Size: 32, Class: "my-icon"})
func Layers2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 13.74a2 2 0 0 1-2 0L2.5 8.87a1 1 0 0 1 0-1.74L11 2.26a2 2 0 0 1 2 0l8.5 4.87a1 1 0 0 1 0 1.74z" /> <path d="m20 14.285 1.5.845a1 1 0 0 1 0 1.74L13 21.74a2 2 0 0 1-2 0l-8.5-4.87a1 1 0 0 1 0-1.74l1.5-.845" />`, opt)
}

// LayoutDashboard renders the "layout-dashboard" icon.
//
// Usage in templates:
//
//	{{ lucide "layout-dashboard" }}
//
// Direct usage in Go:
//
//	lucide.LayoutDashboard()
//	lucide.LayoutDashboard(lucide.Options{Size: 32, Class: "my-icon"})
func LayoutDashboard(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="7" height="9" x="3" y="3" rx="1" /> <rect width="7" height="5" x="14" y="3" rx="1" /> <rect width="7" height="9" x="14" y="12" rx="1" /> <rect width="7" height="5" x="3" y="16" rx="1" />`, opt)
}

// LayoutGrid renders the "layout-grid" icon.
//
// Usage in templates:
//
//	{{ lucide "layout-grid" }}
//
// Direct usage in Go:
//
//	lucide.LayoutGrid()
//	lucide.LayoutGrid(lucide.Options{Size: 32, Class: "my-icon"})
func LayoutGrid(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="7" height="7" x="3" y="3" rx="1" /> <rect width="7" height="7" x="14" y="3" rx="1" /> <rect width="7" height="7" x="14" y="14" rx="1" /> <rect width="7" height="7" x="3" y="14" rx="1" />`, opt)
}

// LayoutList renders the "layout-list" icon.
//
// Usage in templates:
//
//	{{ lucide "layout-list" }}
//
// Direct usage in Go:
//
//	lucide.LayoutList()
//	lucide.LayoutList(lucide.Options{Size: 32, Class: "my-icon"})
func LayoutList(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="7" height="7" x="3" y="3" rx="1" /> <rect width="7" height="7" x="3" y="14" rx="1" /> <path d="M14 4h7" /> <path d="M14 9h7" /> <path d="M14 15h7" /> <path d="M14 20h7" />`, opt)
}

// LayoutPanelLeft renders the "layout-panel-left" icon.
//
// Usage in templates:
//
//	{{ lucide "layout-panel-left" }}
//
// Direct usage in Go:
//
//	lucide.LayoutPanelLeft()
//	lucide.LayoutPanelLeft(lucide.Options{Size: 32, Class: "my-icon"})
func LayoutPanelLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="7" height="18" x="3" y="3" rx="1" /> <rect width="7" height="7" x="14" y="3" rx="1" /> <rect width="7" height="7" x="14" y="14" rx="1" />`, opt)
}

// LayoutPanelTop renders the "layout-panel-top" icon.
//
// Usage in templates:
//
//	{{ lucide "layout-panel-top" }}
//
// Direct usage in Go:
//
//	lucide.LayoutPanelTop()
//	lucide.LayoutPanelTop(lucide.Options{Size: 32, Class: "my-icon"})
func LayoutPanelTop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="7" x="3" y="3" rx="1" /> <rect width="7" height="7" x="3" y="14" rx="1" /> <rect width="7" height="7" x="14" y="14" rx="1" />`, opt)
}

// LayoutTemplate renders the "layout-template" icon.
//
// Usage in templates:
//
//	{{ lucide "layout-template" }}
//
// Direct usage in Go:
//
//	lucide.LayoutTemplate()
//	lucide.LayoutTemplate(lucide.Options{Size: 32, Class: "my-icon"})
func LayoutTemplate(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="7" x="3" y="3" rx="1" /> <rect width="9" height="7" x="3" y="14" rx="1" /> <rect width="5" height="7" x="16" y="14" rx="1" />`, opt)
}

// Leaf renders the "leaf" icon.
//
// Usage in templates:
//
//	{{ lucide "leaf" }}
//
// Direct usage in Go:
//
//	lucide.Leaf()
//	lucide.Leaf(lucide.Options{Size: 32, Class: "my-icon"})
func Leaf(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z" /> <path d="M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12" />`, opt)
}

// LeafyGreen renders the "leafy-green" icon.
//
// Usage in templates:
//
//	{{ lucide "leafy-green" }}
//
// Direct usage in Go:
//
//	lucide.LeafyGreen()
//	lucide.LeafyGreen(lucide.Options{Size: 32, Class: "my-icon"})
func LeafyGreen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 22c1.25-.987 2.27-1.975 3.9-2.2a5.56 5.56 0 0 1 3.8 1.5 4 4 0 0 0 6.187-2.353 3.5 3.5 0 0 0 3.69-5.116A3.5 3.5 0 0 0 20.95 8 3.5 3.5 0 1 0 16 3.05a3.5 3.5 0 0 0-5.831 1.373 3.5 3.5 0 0 0-5.116 3.69 4 4 0 0 0-2.348 6.155C3.499 15.42 4.409 16.712 4.2 18.1 3.926 19.743 3.014 20.732 2 22" /> <path d="M2 22 17 7" />`, opt)
}

// Lectern renders the "lectern" icon.
//
// Usage in templates:
//
//	{{ lucide "lectern" }}
//
// Direct usage in Go:
//
//	lucide.Lectern()
//	lucide.Lectern(lucide.Options{Size: 32, Class: "my-icon"})
func Lectern(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 12h3a2 2 0 0 0 1.902-1.38l1.056-3.333A1 1 0 0 0 21 6H3a1 1 0 0 0-.958 1.287l1.056 3.334A2 2 0 0 0 5 12h3" /> <path d="M18 6V3a1 1 0 0 0-1-1h-3" /> <rect width="8" height="12" x="8" y="10" rx="1" />`, opt)
}

// Library renders the "library" icon.
//
// Usage in templates:
//
//	{{ lucide "library" }}
//
// Direct usage in Go:
//
//	lucide.Library()
//	lucide.Library(lucide.Options{Size: 32, Class: "my-icon"})
func Library(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 6 4 14" /> <path d="M12 6v14" /> <path d="M8 8v12" /> <path d="M4 4v16" />`, opt)
}

// LibraryBig renders the "library-big" icon.
//
// Usage in templates:
//
//	{{ lucide "library-big" }}
//
// Direct usage in Go:
//
//	lucide.LibraryBig()
//	lucide.LibraryBig(lucide.Options{Size: 32, Class: "my-icon"})
func LibraryBig(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="18" x="3" y="3" rx="1" /> <path d="M7 3v18" /> <path d="M20.4 18.9c.2.5-.1 1.1-.6 1.3l-1.9.7c-.5.2-1.1-.1-1.3-.6L11.1 5.1c-.2-.5.1-1.1.6-1.3l1.9-.7c.5-.2 1.1.1 1.3.6Z" />`, opt)
}

// LifeBuoy renders the "life-buoy" icon.
//
// Usage in templates:
//
//	{{ lucide "life-buoy" }}
//
// Direct usage in Go:
//
//	lucide.LifeBuoy()
//	lucide.LifeBuoy(lucide.Options{Size: 32, Class: "my-icon"})
func LifeBuoy(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="m4.93 4.93 4.24 4.24" /> <path d="m14.83 9.17 4.24-4.24" /> <path d="m14.83 14.83 4.24 4.24" /> <path d="m9.17 14.83-4.24 4.24" /> <circle cx="12" cy="12" r="4" />`, opt)
}

// Ligature renders the "ligature" icon.
//
// Usage in templates:
//
//	{{ lucide "ligature" }}
//
// Direct usage in Go:
//
//	lucide.Ligature()
//	lucide.Ligature(lucide.Options{Size: 32, Class: "my-icon"})
func Ligature(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 12h2v8" /> <path d="M14 20h4" /> <path d="M6 12h4" /> <path d="M6 20h4" /> <path d="M8 20V8a4 4 0 0 1 7.464-2" />`, opt)
}

// Lightbulb renders the "lightbulb" icon.
//
// Usage in templates:
//
//	{{ lucide "lightbulb" }}
//
// Direct usage in Go:
//
//	lucide.Lightbulb()
//	lucide.Lightbulb(lucide.Options{Size: 32, Class: "my-icon"})
func Lightbulb(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5" /> <path d="M9 18h6" /> <path d="M10 22h4" />`, opt)
}

// LightbulbOff renders the "lightbulb-off" icon.
//
// Usage in templates:
//
//	{{ lucide "lightbulb-off" }}
//
// Direct usage in Go:
//
//	lucide.LightbulbOff()
//	lucide.LightbulbOff(lucide.Options{Size: 32, Class: "my-icon"})
func LightbulbOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16.8 11.2c.8-.9 1.2-2 1.2-3.2a6 6 0 0 0-9.3-5" /> <path d="m2 2 20 20" /> <path d="M6.3 6.3a4.67 4.67 0 0 0 1.2 5.2c.7.7 1.3 1.5 1.5 2.5" /> <path d="M9 18h6" /> <path d="M10 22h4" />`, opt)
}

// LineSquiggle renders the "line-squiggle" icon.
//
// Usage in templates:
//
//	{{ lucide "line-squiggle" }}
//
// Direct usage in Go:
//
//	lucide.LineSquiggle()
//	lucide.LineSquiggle(lucide.Options{Size: 32, Class: "my-icon"})
func LineSquiggle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 3.5c5-2 7 2.5 3 4C1.5 10 2 15 5 16c5 2 9-10 14-7s.5 13.5-4 12c-5-2.5.5-11 6-2" />`, opt)
}

// Link renders the "link" icon.
//
// Usage in templates:
//
//	{{ lucide "link" }}
//
// Direct usage in Go:
//
//	lucide.Link()
//	lucide.Link(lucide.Options{Size: 32, Class: "my-icon"})
func Link(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" /> <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" />`, opt)
}

// Link2 renders the "link-2" icon.
//
// Usage in templates:
//
//	{{ lucide "link-2" }}
//
// Direct usage in Go:
//
//	lucide.Link2()
//	lucide.Link2(lucide.Options{Size: 32, Class: "my-icon"})
func Link2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 17H7A5 5 0 0 1 7 7h2" /> <path d="M15 7h2a5 5 0 1 1 0 10h-2" /> <line x1="8" x2="16" y1="12" y2="12" />`, opt)
}

// Link2Off renders the "link-2-off" icon.
//
// Usage in templates:
//
//	{{ lucide "link-2-off" }}
//
// Direct usage in Go:
//
//	lucide.Link2Off()
//	lucide.Link2Off(lucide.Options{Size: 32, Class: "my-icon"})
func Link2Off(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 17H7A5 5 0 0 1 7 7" /> <path d="M15 7h2a5 5 0 0 1 4 8" /> <line x1="8" x2="12" y1="12" y2="12" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// Linkedin renders the "linkedin" icon.
//
// Usage in templates:
//
//	{{ lucide "linkedin" }}
//
// Direct usage in Go:
//
//	lucide.Linkedin()
//	lucide.Linkedin(lucide.Options{Size: 32, Class: "my-icon"})
func Linkedin(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" /> <rect width="4" height="12" x="2" y="9" /> <circle cx="4" cy="4" r="2" />`, opt)
}

// List renders the "list" icon.
//
// Usage in templates:
//
//	{{ lucide "list" }}
//
// Direct usage in Go:
//
//	lucide.List()
//	lucide.List(lucide.Options{Size: 32, Class: "my-icon"})
func List(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 5h.01" /> <path d="M3 12h.01" /> <path d="M3 19h.01" /> <path d="M8 5h13" /> <path d="M8 12h13" /> <path d="M8 19h13" />`, opt)
}

// ListCheck renders the "list-check" icon.
//
// Usage in templates:
//
//	{{ lucide "list-check" }}
//
// Direct usage in Go:
//
//	lucide.ListCheck()
//	lucide.ListCheck(lucide.Options{Size: 32, Class: "my-icon"})
func ListCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5H3" /> <path d="M16 12H3" /> <path d="M11 19H3" /> <path d="m15 18 2 2 4-4" />`, opt)
}

// ListChecks renders the "list-checks" icon.
//
// Usage in templates:
//
//	{{ lucide "list-checks" }}
//
// Direct usage in Go:
//
//	lucide.ListChecks()
//	lucide.ListChecks(lucide.Options{Size: 32, Class: "my-icon"})
func ListChecks(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 5h8" /> <path d="M13 12h8" /> <path d="M13 19h8" /> <path d="m3 17 2 2 4-4" /> <path d="m3 7 2 2 4-4" />`, opt)
}

// ListChevronsDownUp renders the "list-chevrons-down-up" icon.
//
// Usage in templates:
//
//	{{ lucide "list-chevrons-down-up" }}
//
// Direct usage in Go:
//
//	lucide.ListChevronsDownUp()
//	lucide.ListChevronsDownUp(lucide.Options{Size: 32, Class: "my-icon"})
func ListChevronsDownUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 5h8" /> <path d="M3 12h8" /> <path d="M3 19h8" /> <path d="m15 5 3 3 3-3" /> <path d="m15 19 3-3 3 3" />`, opt)
}

// ListChevronsUpDown renders the "list-chevrons-up-down" icon.
//
// Usage in templates:
//
//	{{ lucide "list-chevrons-up-down" }}
//
// Direct usage in Go:
//
//	lucide.ListChevronsUpDown()
//	lucide.ListChevronsUpDown(lucide.Options{Size: 32, Class: "my-icon"})
func ListChevronsUpDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 5h8" /> <path d="M3 12h8" /> <path d="M3 19h8" /> <path d="m15 8 3-3 3 3" /> <path d="m15 16 3 3 3-3" />`, opt)
}

// ListCollapse renders the "list-collapse" icon.
//
// Usage in templates:
//
//	{{ lucide "list-collapse" }}
//
// Direct usage in Go:
//
//	lucide.ListCollapse()
//	lucide.ListCollapse(lucide.Options{Size: 32, Class: "my-icon"})
func ListCollapse(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 5h11" /> <path d="M10 12h11" /> <path d="M10 19h11" /> <path d="m3 10 3-3-3-3" /> <path d="m3 20 3-3-3-3" />`, opt)
}

// ListEnd renders the "list-end" icon.
//
// Usage in templates:
//
//	{{ lucide "list-end" }}
//
// Direct usage in Go:
//
//	lucide.ListEnd()
//	lucide.ListEnd(lucide.Options{Size: 32, Class: "my-icon"})
func ListEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5H3" /> <path d="M16 12H3" /> <path d="M9 19H3" /> <path d="m16 16-3 3 3 3" /> <path d="M21 5v12a2 2 0 0 1-2 2h-6" />`, opt)
}

// ListFilter renders the "list-filter" icon.
//
// Usage in templates:
//
//	{{ lucide "list-filter" }}
//
// Direct usage in Go:
//
//	lucide.ListFilter()
//	lucide.ListFilter(lucide.Options{Size: 32, Class: "my-icon"})
func ListFilter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 5h20" /> <path d="M6 12h12" /> <path d="M9 19h6" />`, opt)
}

// ListFilterPlus renders the "list-filter-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "list-filter-plus" }}
//
// Direct usage in Go:
//
//	lucide.ListFilterPlus()
//	lucide.ListFilterPlus(lucide.Options{Size: 32, Class: "my-icon"})
func ListFilterPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 5H2" /> <path d="M6 12h12" /> <path d="M9 19h6" /> <path d="M16 5h6" /> <path d="M19 8V2" />`, opt)
}

// ListIndentDecrease renders the "list-indent-decrease" icon.
//
// Usage in templates:
//
//	{{ lucide "list-indent-decrease" }}
//
// Direct usage in Go:
//
//	lucide.ListIndentDecrease()
//	lucide.ListIndentDecrease(lucide.Options{Size: 32, Class: "my-icon"})
func ListIndentDecrease(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 5H11" /> <path d="M21 12H11" /> <path d="M21 19H11" /> <path d="m7 8-4 4 4 4" />`, opt)
}

// ListIndentIncrease renders the "list-indent-increase" icon.
//
// Usage in templates:
//
//	{{ lucide "list-indent-increase" }}
//
// Direct usage in Go:
//
//	lucide.ListIndentIncrease()
//	lucide.ListIndentIncrease(lucide.Options{Size: 32, Class: "my-icon"})
func ListIndentIncrease(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 5H11" /> <path d="M21 12H11" /> <path d="M21 19H11" /> <path d="m3 8 4 4-4 4" />`, opt)
}

// ListMinus renders the "list-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "list-minus" }}
//
// Direct usage in Go:
//
//	lucide.ListMinus()
//	lucide.ListMinus(lucide.Options{Size: 32, Class: "my-icon"})
func ListMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5H3" /> <path d="M11 12H3" /> <path d="M16 19H3" /> <path d="M21 12h-6" />`, opt)
}

// ListMusic renders the "list-music" icon.
//
// Usage in templates:
//
//	{{ lucide "list-music" }}
//
// Direct usage in Go:
//
//	lucide.ListMusic()
//	lucide.ListMusic(lucide.Options{Size: 32, Class: "my-icon"})
func ListMusic(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5H3" /> <path d="M11 12H3" /> <path d="M11 19H3" /> <path d="M21 16V5" /> <circle cx="18" cy="16" r="3" />`, opt)
}

// ListOrdered renders the "list-ordered" icon.
//
// Usage in templates:
//
//	{{ lucide "list-ordered" }}
//
// Direct usage in Go:
//
//	lucide.ListOrdered()
//	lucide.ListOrdered(lucide.Options{Size: 32, Class: "my-icon"})
func ListOrdered(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 5h10" /> <path d="M11 12h10" /> <path d="M11 19h10" /> <path d="M4 4h1v5" /> <path d="M4 9h2" /> <path d="M6.5 20H3.4c0-1 2.6-1.925 2.6-3.5a1.5 1.5 0 0 0-2.6-1.02" />`, opt)
}

// ListPlus renders the "list-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "list-plus" }}
//
// Direct usage in Go:
//
//	lucide.ListPlus()
//	lucide.ListPlus(lucide.Options{Size: 32, Class: "my-icon"})
func ListPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5H3" /> <path d="M11 12H3" /> <path d="M16 19H3" /> <path d="M18 9v6" /> <path d="M21 12h-6" />`, opt)
}

// ListRestart renders the "list-restart" icon.
//
// Usage in templates:
//
//	{{ lucide "list-restart" }}
//
// Direct usage in Go:
//
//	lucide.ListRestart()
//	lucide.ListRestart(lucide.Options{Size: 32, Class: "my-icon"})
func ListRestart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 5H3" /> <path d="M7 12H3" /> <path d="M7 19H3" /> <path d="M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14" /> <path d="M11 10v4h4" />`, opt)
}

// ListStart renders the "list-start" icon.
//
// Usage in templates:
//
//	{{ lucide "list-start" }}
//
// Direct usage in Go:
//
//	lucide.ListStart()
//	lucide.ListStart(lucide.Options{Size: 32, Class: "my-icon"})
func ListStart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 5h6" /> <path d="M3 12h13" /> <path d="M3 19h13" /> <path d="m16 8-3-3 3-3" /> <path d="M21 19V7a2 2 0 0 0-2-2h-6" />`, opt)
}

// ListTodo renders the "list-todo" icon.
//
// Usage in templates:
//
//	{{ lucide "list-todo" }}
//
// Direct usage in Go:
//
//	lucide.ListTodo()
//	lucide.ListTodo(lucide.Options{Size: 32, Class: "my-icon"})
func ListTodo(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 5h8" /> <path d="M13 12h8" /> <path d="M13 19h8" /> <path d="m3 17 2 2 4-4" /> <rect x="3" y="4" width="6" height="6" rx="1" />`, opt)
}

// ListTree renders the "list-tree" icon.
//
// Usage in templates:
//
//	{{ lucide "list-tree" }}
//
// Direct usage in Go:
//
//	lucide.ListTree()
//	lucide.ListTree(lucide.Options{Size: 32, Class: "my-icon"})
func ListTree(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 5h13" /> <path d="M13 12h8" /> <path d="M13 19h8" /> <path d="M3 10a2 2 0 0 0 2 2h3" /> <path d="M3 5v12a2 2 0 0 0 2 2h3" />`, opt)
}

// ListVideo renders the "list-video" icon.
//
// Usage in templates:
//
//	{{ lucide "list-video" }}
//
// Direct usage in Go:
//
//	lucide.ListVideo()
//	lucide.ListVideo(lucide.Options{Size: 32, Class: "my-icon"})
func ListVideo(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 5H3" /> <path d="M10 12H3" /> <path d="M10 19H3" /> <path d="M15 12.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997a1 1 0 0 1-1.517-.86z" />`, opt)
}

// ListX renders the "list-x" icon.
//
// Usage in templates:
//
//	{{ lucide "list-x" }}
//
// Direct usage in Go:
//
//	lucide.ListX()
//	lucide.ListX(lucide.Options{Size: 32, Class: "my-icon"})
func ListX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5H3" /> <path d="M11 12H3" /> <path d="M16 19H3" /> <path d="m15.5 9.5 5 5" /> <path d="m20.5 9.5-5 5" />`, opt)
}

// Loader renders the "loader" icon.
//
// Usage in templates:
//
//	{{ lucide "loader" }}
//
// Direct usage in Go:
//
//	lucide.Loader()
//	lucide.Loader(lucide.Options{Size: 32, Class: "my-icon"})
func Loader(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v4" /> <path d="m16.2 7.8 2.9-2.9" /> <path d="M18 12h4" /> <path d="m16.2 16.2 2.9 2.9" /> <path d="M12 18v4" /> <path d="m4.9 19.1 2.9-2.9" /> <path d="M2 12h4" /> <path d="m4.9 4.9 2.9 2.9" />`, opt)
}

// LoaderCircle renders the "loader-circle" icon.
//
// Usage in templates:
//
//	{{ lucide "loader-circle" }}
//
// Direct usage in Go:
//
//	lucide.LoaderCircle()
//	lucide.LoaderCircle(lucide.Options{Size: 32, Class: "my-icon"})
func LoaderCircle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 12a9 9 0 1 1-6.219-8.56" />`, opt)
}

// LoaderPinwheel renders the "loader-pinwheel" icon.
//
// Usage in templates:
//
//	{{ lucide "loader-pinwheel" }}
//
// Direct usage in Go:
//
//	lucide.LoaderPinwheel()
//	lucide.LoaderPinwheel(lucide.Options{Size: 32, Class: "my-icon"})
func LoaderPinwheel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 12a1 1 0 0 1-10 0 1 1 0 0 0-10 0" /> <path d="M7 20.7a1 1 0 1 1 5-8.7 1 1 0 1 0 5-8.6" /> <path d="M7 3.3a1 1 0 1 1 5 8.6 1 1 0 1 0 5 8.6" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Locate renders the "locate" icon.
//
// Usage in templates:
//
//	{{ lucide "locate" }}
//
// Direct usage in Go:
//
//	lucide.Locate()
//	lucide.Locate(lucide.Options{Size: 32, Class: "my-icon"})
func Locate(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="2" x2="5" y1="12" y2="12" /> <line x1="19" x2="22" y1="12" y2="12" /> <line x1="12" x2="12" y1="2" y2="5" /> <line x1="12" x2="12" y1="19" y2="22" /> <circle cx="12" cy="12" r="7" />`, opt)
}

// LocateFixed renders the "locate-fixed" icon.
//
// Usage in templates:
//
//	{{ lucide "locate-fixed" }}
//
// Direct usage in Go:
//
//	lucide.LocateFixed()
//	lucide.LocateFixed(lucide.Options{Size: 32, Class: "my-icon"})
func LocateFixed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="2" x2="5" y1="12" y2="12" /> <line x1="19" x2="22" y1="12" y2="12" /> <line x1="12" x2="12" y1="2" y2="5" /> <line x1="12" x2="12" y1="19" y2="22" /> <circle cx="12" cy="12" r="7" /> <circle cx="12" cy="12" r="3" />`, opt)
}

// LocateOff renders the "locate-off" icon.
//
// Usage in templates:
//
//	{{ lucide "locate-off" }}
//
// Direct usage in Go:
//
//	lucide.LocateOff()
//	lucide.LocateOff(lucide.Options{Size: 32, Class: "my-icon"})
func LocateOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 19v3" /> <path d="M12 2v3" /> <path d="M18.89 13.24a7 7 0 0 0-8.13-8.13" /> <path d="M19 12h3" /> <path d="M2 12h3" /> <path d="m2 2 20 20" /> <path d="M7.05 7.05a7 7 0 0 0 9.9 9.9" />`, opt)
}

// Lock renders the "lock" icon.
//
// Usage in templates:
//
//	{{ lucide "lock" }}
//
// Direct usage in Go:
//
//	lucide.Lock()
//	lucide.Lock(lucide.Options{Size: 32, Class: "my-icon"})
func Lock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="11" x="3" y="11" rx="2" ry="2" /> <path d="M7 11V7a5 5 0 0 1 10 0v4" />`, opt)
}

// LockKeyhole renders the "lock-keyhole" icon.
//
// Usage in templates:
//
//	{{ lucide "lock-keyhole" }}
//
// Direct usage in Go:
//
//	lucide.LockKeyhole()
//	lucide.LockKeyhole(lucide.Options{Size: 32, Class: "my-icon"})
func LockKeyhole(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="16" r="1" /> <rect x="3" y="10" width="18" height="12" rx="2" /> <path d="M7 10V7a5 5 0 0 1 10 0v3" />`, opt)
}

// LockKeyholeOpen renders the "lock-keyhole-open" icon.
//
// Usage in templates:
//
//	{{ lucide "lock-keyhole-open" }}
//
// Direct usage in Go:
//
//	lucide.LockKeyholeOpen()
//	lucide.LockKeyholeOpen(lucide.Options{Size: 32, Class: "my-icon"})
func LockKeyholeOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="16" r="1" /> <rect width="18" height="12" x="3" y="10" rx="2" /> <path d="M7 10V7a5 5 0 0 1 9.33-2.5" />`, opt)
}

// LockOpen renders the "lock-open" icon.
//
// Usage in templates:
//
//	{{ lucide "lock-open" }}
//
// Direct usage in Go:
//
//	lucide.LockOpen()
//	lucide.LockOpen(lucide.Options{Size: 32, Class: "my-icon"})
func LockOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="11" x="3" y="11" rx="2" ry="2" /> <path d="M7 11V7a5 5 0 0 1 9.9-1" />`, opt)
}

// LogIn renders the "log-in" icon.
//
// Usage in templates:
//
//	{{ lucide "log-in" }}
//
// Direct usage in Go:
//
//	lucide.LogIn()
//	lucide.LogIn(lucide.Options{Size: 32, Class: "my-icon"})
func LogIn(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 17 5-5-5-5" /> <path d="M15 12H3" /> <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4" />`, opt)
}

// LogOut renders the "log-out" icon.
//
// Usage in templates:
//
//	{{ lucide "log-out" }}
//
// Direct usage in Go:
//
//	lucide.LogOut()
//	lucide.LogOut(lucide.Options{Size: 32, Class: "my-icon"})
func LogOut(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 17 5-5-5-5" /> <path d="M21 12H9" /> <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />`, opt)
}

// Logs renders the "logs" icon.
//
// Usage in templates:
//
//	{{ lucide "logs" }}
//
// Direct usage in Go:
//
//	lucide.Logs()
//	lucide.Logs(lucide.Options{Size: 32, Class: "my-icon"})
func Logs(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 5h1" /> <path d="M3 12h1" /> <path d="M3 19h1" /> <path d="M8 5h1" /> <path d="M8 12h1" /> <path d="M8 19h1" /> <path d="M13 5h8" /> <path d="M13 12h8" /> <path d="M13 19h8" />`, opt)
}

// Lollipop renders the "lollipop" icon.
//
// Usage in templates:
//
//	{{ lucide "lollipop" }}
//
// Direct usage in Go:
//
//	lucide.Lollipop()
//	lucide.Lollipop(lucide.Options{Size: 32, Class: "my-icon"})
func Lollipop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="11" cy="11" r="8" /> <path d="m21 21-4.3-4.3" /> <path d="M11 11a2 2 0 0 0 4 0 4 4 0 0 0-8 0 6 6 0 0 0 12 0" />`, opt)
}

// Luggage renders the "luggage" icon.
//
// Usage in templates:
//
//	{{ lucide "luggage" }}
//
// Direct usage in Go:
//
//	lucide.Luggage()
//	lucide.Luggage(lucide.Options{Size: 32, Class: "my-icon"})
func Luggage(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 20a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2" /> <path d="M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14" /> <path d="M10 20h4" /> <circle cx="16" cy="20" r="2" /> <circle cx="8" cy="20" r="2" />`, opt)
}

// Magnet renders the "magnet" icon.
//
// Usage in templates:
//
//	{{ lucide "magnet" }}
//
// Direct usage in Go:
//
//	lucide.Magnet()
//	lucide.Magnet(lucide.Options{Size: 32, Class: "my-icon"})
func Magnet(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 15 4 4" /> <path d="M2.352 10.648a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l6.029-6.029a1 1 0 1 1 3 3l-6.029 6.029a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l6.365-6.367A1 1 0 0 0 8.716 4.282z" /> <path d="m5 8 4 4" />`, opt)
}

// Mail renders the "mail" icon.
//
// Usage in templates:
//
//	{{ lucide "mail" }}
//
// Direct usage in Go:
//
//	lucide.Mail()
//	lucide.Mail(lucide.Options{Size: 32, Class: "my-icon"})
func Mail(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m22 7-8.991 5.727a2 2 0 0 1-2.009 0L2 7" /> <rect x="2" y="4" width="20" height="16" rx="2" />`, opt)
}

// MailCheck renders the "mail-check" icon.
//
// Usage in templates:
//
//	{{ lucide "mail-check" }}
//
// Direct usage in Go:
//
//	lucide.MailCheck()
//	lucide.MailCheck(lucide.Options{Size: 32, Class: "my-icon"})
func MailCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8" /> <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> <path d="m16 19 2 2 4-4" />`, opt)
}

// MailMinus renders the "mail-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "mail-minus" }}
//
// Direct usage in Go:
//
//	lucide.MailMinus()
//	lucide.MailMinus(lucide.Options{Size: 32, Class: "my-icon"})
func MailMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8" /> <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> <path d="M16 19h6" />`, opt)
}

// MailOpen renders the "mail-open" icon.
//
// Usage in templates:
//
//	{{ lucide "mail-open" }}
//
// Direct usage in Go:
//
//	lucide.MailOpen()
//	lucide.MailOpen(lucide.Options{Size: 32, Class: "my-icon"})
func MailOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z" /> <path d="m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10" />`, opt)
}

// MailPlus renders the "mail-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "mail-plus" }}
//
// Direct usage in Go:
//
//	lucide.MailPlus()
//	lucide.MailPlus(lucide.Options{Size: 32, Class: "my-icon"})
func MailPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8" /> <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> <path d="M19 16v6" /> <path d="M16 19h6" />`, opt)
}

// MailQuestionMark renders the "mail-question-mark" icon.
//
// Usage in templates:
//
//	{{ lucide "mail-question-mark" }}
//
// Direct usage in Go:
//
//	lucide.MailQuestionMark()
//	lucide.MailQuestionMark(lucide.Options{Size: 32, Class: "my-icon"})
func MailQuestionMark(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5" /> <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> <path d="M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2" /> <path d="M20 22v.01" />`, opt)
}

// MailSearch renders the "mail-search" icon.
//
// Usage in templates:
//
//	{{ lucide "mail-search" }}
//
// Direct usage in Go:
//
//	lucide.MailSearch()
//	lucide.MailSearch(lucide.Options{Size: 32, Class: "my-icon"})
func MailSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5" /> <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> <path d="M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" /> <circle cx="18" cy="18" r="3" /> <path d="m22 22-1.5-1.5" />`, opt)
}

// MailWarning renders the "mail-warning" icon.
//
// Usage in templates:
//
//	{{ lucide "mail-warning" }}
//
// Direct usage in Go:
//
//	lucide.MailWarning()
//	lucide.MailWarning(lucide.Options{Size: 32, Class: "my-icon"})
func MailWarning(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5" /> <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> <path d="M20 14v4" /> <path d="M20 22v.01" />`, opt)
}

// MailX renders the "mail-x" icon.
//
// Usage in templates:
//
//	{{ lucide "mail-x" }}
//
// Direct usage in Go:
//
//	lucide.MailX()
//	lucide.MailX(lucide.Options{Size: 32, Class: "my-icon"})
func MailX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9" /> <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> <path d="m17 17 4 4" /> <path d="m21 17-4 4" />`, opt)
}

// Mailbox renders the "mailbox" icon.
//
// Usage in templates:
//
//	{{ lucide "mailbox" }}
//
// Direct usage in Go:
//
//	lucide.Mailbox()
//	lucide.Mailbox(lucide.Options{Size: 32, Class: "my-icon"})
func Mailbox(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z" /> <polyline points="15,9 18,9 18,11" /> <path d="M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2" /> <line x1="6" x2="7" y1="10" y2="10" />`, opt)
}

// Mails renders the "mails" icon.
//
// Usage in templates:
//
//	{{ lucide "mails" }}
//
// Direct usage in Go:
//
//	lucide.Mails()
//	lucide.Mails(lucide.Options{Size: 32, Class: "my-icon"})
func Mails(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 1-1.732" /> <path d="m22 5.5-6.419 4.179a2 2 0 0 1-2.162 0L7 5.5" /> <rect x="7" y="3" width="15" height="12" rx="2" />`, opt)
}

// Map renders the "map" icon.
//
// Usage in templates:
//
//	{{ lucide "map" }}
//
// Direct usage in Go:
//
//	lucide.Map()
//	lucide.Map(lucide.Options{Size: 32, Class: "my-icon"})
func Map(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0z" /> <path d="M15 5.764v15" /> <path d="M9 3.236v15" />`, opt)
}

// MapMinus renders the "map-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "map-minus" }}
//
// Direct usage in Go:
//
//	lucide.MapMinus()
//	lucide.MapMinus(lucide.Options{Size: 32, Class: "my-icon"})
func MapMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11 19-1.106-.552a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0l4.212 2.106a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619V14" /> <path d="M15 5.764V14" /> <path d="M21 18h-6" /> <path d="M9 3.236v15" />`, opt)
}

// MapPin renders the "map-pin" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin" }}
//
// Direct usage in Go:
//
//	lucide.MapPin()
//	lucide.MapPin(lucide.Options{Size: 32, Class: "my-icon"})
func MapPin(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0" /> <circle cx="12" cy="10" r="3" />`, opt)
}

// MapPinCheck renders the "map-pin-check" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-check" }}
//
// Direct usage in Go:
//
//	lucide.MapPinCheck()
//	lucide.MapPinCheck(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19.43 12.935c.357-.967.57-1.955.57-2.935a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32.197 32.197 0 0 0 .813-.728" /> <circle cx="12" cy="10" r="3" /> <path d="m16 18 2 2 4-4" />`, opt)
}

// MapPinCheckInside renders the "map-pin-check-inside" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-check-inside" }}
//
// Direct usage in Go:
//
//	lucide.MapPinCheckInside()
//	lucide.MapPinCheckInside(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinCheckInside(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0" /> <path d="m9 10 2 2 4-4" />`, opt)
}

// MapPinHouse renders the "map-pin-house" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-house" }}
//
// Direct usage in Go:
//
//	lucide.MapPinHouse()
//	lucide.MapPinHouse(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinHouse(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 22a1 1 0 0 1-1-1v-4a1 1 0 0 1 .445-.832l3-2a1 1 0 0 1 1.11 0l3 2A1 1 0 0 1 22 17v4a1 1 0 0 1-1 1z" /> <path d="M18 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 .601.2" /> <path d="M18 22v-3" /> <circle cx="10" cy="10" r="3" />`, opt)
}

// MapPinMinus renders the "map-pin-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-minus" }}
//
// Direct usage in Go:
//
//	lucide.MapPinMinus()
//	lucide.MapPinMinus(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18.977 14C19.6 12.701 20 11.343 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738" /> <circle cx="12" cy="10" r="3" /> <path d="M16 18h6" />`, opt)
}

// MapPinMinusInside renders the "map-pin-minus-inside" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-minus-inside" }}
//
// Direct usage in Go:
//
//	lucide.MapPinMinusInside()
//	lucide.MapPinMinusInside(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinMinusInside(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0" /> <path d="M9 10h6" />`, opt)
}

// MapPinOff renders the "map-pin-off" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-off" }}
//
// Direct usage in Go:
//
//	lucide.MapPinOff()
//	lucide.MapPinOff(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.75 7.09a3 3 0 0 1 2.16 2.16" /> <path d="M17.072 17.072c-1.634 2.17-3.527 3.912-4.471 4.727a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 1.432-4.568" /> <path d="m2 2 20 20" /> <path d="M8.475 2.818A8 8 0 0 1 20 10c0 1.183-.31 2.377-.81 3.533" /> <path d="M9.13 9.13a3 3 0 0 0 3.74 3.74" />`, opt)
}

// MapPinPen renders the "map-pin-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-pen" }}
//
// Direct usage in Go:
//
//	lucide.MapPinPen()
//	lucide.MapPinPen(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinPen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.97 9.304A8 8 0 0 0 2 10c0 4.69 4.887 9.562 7.022 11.468" /> <path d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" /> <circle cx="10" cy="10" r="3" />`, opt)
}

// MapPinPlus renders the "map-pin-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-plus" }}
//
// Direct usage in Go:
//
//	lucide.MapPinPlus()
//	lucide.MapPinPlus(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738" /> <circle cx="12" cy="10" r="3" /> <path d="M16 18h6" /> <path d="M19 15v6" />`, opt)
}

// MapPinPlusInside renders the "map-pin-plus-inside" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-plus-inside" }}
//
// Direct usage in Go:
//
//	lucide.MapPinPlusInside()
//	lucide.MapPinPlusInside(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinPlusInside(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0" /> <path d="M12 7v6" /> <path d="M9 10h6" />`, opt)
}

// MapPinX renders the "map-pin-x" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-x" }}
//
// Direct usage in Go:
//
//	lucide.MapPinX()
//	lucide.MapPinX(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19.752 11.901A7.78 7.78 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 19 19 0 0 0 .09-.077" /> <circle cx="12" cy="10" r="3" /> <path d="m21.5 15.5-5 5" /> <path d="m21.5 20.5-5-5" />`, opt)
}

// MapPinXInside renders the "map-pin-x-inside" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pin-x-inside" }}
//
// Direct usage in Go:
//
//	lucide.MapPinXInside()
//	lucide.MapPinXInside(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinXInside(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0" /> <path d="m14.5 7.5-5 5" /> <path d="m9.5 7.5 5 5" />`, opt)
}

// MapPinned renders the "map-pinned" icon.
//
// Usage in templates:
//
//	{{ lucide "map-pinned" }}
//
// Direct usage in Go:
//
//	lucide.MapPinned()
//	lucide.MapPinned(lucide.Options{Size: 32, Class: "my-icon"})
func MapPinned(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 8c0 3.613-3.869 7.429-5.393 8.795a1 1 0 0 1-1.214 0C9.87 15.429 6 11.613 6 8a6 6 0 0 1 12 0" /> <circle cx="12" cy="8" r="2" /> <path d="M8.714 14h-3.71a1 1 0 0 0-.948.683l-2.004 6A1 1 0 0 0 3 22h18a1 1 0 0 0 .948-1.316l-2-6a1 1 0 0 0-.949-.684h-3.712" />`, opt)
}

// MapPlus renders the "map-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "map-plus" }}
//
// Direct usage in Go:
//
//	lucide.MapPlus()
//	lucide.MapPlus(lucide.Options{Size: 32, Class: "my-icon"})
func MapPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11 19-1.106-.552a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0l4.212 2.106a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619V12" /> <path d="M15 5.764V12" /> <path d="M18 15v6" /> <path d="M21 18h-6" /> <path d="M9 3.236v15" />`, opt)
}

// Mars renders the "mars" icon.
//
// Usage in templates:
//
//	{{ lucide "mars" }}
//
// Direct usage in Go:
//
//	lucide.Mars()
//	lucide.Mars(lucide.Options{Size: 32, Class: "my-icon"})
func Mars(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 3h5v5" /> <path d="m21 3-6.75 6.75" /> <circle cx="10" cy="14" r="6" />`, opt)
}

// MarsStroke renders the "mars-stroke" icon.
//
// Usage in templates:
//
//	{{ lucide "mars-stroke" }}
//
// Direct usage in Go:
//
//	lucide.MarsStroke()
//	lucide.MarsStroke(lucide.Options{Size: 32, Class: "my-icon"})
func MarsStroke(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 6 4 4" /> <path d="M17 3h4v4" /> <path d="m21 3-7.75 7.75" /> <circle cx="9" cy="15" r="6" />`, opt)
}

// Martini renders the "martini" icon.
//
// Usage in templates:
//
//	{{ lucide "martini" }}
//
// Direct usage in Go:
//
//	lucide.Martini()
//	lucide.Martini(lucide.Options{Size: 32, Class: "my-icon"})
func Martini(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 22h8" /> <path d="M12 11v11" /> <path d="m19 3-7 8-7-8Z" />`, opt)
}

// Maximize renders the "maximize" icon.
//
// Usage in templates:
//
//	{{ lucide "maximize" }}
//
// Direct usage in Go:
//
//	lucide.Maximize()
//	lucide.Maximize(lucide.Options{Size: 32, Class: "my-icon"})
func Maximize(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 3H5a2 2 0 0 0-2 2v3" /> <path d="M21 8V5a2 2 0 0 0-2-2h-3" /> <path d="M3 16v3a2 2 0 0 0 2 2h3" /> <path d="M16 21h3a2 2 0 0 0 2-2v-3" />`, opt)
}

// Maximize2 renders the "maximize-2" icon.
//
// Usage in templates:
//
//	{{ lucide "maximize-2" }}
//
// Direct usage in Go:
//
//	lucide.Maximize2()
//	lucide.Maximize2(lucide.Options{Size: 32, Class: "my-icon"})
func Maximize2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 3h6v6" /> <path d="m21 3-7 7" /> <path d="m3 21 7-7" /> <path d="M9 21H3v-6" />`, opt)
}

// Medal renders the "medal" icon.
//
// Usage in templates:
//
//	{{ lucide "medal" }}
//
// Direct usage in Go:
//
//	lucide.Medal()
//	lucide.Medal(lucide.Options{Size: 32, Class: "my-icon"})
func Medal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15" /> <path d="M11 12 5.12 2.2" /> <path d="m13 12 5.88-9.8" /> <path d="M8 7h8" /> <circle cx="12" cy="17" r="5" /> <path d="M12 18v-2h-.5" />`, opt)
}

// Megaphone renders the "megaphone" icon.
//
// Usage in templates:
//
//	{{ lucide "megaphone" }}
//
// Direct usage in Go:
//
//	lucide.Megaphone()
//	lucide.Megaphone(lucide.Options{Size: 32, Class: "my-icon"})
func Megaphone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 6a13 13 0 0 0 8.4-2.8A1 1 0 0 1 21 4v12a1 1 0 0 1-1.6.8A13 13 0 0 0 11 14H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z" /> <path d="M6 14a12 12 0 0 0 2.4 7.2 2 2 0 0 0 3.2-2.4A8 8 0 0 1 10 14" /> <path d="M8 6v8" />`, opt)
}

// MegaphoneOff renders the "megaphone-off" icon.
//
// Usage in templates:
//
//	{{ lucide "megaphone-off" }}
//
// Direct usage in Go:
//
//	lucide.MegaphoneOff()
//	lucide.MegaphoneOff(lucide.Options{Size: 32, Class: "my-icon"})
func MegaphoneOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.636 6A13 13 0 0 0 19.4 3.2 1 1 0 0 1 21 4v11.344" /> <path d="M14.378 14.357A13 13 0 0 0 11 14H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h1" /> <path d="m2 2 20 20" /> <path d="M6 14a12 12 0 0 0 2.4 7.2 2 2 0 0 0 3.2-2.4A8 8 0 0 1 10 14" /> <path d="M8 8v6" />`, opt)
}

// Meh renders the "meh" icon.
//
// Usage in templates:
//
//	{{ lucide "meh" }}
//
// Direct usage in Go:
//
//	lucide.Meh()
//	lucide.Meh(lucide.Options{Size: 32, Class: "my-icon"})
func Meh(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <line x1="8" x2="16" y1="15" y2="15" /> <line x1="9" x2="9.01" y1="9" y2="9" /> <line x1="15" x2="15.01" y1="9" y2="9" />`, opt)
}

// MemoryStick renders the "memory-stick" icon.
//
// Usage in templates:
//
//	{{ lucide "memory-stick" }}
//
// Direct usage in Go:
//
//	lucide.MemoryStick()
//	lucide.MemoryStick(lucide.Options{Size: 32, Class: "my-icon"})
func MemoryStick(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 19v-3" /> <path d="M10 19v-3" /> <path d="M14 19v-3" /> <path d="M18 19v-3" /> <path d="M8 11V9" /> <path d="M16 11V9" /> <path d="M12 11V9" /> <path d="M2 15h20" /> <path d="M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1.1a2 2 0 0 0 0 3.837V17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-5.1a2 2 0 0 0 0-3.837Z" />`, opt)
}

// Menu renders the "menu" icon.
//
// Usage in templates:
//
//	{{ lucide "menu" }}
//
// Direct usage in Go:
//
//	lucide.Menu()
//	lucide.Menu(lucide.Options{Size: 32, Class: "my-icon"})
func Menu(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 5h16" /> <path d="M4 12h16" /> <path d="M4 19h16" />`, opt)
}

// Merge renders the "merge" icon.
//
// Usage in templates:
//
//	{{ lucide "merge" }}
//
// Direct usage in Go:
//
//	lucide.Merge()
//	lucide.Merge(lucide.Options{Size: 32, Class: "my-icon"})
func Merge(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m8 6 4-4 4 4" /> <path d="M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22" /> <path d="m20 22-5-5" />`, opt)
}

// MessageCircle renders the "message-circle" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircle()
//	lucide.MessageCircle(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" />`, opt)
}

// MessageCircleCode renders the "message-circle-code" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-code" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleCode()
//	lucide.MessageCircleCode(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 9-3 3 3 3" /> <path d="m14 15 3-3-3-3" /> <path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" />`, opt)
}

// MessageCircleDashed renders the "message-circle-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-dashed" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleDashed()
//	lucide.MessageCircleDashed(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.1 2.182a10 10 0 0 1 3.8 0" /> <path d="M13.9 21.818a10 10 0 0 1-3.8 0" /> <path d="M17.609 3.72a10 10 0 0 1 2.69 2.7" /> <path d="M2.182 13.9a10 10 0 0 1 0-3.8" /> <path d="M20.28 17.61a10 10 0 0 1-2.7 2.69" /> <path d="M21.818 10.1a10 10 0 0 1 0 3.8" /> <path d="M3.721 6.391a10 10 0 0 1 2.7-2.69" /> <path d="m6.163 21.117-2.906.85a1 1 0 0 1-1.236-1.169l.965-2.98" />`, opt)
}

// MessageCircleHeart renders the "message-circle-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-heart" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleHeart()
//	lucide.MessageCircleHeart(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" /> <path d="M7.828 13.07A3 3 0 0 1 12 8.764a3 3 0 0 1 5.004 2.224 3 3 0 0 1-.832 2.083l-3.447 3.62a1 1 0 0 1-1.45-.001z" />`, opt)
}

// MessageCircleMore renders the "message-circle-more" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-more" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleMore()
//	lucide.MessageCircleMore(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleMore(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" /> <path d="M8 12h.01" /> <path d="M12 12h.01" /> <path d="M16 12h.01" />`, opt)
}

// MessageCircleOff renders the "message-circle-off" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-off" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleOff()
//	lucide.MessageCircleOff(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 2 20 20" /> <path d="M4.93 4.929a10 10 0 0 0-1.938 11.412 2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 0 0 11.302-1.989" /> <path d="M8.35 2.69A10 10 0 0 1 21.3 15.65" />`, opt)
}

// MessageCirclePlus renders the "message-circle-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-plus" }}
//
// Direct usage in Go:
//
//	lucide.MessageCirclePlus()
//	lucide.MessageCirclePlus(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCirclePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" /> <path d="M8 12h8" /> <path d="M12 8v8" />`, opt)
}

// MessageCircleQuestionMark renders the "message-circle-question-mark" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-question-mark" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleQuestionMark()
//	lucide.MessageCircleQuestionMark(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleQuestionMark(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" /> <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" /> <path d="M12 17h.01" />`, opt)
}

// MessageCircleReply renders the "message-circle-reply" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-reply" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleReply()
//	lucide.MessageCircleReply(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleReply(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" /> <path d="m10 15-3-3 3-3" /> <path d="M7 12h8a2 2 0 0 1 2 2v1" />`, opt)
}

// MessageCircleWarning renders the "message-circle-warning" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-warning" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleWarning()
//	lucide.MessageCircleWarning(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleWarning(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" /> <path d="M12 8v4" /> <path d="M12 16h.01" />`, opt)
}

// MessageCircleX renders the "message-circle-x" icon.
//
// Usage in templates:
//
//	{{ lucide "message-circle-x" }}
//
// Direct usage in Go:
//
//	lucide.MessageCircleX()
//	lucide.MessageCircleX(lucide.Options{Size: 32, Class: "my-icon"})
func MessageCircleX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719" /> <path d="m15 9-6 6" /> <path d="m9 9 6 6" />`, opt)
}

// MessageSquare renders the "message-square" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquare()
//	lucide.MessageSquare(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" />`, opt)
}

// MessageSquareCode renders the "message-square-code" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-code" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareCode()
//	lucide.MessageSquareCode(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="m10 8-3 3 3 3" /> <path d="m14 14 3-3-3-3" />`, opt)
}

// MessageSquareDashed renders the "message-square-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-dashed" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareDashed()
//	lucide.MessageSquareDashed(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 19h.01" /> <path d="M12 3h.01" /> <path d="M16 19h.01" /> <path d="M16 3h.01" /> <path d="M2 13h.01" /> <path d="M2 17v4.286a.71.71 0 0 0 1.212.502l2.202-2.202A2 2 0 0 1 6.828 19H8" /> <path d="M2 5a2 2 0 0 1 2-2" /> <path d="M2 9h.01" /> <path d="M20 3a2 2 0 0 1 2 2" /> <path d="M22 13h.01" /> <path d="M22 17a2 2 0 0 1-2 2" /> <path d="M22 9h.01" /> <path d="M8 3h.01" />`, opt)
}

// MessageSquareDiff renders the "message-square-diff" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-diff" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareDiff()
//	lucide.MessageSquareDiff(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareDiff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="M10 15h4" /> <path d="M10 9h4" /> <path d="M12 7v4" />`, opt)
}

// MessageSquareDot renders the "message-square-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-dot" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareDot()
//	lucide.MessageSquareDot(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.7 3H4a2 2 0 0 0-2 2v16.286a.71.71 0 0 0 1.212.502l2.202-2.202A2 2 0 0 1 6.828 19H20a2 2 0 0 0 2-2v-4.7" /> <circle cx="19" cy="6" r="3" />`, opt)
}

// MessageSquareHeart renders the "message-square-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-heart" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareHeart()
//	lucide.MessageSquareHeart(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="M7.5 9.5c0 .687.265 1.383.697 1.844l3.009 3.264a1.14 1.14 0 0 0 .407.314 1 1 0 0 0 .783-.004 1.14 1.14 0 0 0 .398-.31l3.008-3.264A2.77 2.77 0 0 0 16.5 9.5 2.5 2.5 0 0 0 12 8a2.5 2.5 0 0 0-4.5 1.5" />`, opt)
}

// MessageSquareLock renders the "message-square-lock" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-lock" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareLock()
//	lucide.MessageSquareLock(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareLock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 8.5V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v16.286a.71.71 0 0 0 1.212.502l2.202-2.202A2 2 0 0 1 6.828 19H10" /> <path d="M20 15v-2a2 2 0 0 0-4 0v2" /> <rect x="14" y="15" width="8" height="5" rx="1" />`, opt)
}

// MessageSquareMore renders the "message-square-more" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-more" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareMore()
//	lucide.MessageSquareMore(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareMore(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="M12 11h.01" /> <path d="M16 11h.01" /> <path d="M8 11h.01" />`, opt)
}

// MessageSquareOff renders the "message-square-off" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-off" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareOff()
//	lucide.MessageSquareOff(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 19H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.7.7 0 0 1 2 21.286V5a2 2 0 0 1 1.184-1.826" /> <path d="m2 2 20 20" /> <path d="M8.656 3H20a2 2 0 0 1 2 2v11.344" />`, opt)
}

// MessageSquarePlus renders the "message-square-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-plus" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquarePlus()
//	lucide.MessageSquarePlus(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquarePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="M12 8v6" /> <path d="M9 11h6" />`, opt)
}

// MessageSquareQuote renders the "message-square-quote" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-quote" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareQuote()
//	lucide.MessageSquareQuote(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareQuote(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 14a2 2 0 0 0 2-2V8h-2" /> <path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="M8 14a2 2 0 0 0 2-2V8H8" />`, opt)
}

// MessageSquareReply renders the "message-square-reply" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-reply" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareReply()
//	lucide.MessageSquareReply(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareReply(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="m10 8-3 3 3 3" /> <path d="M17 14v-1a2 2 0 0 0-2-2H7" />`, opt)
}

// MessageSquareShare renders the "message-square-share" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-share" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareShare()
//	lucide.MessageSquareShare(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareShare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3H4a2 2 0 0 0-2 2v16.286a.71.71 0 0 0 1.212.502l2.202-2.202A2 2 0 0 1 6.828 19H20a2 2 0 0 0 2-2v-4" /> <path d="M16 3h6v6" /> <path d="m16 9 6-6" />`, opt)
}

// MessageSquareText renders the "message-square-text" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-text" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareText()
//	lucide.MessageSquareText(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="M7 11h10" /> <path d="M7 15h6" /> <path d="M7 7h8" />`, opt)
}

// MessageSquareWarning renders the "message-square-warning" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-warning" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareWarning()
//	lucide.MessageSquareWarning(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareWarning(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="M12 15h.01" /> <path d="M12 7v4" />`, opt)
}

// MessageSquareX renders the "message-square-x" icon.
//
// Usage in templates:
//
//	{{ lucide "message-square-x" }}
//
// Direct usage in Go:
//
//	lucide.MessageSquareX()
//	lucide.MessageSquareX(lucide.Options{Size: 32, Class: "my-icon"})
func MessageSquareX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z" /> <path d="m14.5 8.5-5 5" /> <path d="m9.5 8.5 5 5" />`, opt)
}

// MessagesSquare renders the "messages-square" icon.
//
// Usage in templates:
//
//	{{ lucide "messages-square" }}
//
// Direct usage in Go:
//
//	lucide.MessagesSquare()
//	lucide.MessagesSquare(lucide.Options{Size: 32, Class: "my-icon"})
func MessagesSquare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 10a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 14.286V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z" /> <path d="M20 9a2 2 0 0 1 2 2v10.286a.71.71 0 0 1-1.212.502l-2.202-2.202A2 2 0 0 0 17.172 19H10a2 2 0 0 1-2-2v-1" />`, opt)
}

// Mic renders the "mic" icon.
//
// Usage in templates:
//
//	{{ lucide "mic" }}
//
// Direct usage in Go:
//
//	lucide.Mic()
//	lucide.Mic(lucide.Options{Size: 32, Class: "my-icon"})
func Mic(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 19v3" /> <path d="M19 10v2a7 7 0 0 1-14 0v-2" /> <rect x="9" y="2" width="6" height="13" rx="3" />`, opt)
}

// MicOff renders the "mic-off" icon.
//
// Usage in templates:
//
//	{{ lucide "mic-off" }}
//
// Direct usage in Go:
//
//	lucide.MicOff()
//	lucide.MicOff(lucide.Options{Size: 32, Class: "my-icon"})
func MicOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 19v3" /> <path d="M15 9.34V5a3 3 0 0 0-5.68-1.33" /> <path d="M16.95 16.95A7 7 0 0 1 5 12v-2" /> <path d="M18.89 13.23A7 7 0 0 0 19 12v-2" /> <path d="m2 2 20 20" /> <path d="M9 9v3a3 3 0 0 0 5.12 2.12" />`, opt)
}

// MicVocal renders the "mic-vocal" icon.
//
// Usage in templates:
//
//	{{ lucide "mic-vocal" }}
//
// Direct usage in Go:
//
//	lucide.MicVocal()
//	lucide.MicVocal(lucide.Options{Size: 32, Class: "my-icon"})
func MicVocal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11 7.601-5.994 8.19a1 1 0 0 0 .1 1.298l.817.818a1 1 0 0 0 1.314.087L15.09 12" /> <path d="M16.5 21.174C15.5 20.5 14.372 20 13 20c-2.058 0-3.928 2.356-6 2-2.072-.356-2.775-3.369-1.5-4.5" /> <circle cx="16" cy="7" r="5" />`, opt)
}

// Microchip renders the "microchip" icon.
//
// Usage in templates:
//
//	{{ lucide "microchip" }}
//
// Direct usage in Go:
//
//	lucide.Microchip()
//	lucide.Microchip(lucide.Options{Size: 32, Class: "my-icon"})
func Microchip(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 12h2" /> <path d="M18 16h2" /> <path d="M18 20h2" /> <path d="M18 4h2" /> <path d="M18 8h2" /> <path d="M4 12h2" /> <path d="M4 16h2" /> <path d="M4 20h2" /> <path d="M4 4h2" /> <path d="M4 8h2" /> <path d="M8 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-1.5c-.276 0-.494.227-.562.495a2 2 0 0 1-3.876 0C9.994 2.227 9.776 2 9.5 2z" />`, opt)
}

// Microscope renders the "microscope" icon.
//
// Usage in templates:
//
//	{{ lucide "microscope" }}
//
// Direct usage in Go:
//
//	lucide.Microscope()
//	lucide.Microscope(lucide.Options{Size: 32, Class: "my-icon"})
func Microscope(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 18h8" /> <path d="M3 22h18" /> <path d="M14 22a7 7 0 1 0 0-14h-1" /> <path d="M9 14h2" /> <path d="M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z" /> <path d="M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3" />`, opt)
}

// Microwave renders the "microwave" icon.
//
// Usage in templates:
//
//	{{ lucide "microwave" }}
//
// Direct usage in Go:
//
//	lucide.Microwave()
//	lucide.Microwave(lucide.Options{Size: 32, Class: "my-icon"})
func Microwave(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="15" x="2" y="4" rx="2" /> <rect width="8" height="7" x="6" y="8" rx="1" /> <path d="M18 8v7" /> <path d="M6 19v2" /> <path d="M18 19v2" />`, opt)
}

// Milestone renders the "milestone" icon.
//
// Usage in templates:
//
//	{{ lucide "milestone" }}
//
// Direct usage in Go:
//
//	lucide.Milestone()
//	lucide.Milestone(lucide.Options{Size: 32, Class: "my-icon"})
func Milestone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13v8" /> <path d="M12 3v3" /> <path d="M4 6a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h13a2 2 0 0 0 1.152-.365l3.424-2.317a1 1 0 0 0 0-1.635l-3.424-2.318A2 2 0 0 0 17 6z" />`, opt)
}

// Milk renders the "milk" icon.
//
// Usage in templates:
//
//	{{ lucide "milk" }}
//
// Direct usage in Go:
//
//	lucide.Milk()
//	lucide.Milk(lucide.Options{Size: 32, Class: "my-icon"})
func Milk(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2h8" /> <path d="M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2" /> <path d="M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0" />`, opt)
}

// MilkOff renders the "milk-off" icon.
//
// Usage in templates:
//
//	{{ lucide "milk-off" }}
//
// Direct usage in Go:
//
//	lucide.MilkOff()
//	lucide.MilkOff(lucide.Options{Size: 32, Class: "my-icon"})
func MilkOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2h8" /> <path d="M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3" /> <path d="M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// Minimize renders the "minimize" icon.
//
// Usage in templates:
//
//	{{ lucide "minimize" }}
//
// Direct usage in Go:
//
//	lucide.Minimize()
//	lucide.Minimize(lucide.Options{Size: 32, Class: "my-icon"})
func Minimize(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 3v3a2 2 0 0 1-2 2H3" /> <path d="M21 8h-3a2 2 0 0 1-2-2V3" /> <path d="M3 16h3a2 2 0 0 1 2 2v3" /> <path d="M16 21v-3a2 2 0 0 1 2-2h3" />`, opt)
}

// Minimize2 renders the "minimize-2" icon.
//
// Usage in templates:
//
//	{{ lucide "minimize-2" }}
//
// Direct usage in Go:
//
//	lucide.Minimize2()
//	lucide.Minimize2(lucide.Options{Size: 32, Class: "my-icon"})
func Minimize2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 10 7-7" /> <path d="M20 10h-6V4" /> <path d="m3 21 7-7" /> <path d="M4 14h6v6" />`, opt)
}

// Minus renders the "minus" icon.
//
// Usage in templates:
//
//	{{ lucide "minus" }}
//
// Direct usage in Go:
//
//	lucide.Minus()
//	lucide.Minus(lucide.Options{Size: 32, Class: "my-icon"})
func Minus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 12h14" />`, opt)
}

// Monitor renders the "monitor" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor" }}
//
// Direct usage in Go:
//
//	lucide.Monitor()
//	lucide.Monitor(lucide.Options{Size: 32, Class: "my-icon"})
func Monitor(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="14" x="2" y="3" rx="2" /> <line x1="8" x2="16" y1="21" y2="21" /> <line x1="12" x2="12" y1="17" y2="21" />`, opt)
}

// MonitorCheck renders the "monitor-check" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-check" }}
//
// Direct usage in Go:
//
//	lucide.MonitorCheck()
//	lucide.MonitorCheck(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m9 10 2 2 4-4" /> <rect width="20" height="14" x="2" y="3" rx="2" /> <path d="M12 17v4" /> <path d="M8 21h8" />`, opt)
}

// MonitorCloud renders the "monitor-cloud" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-cloud" }}
//
// Direct usage in Go:
//
//	lucide.MonitorCloud()
//	lucide.MonitorCloud(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorCloud(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 13a3 3 0 1 1 2.83-4H14a2 2 0 0 1 0 4z" /> <path d="M12 17v4" /> <path d="M8 21h8" /> <rect x="2" y="3" width="20" height="14" rx="2" />`, opt)
}

// MonitorCog renders the "monitor-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-cog" }}
//
// Direct usage in Go:
//
//	lucide.MonitorCog()
//	lucide.MonitorCog(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17v4" /> <path d="m14.305 7.53.923-.382" /> <path d="m15.228 4.852-.923-.383" /> <path d="m16.852 3.228-.383-.924" /> <path d="m16.852 8.772-.383.923" /> <path d="m19.148 3.228.383-.924" /> <path d="m19.53 9.696-.382-.924" /> <path d="m20.772 4.852.924-.383" /> <path d="m20.772 7.148.924.383" /> <path d="M22 13v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7" /> <path d="M8 21h8" /> <circle cx="18" cy="6" r="3" />`, opt)
}

// MonitorDot renders the "monitor-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-dot" }}
//
// Direct usage in Go:
//
//	lucide.MonitorDot()
//	lucide.MonitorDot(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17v4" /> <path d="M22 12.307V15a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h8.693" /> <path d="M8 21h8" /> <circle cx="19" cy="6" r="3" />`, opt)
}

// MonitorDown renders the "monitor-down" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-down" }}
//
// Direct usage in Go:
//
//	lucide.MonitorDown()
//	lucide.MonitorDown(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13V7" /> <path d="m15 10-3 3-3-3" /> <rect width="20" height="14" x="2" y="3" rx="2" /> <path d="M12 17v4" /> <path d="M8 21h8" />`, opt)
}

// MonitorOff renders the "monitor-off" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-off" }}
//
// Direct usage in Go:
//
//	lucide.MonitorOff()
//	lucide.MonitorOff(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2" /> <path d="M22 15V5a2 2 0 0 0-2-2H9" /> <path d="M8 21h8" /> <path d="M12 17v4" /> <path d="m2 2 20 20" />`, opt)
}

// MonitorPause renders the "monitor-pause" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-pause" }}
//
// Direct usage in Go:
//
//	lucide.MonitorPause()
//	lucide.MonitorPause(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorPause(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 13V7" /> <path d="M14 13V7" /> <rect width="20" height="14" x="2" y="3" rx="2" /> <path d="M12 17v4" /> <path d="M8 21h8" />`, opt)
}

// MonitorPlay renders the "monitor-play" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-play" }}
//
// Direct usage in Go:
//
//	lucide.MonitorPlay()
//	lucide.MonitorPlay(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorPlay(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.033 9.44a.647.647 0 0 1 0 1.12l-4.065 2.352a.645.645 0 0 1-.968-.56V7.648a.645.645 0 0 1 .967-.56z" /> <path d="M12 17v4" /> <path d="M8 21h8" /> <rect x="2" y="3" width="20" height="14" rx="2" />`, opt)
}

// MonitorSmartphone renders the "monitor-smartphone" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-smartphone" }}
//
// Direct usage in Go:
//
//	lucide.MonitorSmartphone()
//	lucide.MonitorSmartphone(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorSmartphone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8" /> <path d="M10 19v-3.96 3.15" /> <path d="M7 19h5" /> <rect width="6" height="10" x="16" y="12" rx="2" />`, opt)
}

// MonitorSpeaker renders the "monitor-speaker" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-speaker" }}
//
// Direct usage in Go:
//
//	lucide.MonitorSpeaker()
//	lucide.MonitorSpeaker(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorSpeaker(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5.5 20H8" /> <path d="M17 9h.01" /> <rect width="10" height="16" x="12" y="4" rx="2" /> <path d="M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4" /> <circle cx="17" cy="15" r="1" />`, opt)
}

// MonitorStop renders the "monitor-stop" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-stop" }}
//
// Direct usage in Go:
//
//	lucide.MonitorStop()
//	lucide.MonitorStop(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorStop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17v4" /> <path d="M8 21h8" /> <rect x="2" y="3" width="20" height="14" rx="2" /> <rect x="9" y="7" width="6" height="6" rx="1" />`, opt)
}

// MonitorUp renders the "monitor-up" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-up" }}
//
// Direct usage in Go:
//
//	lucide.MonitorUp()
//	lucide.MonitorUp(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m9 10 3-3 3 3" /> <path d="M12 13V7" /> <rect width="20" height="14" x="2" y="3" rx="2" /> <path d="M12 17v4" /> <path d="M8 21h8" />`, opt)
}

// MonitorX renders the "monitor-x" icon.
//
// Usage in templates:
//
//	{{ lucide "monitor-x" }}
//
// Direct usage in Go:
//
//	lucide.MonitorX()
//	lucide.MonitorX(lucide.Options{Size: 32, Class: "my-icon"})
func MonitorX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14.5 12.5-5-5" /> <path d="m9.5 12.5 5-5" /> <rect width="20" height="14" x="2" y="3" rx="2" /> <path d="M12 17v4" /> <path d="M8 21h8" />`, opt)
}

// Moon renders the "moon" icon.
//
// Usage in templates:
//
//	{{ lucide "moon" }}
//
// Direct usage in Go:
//
//	lucide.Moon()
//	lucide.Moon(lucide.Options{Size: 32, Class: "my-icon"})
func Moon(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401" />`, opt)
}

// MoonStar renders the "moon-star" icon.
//
// Usage in templates:
//
//	{{ lucide "moon-star" }}
//
// Direct usage in Go:
//
//	lucide.MoonStar()
//	lucide.MoonStar(lucide.Options{Size: 32, Class: "my-icon"})
func MoonStar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 5h4" /> <path d="M20 3v4" /> <path d="M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401" />`, opt)
}

// Motorbike renders the "motorbike" icon.
//
// Usage in templates:
//
//	{{ lucide "motorbike" }}
//
// Direct usage in Go:
//
//	lucide.Motorbike()
//	lucide.Motorbike(lucide.Options{Size: 32, Class: "my-icon"})
func Motorbike(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18 14-1-3" /> <path d="m3 9 6 2a2 2 0 0 1 2-2h2a2 2 0 0 1 1.99 1.81" /> <path d="M8 17h3a1 1 0 0 0 1-1 6 6 0 0 1 6-6 1 1 0 0 0 1-1v-.75A5 5 0 0 0 17 5" /> <circle cx="19" cy="17" r="3" /> <circle cx="5" cy="17" r="3" />`, opt)
}

// Mountain renders the "mountain" icon.
//
// Usage in templates:
//
//	{{ lucide "mountain" }}
//
// Direct usage in Go:
//
//	lucide.Mountain()
//	lucide.Mountain(lucide.Options{Size: 32, Class: "my-icon"})
func Mountain(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m8 3 4 8 5-5 5 15H2L8 3z" />`, opt)
}

// MountainSnow renders the "mountain-snow" icon.
//
// Usage in templates:
//
//	{{ lucide "mountain-snow" }}
//
// Direct usage in Go:
//
//	lucide.MountainSnow()
//	lucide.MountainSnow(lucide.Options{Size: 32, Class: "my-icon"})
func MountainSnow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m8 3 4 8 5-5 5 15H2L8 3z" /> <path d="M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19" />`, opt)
}

// Mouse renders the "mouse" icon.
//
// Usage in templates:
//
//	{{ lucide "mouse" }}
//
// Direct usage in Go:
//
//	lucide.Mouse()
//	lucide.Mouse(lucide.Options{Size: 32, Class: "my-icon"})
func Mouse(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="5" y="2" width="14" height="20" rx="7" /> <path d="M12 6v4" />`, opt)
}

// MouseOff renders the "mouse-off" icon.
//
// Usage in templates:
//
//	{{ lucide "mouse-off" }}
//
// Direct usage in Go:
//
//	lucide.MouseOff()
//	lucide.MouseOff(lucide.Options{Size: 32, Class: "my-icon"})
func MouseOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6v.343" /> <path d="M18.218 18.218A7 7 0 0 1 5 15V9a7 7 0 0 1 .782-3.218" /> <path d="M19 13.343V9A7 7 0 0 0 8.56 2.902" /> <path d="M22 22 2 2" />`, opt)
}

// MousePointer renders the "mouse-pointer" icon.
//
// Usage in templates:
//
//	{{ lucide "mouse-pointer" }}
//
// Direct usage in Go:
//
//	lucide.MousePointer()
//	lucide.MousePointer(lucide.Options{Size: 32, Class: "my-icon"})
func MousePointer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.586 12.586 19 19" /> <path d="M3.688 3.037a.497.497 0 0 0-.651.651l6.5 15.999a.501.501 0 0 0 .947-.062l1.569-6.083a2 2 0 0 1 1.448-1.479l6.124-1.579a.5.5 0 0 0 .063-.947z" />`, opt)
}

// MousePointer2 renders the "mouse-pointer-2" icon.
//
// Usage in templates:
//
//	{{ lucide "mouse-pointer-2" }}
//
// Direct usage in Go:
//
//	lucide.MousePointer2()
//	lucide.MousePointer2(lucide.Options{Size: 32, Class: "my-icon"})
func MousePointer2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4.037 4.688a.495.495 0 0 1 .651-.651l16 6.5a.5.5 0 0 1-.063.947l-6.124 1.58a2 2 0 0 0-1.438 1.435l-1.579 6.126a.5.5 0 0 1-.947.063z" />`, opt)
}

// MousePointerBan renders the "mouse-pointer-ban" icon.
//
// Usage in templates:
//
//	{{ lucide "mouse-pointer-ban" }}
//
// Direct usage in Go:
//
//	lucide.MousePointerBan()
//	lucide.MousePointerBan(lucide.Options{Size: 32, Class: "my-icon"})
func MousePointerBan(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.034 2.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.944L8.204 7.545a1 1 0 0 0-.66.66l-1.066 3.443a.5.5 0 0 1-.944.033z" /> <circle cx="16" cy="16" r="6" /> <path d="m11.8 11.8 8.4 8.4" />`, opt)
}

// MousePointerClick renders the "mouse-pointer-click" icon.
//
// Usage in templates:
//
//	{{ lucide "mouse-pointer-click" }}
//
// Direct usage in Go:
//
//	lucide.MousePointerClick()
//	lucide.MousePointerClick(lucide.Options{Size: 32, Class: "my-icon"})
func MousePointerClick(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 4.1 12 6" /> <path d="m5.1 8-2.9-.8" /> <path d="m6 12-1.9 2" /> <path d="M7.2 2.2 8 5.1" /> <path d="M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z" />`, opt)
}

// Move renders the "move" icon.
//
// Usage in templates:
//
//	{{ lucide "move" }}
//
// Direct usage in Go:
//
//	lucide.Move()
//	lucide.Move(lucide.Options{Size: 32, Class: "my-icon"})
func Move(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v20" /> <path d="m15 19-3 3-3-3" /> <path d="m19 9 3 3-3 3" /> <path d="M2 12h20" /> <path d="m5 9-3 3 3 3" /> <path d="m9 5 3-3 3 3" />`, opt)
}

// Move3d renders the "move-3d" icon.
//
// Usage in templates:
//
//	{{ lucide "move-3d" }}
//
// Direct usage in Go:
//
//	lucide.Move3d()
//	lucide.Move3d(lucide.Options{Size: 32, Class: "my-icon"})
func Move3d(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 3v16h16" /> <path d="m5 19 6-6" /> <path d="m2 6 3-3 3 3" /> <path d="m18 16 3 3-3 3" />`, opt)
}

// MoveDiagonal renders the "move-diagonal" icon.
//
// Usage in templates:
//
//	{{ lucide "move-diagonal" }}
//
// Direct usage in Go:
//
//	lucide.MoveDiagonal()
//	lucide.MoveDiagonal(lucide.Options{Size: 32, Class: "my-icon"})
func MoveDiagonal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 19H5v-6" /> <path d="M13 5h6v6" /> <path d="M19 5 5 19" />`, opt)
}

// MoveDiagonal2 renders the "move-diagonal-2" icon.
//
// Usage in templates:
//
//	{{ lucide "move-diagonal-2" }}
//
// Direct usage in Go:
//
//	lucide.MoveDiagonal2()
//	lucide.MoveDiagonal2(lucide.Options{Size: 32, Class: "my-icon"})
func MoveDiagonal2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 13v6h-6" /> <path d="M5 11V5h6" /> <path d="m5 5 14 14" />`, opt)
}

// MoveDown renders the "move-down" icon.
//
// Usage in templates:
//
//	{{ lucide "move-down" }}
//
// Direct usage in Go:
//
//	lucide.MoveDown()
//	lucide.MoveDown(lucide.Options{Size: 32, Class: "my-icon"})
func MoveDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 18L12 22L16 18" /> <path d="M12 2V22" />`, opt)
}

// MoveDownLeft renders the "move-down-left" icon.
//
// Usage in templates:
//
//	{{ lucide "move-down-left" }}
//
// Direct usage in Go:
//
//	lucide.MoveDownLeft()
//	lucide.MoveDownLeft(lucide.Options{Size: 32, Class: "my-icon"})
func MoveDownLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 19H5V13" /> <path d="M19 5L5 19" />`, opt)
}

// MoveDownRight renders the "move-down-right" icon.
//
// Usage in templates:
//
//	{{ lucide "move-down-right" }}
//
// Direct usage in Go:
//
//	lucide.MoveDownRight()
//	lucide.MoveDownRight(lucide.Options{Size: 32, Class: "my-icon"})
func MoveDownRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 13V19H13" /> <path d="M5 5L19 19" />`, opt)
}

// MoveHorizontal renders the "move-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "move-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.MoveHorizontal()
//	lucide.MoveHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func MoveHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18 8 4 4-4 4" /> <path d="M2 12h20" /> <path d="m6 8-4 4 4 4" />`, opt)
}

// MoveLeft renders the "move-left" icon.
//
// Usage in templates:
//
//	{{ lucide "move-left" }}
//
// Direct usage in Go:
//
//	lucide.MoveLeft()
//	lucide.MoveLeft(lucide.Options{Size: 32, Class: "my-icon"})
func MoveLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 8L2 12L6 16" /> <path d="M2 12H22" />`, opt)
}

// MoveRight renders the "move-right" icon.
//
// Usage in templates:
//
//	{{ lucide "move-right" }}
//
// Direct usage in Go:
//
//	lucide.MoveRight()
//	lucide.MoveRight(lucide.Options{Size: 32, Class: "my-icon"})
func MoveRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 8L22 12L18 16" /> <path d="M2 12H22" />`, opt)
}

// MoveUp renders the "move-up" icon.
//
// Usage in templates:
//
//	{{ lucide "move-up" }}
//
// Direct usage in Go:
//
//	lucide.MoveUp()
//	lucide.MoveUp(lucide.Options{Size: 32, Class: "my-icon"})
func MoveUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 6L12 2L16 6" /> <path d="M12 2V22" />`, opt)
}

// MoveUpLeft renders the "move-up-left" icon.
//
// Usage in templates:
//
//	{{ lucide "move-up-left" }}
//
// Direct usage in Go:
//
//	lucide.MoveUpLeft()
//	lucide.MoveUpLeft(lucide.Options{Size: 32, Class: "my-icon"})
func MoveUpLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 11V5H11" /> <path d="M5 5L19 19" />`, opt)
}

// MoveUpRight renders the "move-up-right" icon.
//
// Usage in templates:
//
//	{{ lucide "move-up-right" }}
//
// Direct usage in Go:
//
//	lucide.MoveUpRight()
//	lucide.MoveUpRight(lucide.Options{Size: 32, Class: "my-icon"})
func MoveUpRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 5H19V11" /> <path d="M19 5L5 19" />`, opt)
}

// MoveVertical renders the "move-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "move-vertical" }}
//
// Direct usage in Go:
//
//	lucide.MoveVertical()
//	lucide.MoveVertical(lucide.Options{Size: 32, Class: "my-icon"})
func MoveVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v20" /> <path d="m8 18 4 4 4-4" /> <path d="m8 6 4-4 4 4" />`, opt)
}

// Music renders the "music" icon.
//
// Usage in templates:
//
//	{{ lucide "music" }}
//
// Direct usage in Go:
//
//	lucide.Music()
//	lucide.Music(lucide.Options{Size: 32, Class: "my-icon"})
func Music(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 18V5l12-2v13" /> <circle cx="6" cy="18" r="3" /> <circle cx="18" cy="16" r="3" />`, opt)
}

// Music2 renders the "music-2" icon.
//
// Usage in templates:
//
//	{{ lucide "music-2" }}
//
// Direct usage in Go:
//
//	lucide.Music2()
//	lucide.Music2(lucide.Options{Size: 32, Class: "my-icon"})
func Music2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="8" cy="18" r="4" /> <path d="M12 18V2l7 4" />`, opt)
}

// Music3 renders the "music-3" icon.
//
// Usage in templates:
//
//	{{ lucide "music-3" }}
//
// Direct usage in Go:
//
//	lucide.Music3()
//	lucide.Music3(lucide.Options{Size: 32, Class: "my-icon"})
func Music3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="18" r="4" /> <path d="M16 18V2" />`, opt)
}

// Music4 renders the "music-4" icon.
//
// Usage in templates:
//
//	{{ lucide "music-4" }}
//
// Direct usage in Go:
//
//	lucide.Music4()
//	lucide.Music4(lucide.Options{Size: 32, Class: "my-icon"})
func Music4(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 18V5l12-2v13" /> <path d="m9 9 12-2" /> <circle cx="6" cy="18" r="3" /> <circle cx="18" cy="16" r="3" />`, opt)
}

// Navigation renders the "navigation" icon.
//
// Usage in templates:
//
//	{{ lucide "navigation" }}
//
// Direct usage in Go:
//
//	lucide.Navigation()
//	lucide.Navigation(lucide.Options{Size: 32, Class: "my-icon"})
func Navigation(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<polygon points="3 11 22 2 13 21 11 13 3 11" />`, opt)
}

// Navigation2 renders the "navigation-2" icon.
//
// Usage in templates:
//
//	{{ lucide "navigation-2" }}
//
// Direct usage in Go:
//
//	lucide.Navigation2()
//	lucide.Navigation2(lucide.Options{Size: 32, Class: "my-icon"})
func Navigation2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<polygon points="12 2 19 21 12 17 5 21 12 2" />`, opt)
}

// Navigation2Off renders the "navigation-2-off" icon.
//
// Usage in templates:
//
//	{{ lucide "navigation-2-off" }}
//
// Direct usage in Go:
//
//	lucide.Navigation2Off()
//	lucide.Navigation2Off(lucide.Options{Size: 32, Class: "my-icon"})
func Navigation2Off(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9.31 9.31 5 21l7-4 7 4-1.17-3.17" /> <path d="M14.53 8.88 12 2l-1.17 3.17" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// NavigationOff renders the "navigation-off" icon.
//
// Usage in templates:
//
//	{{ lucide "navigation-off" }}
//
// Direct usage in Go:
//
//	lucide.NavigationOff()
//	lucide.NavigationOff(lucide.Options{Size: 32, Class: "my-icon"})
func NavigationOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8.43 8.43 3 11l8 2 2 8 2.57-5.43" /> <path d="M17.39 11.73 22 2l-9.73 4.61" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// Network renders the "network" icon.
//
// Usage in templates:
//
//	{{ lucide "network" }}
//
// Direct usage in Go:
//
//	lucide.Network()
//	lucide.Network(lucide.Options{Size: 32, Class: "my-icon"})
func Network(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="16" y="16" width="6" height="6" rx="1" /> <rect x="2" y="16" width="6" height="6" rx="1" /> <rect x="9" y="2" width="6" height="6" rx="1" /> <path d="M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3" /> <path d="M12 12V8" />`, opt)
}

// Newspaper renders the "newspaper" icon.
//
// Usage in templates:
//
//	{{ lucide "newspaper" }}
//
// Direct usage in Go:
//
//	lucide.Newspaper()
//	lucide.Newspaper(lucide.Options{Size: 32, Class: "my-icon"})
func Newspaper(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 18h-5" /> <path d="M18 14h-8" /> <path d="M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-4 0v-9a2 2 0 0 1 2-2h2" /> <rect width="8" height="4" x="10" y="6" rx="1" />`, opt)
}

// Nfc renders the "nfc" icon.
//
// Usage in templates:
//
//	{{ lucide "nfc" }}
//
// Direct usage in Go:
//
//	lucide.Nfc()
//	lucide.Nfc(lucide.Options{Size: 32, Class: "my-icon"})
func Nfc(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 8.32a7.43 7.43 0 0 1 0 7.36" /> <path d="M9.46 6.21a11.76 11.76 0 0 1 0 11.58" /> <path d="M12.91 4.1a15.91 15.91 0 0 1 .01 15.8" /> <path d="M16.37 2a20.16 20.16 0 0 1 0 20" />`, opt)
}

// NonBinary renders the "non-binary" icon.
//
// Usage in templates:
//
//	{{ lucide "non-binary" }}
//
// Direct usage in Go:
//
//	lucide.NonBinary()
//	lucide.NonBinary(lucide.Options{Size: 32, Class: "my-icon"})
func NonBinary(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v10" /> <path d="m8.5 4 7 4" /> <path d="m8.5 8 7-4" /> <circle cx="12" cy="17" r="5" />`, opt)
}

// Notebook renders the "notebook" icon.
//
// Usage in templates:
//
//	{{ lucide "notebook" }}
//
// Direct usage in Go:
//
//	lucide.Notebook()
//	lucide.Notebook(lucide.Options{Size: 32, Class: "my-icon"})
func Notebook(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 6h4" /> <path d="M2 10h4" /> <path d="M2 14h4" /> <path d="M2 18h4" /> <rect width="16" height="20" x="4" y="2" rx="2" /> <path d="M16 2v20" />`, opt)
}

// NotebookPen renders the "notebook-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "notebook-pen" }}
//
// Direct usage in Go:
//
//	lucide.NotebookPen()
//	lucide.NotebookPen(lucide.Options{Size: 32, Class: "my-icon"})
func NotebookPen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.4 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-7.4" /> <path d="M2 6h4" /> <path d="M2 10h4" /> <path d="M2 14h4" /> <path d="M2 18h4" /> <path d="M21.378 5.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" />`, opt)
}

// NotebookTabs renders the "notebook-tabs" icon.
//
// Usage in templates:
//
//	{{ lucide "notebook-tabs" }}
//
// Direct usage in Go:
//
//	lucide.NotebookTabs()
//	lucide.NotebookTabs(lucide.Options{Size: 32, Class: "my-icon"})
func NotebookTabs(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 6h4" /> <path d="M2 10h4" /> <path d="M2 14h4" /> <path d="M2 18h4" /> <rect width="16" height="20" x="4" y="2" rx="2" /> <path d="M15 2v20" /> <path d="M15 7h5" /> <path d="M15 12h5" /> <path d="M15 17h5" />`, opt)
}

// NotebookText renders the "notebook-text" icon.
//
// Usage in templates:
//
//	{{ lucide "notebook-text" }}
//
// Direct usage in Go:
//
//	lucide.NotebookText()
//	lucide.NotebookText(lucide.Options{Size: 32, Class: "my-icon"})
func NotebookText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 6h4" /> <path d="M2 10h4" /> <path d="M2 14h4" /> <path d="M2 18h4" /> <rect width="16" height="20" x="4" y="2" rx="2" /> <path d="M9.5 8h5" /> <path d="M9.5 12H16" /> <path d="M9.5 16H14" />`, opt)
}

// NotepadText renders the "notepad-text" icon.
//
// Usage in templates:
//
//	{{ lucide "notepad-text" }}
//
// Direct usage in Go:
//
//	lucide.NotepadText()
//	lucide.NotepadText(lucide.Options{Size: 32, Class: "my-icon"})
func NotepadText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M12 2v4" /> <path d="M16 2v4" /> <rect width="16" height="18" x="4" y="4" rx="2" /> <path d="M8 10h6" /> <path d="M8 14h8" /> <path d="M8 18h5" />`, opt)
}

// NotepadTextDashed renders the "notepad-text-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "notepad-text-dashed" }}
//
// Direct usage in Go:
//
//	lucide.NotepadTextDashed()
//	lucide.NotepadTextDashed(lucide.Options{Size: 32, Class: "my-icon"})
func NotepadTextDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 2v4" /> <path d="M12 2v4" /> <path d="M16 2v4" /> <path d="M16 4h2a2 2 0 0 1 2 2v2" /> <path d="M20 12v2" /> <path d="M20 18v2a2 2 0 0 1-2 2h-1" /> <path d="M13 22h-2" /> <path d="M7 22H6a2 2 0 0 1-2-2v-2" /> <path d="M4 14v-2" /> <path d="M4 8V6a2 2 0 0 1 2-2h2" /> <path d="M8 10h6" /> <path d="M8 14h8" /> <path d="M8 18h5" />`, opt)
}

// Nut renders the "nut" icon.
//
// Usage in templates:
//
//	{{ lucide "nut" }}
//
// Direct usage in Go:
//
//	lucide.Nut()
//	lucide.Nut(lucide.Options{Size: 32, Class: "my-icon"})
func Nut(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 4V2" /> <path d="M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4" /> <path d="M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z" />`, opt)
}

// NutOff renders the "nut-off" icon.
//
// Usage in templates:
//
//	{{ lucide "nut-off" }}
//
// Direct usage in Go:
//
//	lucide.NutOff()
//	lucide.NutOff(lucide.Options{Size: 32, Class: "my-icon"})
func NutOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 4V2" /> <path d="M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939" /> <path d="M19 10v3.343" /> <path d="M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// Octagon renders the "octagon" icon.
//
// Usage in templates:
//
//	{{ lucide "octagon" }}
//
// Direct usage in Go:
//
//	lucide.Octagon()
//	lucide.Octagon(lucide.Options{Size: 32, Class: "my-icon"})
func Octagon(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z" />`, opt)
}

// OctagonAlert renders the "octagon-alert" icon.
//
// Usage in templates:
//
//	{{ lucide "octagon-alert" }}
//
// Direct usage in Go:
//
//	lucide.OctagonAlert()
//	lucide.OctagonAlert(lucide.Options{Size: 32, Class: "my-icon"})
func OctagonAlert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 16h.01" /> <path d="M12 8v4" /> <path d="M15.312 2a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586l-4.688-4.688A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2z" />`, opt)
}

// OctagonMinus renders the "octagon-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "octagon-minus" }}
//
// Direct usage in Go:
//
//	lucide.OctagonMinus()
//	lucide.OctagonMinus(lucide.Options{Size: 32, Class: "my-icon"})
func OctagonMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z" /> <path d="M8 12h8" />`, opt)
}

// OctagonPause renders the "octagon-pause" icon.
//
// Usage in templates:
//
//	{{ lucide "octagon-pause" }}
//
// Direct usage in Go:
//
//	lucide.OctagonPause()
//	lucide.OctagonPause(lucide.Options{Size: 32, Class: "my-icon"})
func OctagonPause(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 15V9" /> <path d="M14 15V9" /> <path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z" />`, opt)
}

// OctagonX renders the "octagon-x" icon.
//
// Usage in templates:
//
//	{{ lucide "octagon-x" }}
//
// Direct usage in Go:
//
//	lucide.OctagonX()
//	lucide.OctagonX(lucide.Options{Size: 32, Class: "my-icon"})
func OctagonX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 9-6 6" /> <path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z" /> <path d="m9 9 6 6" />`, opt)
}

// Omega renders the "omega" icon.
//
// Usage in templates:
//
//	{{ lucide "omega" }}
//
// Direct usage in Go:
//
//	lucide.Omega()
//	lucide.Omega(lucide.Options{Size: 32, Class: "my-icon"})
func Omega(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 20h4.5a.5.5 0 0 0 .5-.5v-.282a.52.52 0 0 0-.247-.437 8 8 0 1 1 8.494-.001.52.52 0 0 0-.247.438v.282a.5.5 0 0 0 .5.5H21" />`, opt)
}

// Option renders the "option" icon.
//
// Usage in templates:
//
//	{{ lucide "option" }}
//
// Direct usage in Go:
//
//	lucide.Option()
//	lucide.Option(lucide.Options{Size: 32, Class: "my-icon"})
func Option(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3h6l6 18h6" /> <path d="M14 3h7" />`, opt)
}

// Orbit renders the "orbit" icon.
//
// Usage in templates:
//
//	{{ lucide "orbit" }}
//
// Direct usage in Go:
//
//	lucide.Orbit()
//	lucide.Orbit(lucide.Options{Size: 32, Class: "my-icon"})
func Orbit(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20.341 6.484A10 10 0 0 1 10.266 21.85" /> <path d="M3.659 17.516A10 10 0 0 1 13.74 2.152" /> <circle cx="12" cy="12" r="3" /> <circle cx="19" cy="5" r="2" /> <circle cx="5" cy="19" r="2" />`, opt)
}

// Origami renders the "origami" icon.
//
// Usage in templates:
//
//	{{ lucide "origami" }}
//
// Direct usage in Go:
//
//	lucide.Origami()
//	lucide.Origami(lucide.Options{Size: 32, Class: "my-icon"})
func Origami(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 12V4a1 1 0 0 1 1-1h6.297a1 1 0 0 1 .651 1.759l-4.696 4.025" /> <path d="m12 21-7.414-7.414A2 2 0 0 1 4 12.172V6.415a1.002 1.002 0 0 1 1.707-.707L20 20.009" /> <path d="m12.214 3.381 8.414 14.966a1 1 0 0 1-.167 1.199l-1.168 1.163a1 1 0 0 1-.706.291H6.351a1 1 0 0 1-.625-.219L3.25 18.8a1 1 0 0 1 .631-1.781l4.165.027" />`, opt)
}

// Package renders the "package" icon.
//
// Usage in templates:
//
//	{{ lucide "package" }}
//
// Direct usage in Go:
//
//	lucide.Package()
//	lucide.Package(lucide.Options{Size: 32, Class: "my-icon"})
func Package(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 21.73a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73z" /> <path d="M12 22V12" /> <polyline points="3.29 7 12 12 20.71 7" /> <path d="m7.5 4.27 9 5.15" />`, opt)
}

// Package2 renders the "package-2" icon.
//
// Usage in templates:
//
//	{{ lucide "package-2" }}
//
// Direct usage in Go:
//
//	lucide.Package2()
//	lucide.Package2(lucide.Options{Size: 32, Class: "my-icon"})
func Package2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v6" /> <path d="M16.76 3a2 2 0 0 1 1.8 1.1l2.23 4.479a2 2 0 0 1 .21.891V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9.472a2 2 0 0 1 .211-.894L5.45 4.1A2 2 0 0 1 7.24 3z" /> <path d="M3.054 9.013h17.893" />`, opt)
}

// PackageCheck renders the "package-check" icon.
//
// Usage in templates:
//
//	{{ lucide "package-check" }}
//
// Direct usage in Go:
//
//	lucide.PackageCheck()
//	lucide.PackageCheck(lucide.Options{Size: 32, Class: "my-icon"})
func PackageCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 16 2 2 4-4" /> <path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> <path d="m7.5 4.27 9 5.15" /> <polyline points="3.29 7 12 12 20.71 7" /> <line x1="12" x2="12" y1="22" y2="12" />`, opt)
}

// PackageMinus renders the "package-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "package-minus" }}
//
// Direct usage in Go:
//
//	lucide.PackageMinus()
//	lucide.PackageMinus(lucide.Options{Size: 32, Class: "my-icon"})
func PackageMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 16h6" /> <path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> <path d="m7.5 4.27 9 5.15" /> <polyline points="3.29 7 12 12 20.71 7" /> <line x1="12" x2="12" y1="22" y2="12" />`, opt)
}

// PackageOpen renders the "package-open" icon.
//
// Usage in templates:
//
//	{{ lucide "package-open" }}
//
// Direct usage in Go:
//
//	lucide.PackageOpen()
//	lucide.PackageOpen(lucide.Options{Size: 32, Class: "my-icon"})
func PackageOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22v-9" /> <path d="M15.17 2.21a1.67 1.67 0 0 1 1.63 0L21 4.57a1.93 1.93 0 0 1 0 3.36L8.82 14.79a1.655 1.655 0 0 1-1.64 0L3 12.43a1.93 1.93 0 0 1 0-3.36z" /> <path d="M20 13v3.87a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13" /> <path d="M21 12.43a1.93 1.93 0 0 0 0-3.36L8.83 2.2a1.64 1.64 0 0 0-1.63 0L3 4.57a1.93 1.93 0 0 0 0 3.36l12.18 6.86a1.636 1.636 0 0 0 1.63 0z" />`, opt)
}

// PackagePlus renders the "package-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "package-plus" }}
//
// Direct usage in Go:
//
//	lucide.PackagePlus()
//	lucide.PackagePlus(lucide.Options{Size: 32, Class: "my-icon"})
func PackagePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 16h6" /> <path d="M19 13v6" /> <path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> <path d="m7.5 4.27 9 5.15" /> <polyline points="3.29 7 12 12 20.71 7" /> <line x1="12" x2="12" y1="22" y2="12" />`, opt)
}

// PackageSearch renders the "package-search" icon.
//
// Usage in templates:
//
//	{{ lucide "package-search" }}
//
// Direct usage in Go:
//
//	lucide.PackageSearch()
//	lucide.PackageSearch(lucide.Options{Size: 32, Class: "my-icon"})
func PackageSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> <path d="m7.5 4.27 9 5.15" /> <polyline points="3.29 7 12 12 20.71 7" /> <line x1="12" x2="12" y1="22" y2="12" /> <circle cx="18.5" cy="15.5" r="2.5" /> <path d="M20.27 17.27 22 19" />`, opt)
}

// PackageX renders the "package-x" icon.
//
// Usage in templates:
//
//	{{ lucide "package-x" }}
//
// Direct usage in Go:
//
//	lucide.PackageX()
//	lucide.PackageX(lucide.Options{Size: 32, Class: "my-icon"})
func PackageX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> <path d="m7.5 4.27 9 5.15" /> <polyline points="3.29 7 12 12 20.71 7" /> <line x1="12" x2="12" y1="22" y2="12" /> <path d="m17 13 5 5m-5 0 5-5" />`, opt)
}

// PaintBucket renders the "paint-bucket" icon.
//
// Usage in templates:
//
//	{{ lucide "paint-bucket" }}
//
// Direct usage in Go:
//
//	lucide.PaintBucket()
//	lucide.PaintBucket(lucide.Options{Size: 32, Class: "my-icon"})
func PaintBucket(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z" /> <path d="m5 2 5 5" /> <path d="M2 13h15" /> <path d="M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z" />`, opt)
}

// PaintRoller renders the "paint-roller" icon.
//
// Usage in templates:
//
//	{{ lucide "paint-roller" }}
//
// Direct usage in Go:
//
//	lucide.PaintRoller()
//	lucide.PaintRoller(lucide.Options{Size: 32, Class: "my-icon"})
func PaintRoller(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="16" height="6" x="2" y="2" rx="2" /> <path d="M10 16v-2a2 2 0 0 1 2-2h8a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2" /> <rect width="4" height="6" x="8" y="16" rx="1" />`, opt)
}

// Paintbrush renders the "paintbrush" icon.
//
// Usage in templates:
//
//	{{ lucide "paintbrush" }}
//
// Direct usage in Go:
//
//	lucide.Paintbrush()
//	lucide.Paintbrush(lucide.Options{Size: 32, Class: "my-icon"})
func Paintbrush(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14.622 17.897-10.68-2.913" /> <path d="M18.376 2.622a1 1 0 1 1 3.002 3.002L17.36 9.643a.5.5 0 0 0 0 .707l.944.944a2.41 2.41 0 0 1 0 3.408l-.944.944a.5.5 0 0 1-.707 0L8.354 7.348a.5.5 0 0 1 0-.707l.944-.944a2.41 2.41 0 0 1 3.408 0l.944.944a.5.5 0 0 0 .707 0z" /> <path d="M9 8c-1.804 2.71-3.97 3.46-6.583 3.948a.507.507 0 0 0-.302.819l7.32 8.883a1 1 0 0 0 1.185.204C12.735 20.405 16 16.792 16 15" />`, opt)
}

// PaintbrushVertical renders the "paintbrush-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "paintbrush-vertical" }}
//
// Direct usage in Go:
//
//	lucide.PaintbrushVertical()
//	lucide.PaintbrushVertical(lucide.Options{Size: 32, Class: "my-icon"})
func PaintbrushVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v2" /> <path d="M14 2v4" /> <path d="M17 2a1 1 0 0 1 1 1v9H6V3a1 1 0 0 1 1-1z" /> <path d="M6 12a1 1 0 0 0-1 1v1a2 2 0 0 0 2 2h2a1 1 0 0 1 1 1v2.9a2 2 0 1 0 4 0V17a1 1 0 0 1 1-1h2a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1" />`, opt)
}

// Palette renders the "palette" icon.
//
// Usage in templates:
//
//	{{ lucide "palette" }}
//
// Direct usage in Go:
//
//	lucide.Palette()
//	lucide.Palette(lucide.Options{Size: 32, Class: "my-icon"})
func Palette(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22a1 1 0 0 1 0-20 10 9 0 0 1 10 9 5 5 0 0 1-5 5h-2.25a1.75 1.75 0 0 0-1.4 2.8l.3.4a1.75 1.75 0 0 1-1.4 2.8z" /> <circle cx="13.5" cy="6.5" r=".5" fill="currentColor" /> <circle cx="17.5" cy="10.5" r=".5" fill="currentColor" /> <circle cx="6.5" cy="12.5" r=".5" fill="currentColor" /> <circle cx="8.5" cy="7.5" r=".5" fill="currentColor" />`, opt)
}

// Panda renders the "panda" icon.
//
// Usage in templates:
//
//	{{ lucide "panda" }}
//
// Direct usage in Go:
//
//	lucide.Panda()
//	lucide.Panda(lucide.Options{Size: 32, Class: "my-icon"})
func Panda(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.25 17.25h1.5L12 18z" /> <path d="m15 12 2 2" /> <path d="M18 6.5a.5.5 0 0 0-.5-.5" /> <path d="M20.69 9.67a4.5 4.5 0 1 0-7.04-5.5 8.35 8.35 0 0 0-3.3 0 4.5 4.5 0 1 0-7.04 5.5C2.49 11.2 2 12.88 2 14.5 2 19.47 6.48 22 12 22s10-2.53 10-7.5c0-1.62-.48-3.3-1.3-4.83" /> <path d="M6 6.5a.495.495 0 0 1 .5-.5" /> <path d="m9 12-2 2" />`, opt)
}

// PanelBottom renders the "panel-bottom" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-bottom" }}
//
// Direct usage in Go:
//
//	lucide.PanelBottom()
//	lucide.PanelBottom(lucide.Options{Size: 32, Class: "my-icon"})
func PanelBottom(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 15h18" />`, opt)
}

// PanelBottomClose renders the "panel-bottom-close" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-bottom-close" }}
//
// Direct usage in Go:
//
//	lucide.PanelBottomClose()
//	lucide.PanelBottomClose(lucide.Options{Size: 32, Class: "my-icon"})
func PanelBottomClose(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 15h18" /> <path d="m15 8-3 3-3-3" />`, opt)
}

// PanelBottomDashed renders the "panel-bottom-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-bottom-dashed" }}
//
// Direct usage in Go:
//
//	lucide.PanelBottomDashed()
//	lucide.PanelBottomDashed(lucide.Options{Size: 32, Class: "my-icon"})
func PanelBottomDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M14 15h1" /> <path d="M19 15h2" /> <path d="M3 15h2" /> <path d="M9 15h1" />`, opt)
}

// PanelBottomOpen renders the "panel-bottom-open" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-bottom-open" }}
//
// Direct usage in Go:
//
//	lucide.PanelBottomOpen()
//	lucide.PanelBottomOpen(lucide.Options{Size: 32, Class: "my-icon"})
func PanelBottomOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 15h18" /> <path d="m9 10 3-3 3 3" />`, opt)
}

// PanelLeft renders the "panel-left" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-left" }}
//
// Direct usage in Go:
//
//	lucide.PanelLeft()
//	lucide.PanelLeft(lucide.Options{Size: 32, Class: "my-icon"})
func PanelLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M9 3v18" />`, opt)
}

// PanelLeftClose renders the "panel-left-close" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-left-close" }}
//
// Direct usage in Go:
//
//	lucide.PanelLeftClose()
//	lucide.PanelLeftClose(lucide.Options{Size: 32, Class: "my-icon"})
func PanelLeftClose(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M9 3v18" /> <path d="m16 15-3-3 3-3" />`, opt)
}

// PanelLeftDashed renders the "panel-left-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-left-dashed" }}
//
// Direct usage in Go:
//
//	lucide.PanelLeftDashed()
//	lucide.PanelLeftDashed(lucide.Options{Size: 32, Class: "my-icon"})
func PanelLeftDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M9 14v1" /> <path d="M9 19v2" /> <path d="M9 3v2" /> <path d="M9 9v1" />`, opt)
}

// PanelLeftOpen renders the "panel-left-open" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-left-open" }}
//
// Direct usage in Go:
//
//	lucide.PanelLeftOpen()
//	lucide.PanelLeftOpen(lucide.Options{Size: 32, Class: "my-icon"})
func PanelLeftOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M9 3v18" /> <path d="m14 9 3 3-3 3" />`, opt)
}

// PanelLeftRightDashed renders the "panel-left-right-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-left-right-dashed" }}
//
// Direct usage in Go:
//
//	lucide.PanelLeftRightDashed()
//	lucide.PanelLeftRightDashed(lucide.Options{Size: 32, Class: "my-icon"})
func PanelLeftRightDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 10V9" /> <path d="M15 15v-1" /> <path d="M15 21v-2" /> <path d="M15 5V3" /> <path d="M9 10V9" /> <path d="M9 15v-1" /> <path d="M9 21v-2" /> <path d="M9 5V3" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// PanelRight renders the "panel-right" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-right" }}
//
// Direct usage in Go:
//
//	lucide.PanelRight()
//	lucide.PanelRight(lucide.Options{Size: 32, Class: "my-icon"})
func PanelRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M15 3v18" />`, opt)
}

// PanelRightClose renders the "panel-right-close" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-right-close" }}
//
// Direct usage in Go:
//
//	lucide.PanelRightClose()
//	lucide.PanelRightClose(lucide.Options{Size: 32, Class: "my-icon"})
func PanelRightClose(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M15 3v18" /> <path d="m8 9 3 3-3 3" />`, opt)
}

// PanelRightDashed renders the "panel-right-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-right-dashed" }}
//
// Direct usage in Go:
//
//	lucide.PanelRightDashed()
//	lucide.PanelRightDashed(lucide.Options{Size: 32, Class: "my-icon"})
func PanelRightDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M15 14v1" /> <path d="M15 19v2" /> <path d="M15 3v2" /> <path d="M15 9v1" />`, opt)
}

// PanelRightOpen renders the "panel-right-open" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-right-open" }}
//
// Direct usage in Go:
//
//	lucide.PanelRightOpen()
//	lucide.PanelRightOpen(lucide.Options{Size: 32, Class: "my-icon"})
func PanelRightOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M15 3v18" /> <path d="m10 15-3-3 3-3" />`, opt)
}

// PanelTop renders the "panel-top" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-top" }}
//
// Direct usage in Go:
//
//	lucide.PanelTop()
//	lucide.PanelTop(lucide.Options{Size: 32, Class: "my-icon"})
func PanelTop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 9h18" />`, opt)
}

// PanelTopBottomDashed renders the "panel-top-bottom-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-top-bottom-dashed" }}
//
// Direct usage in Go:
//
//	lucide.PanelTopBottomDashed()
//	lucide.PanelTopBottomDashed(lucide.Options{Size: 32, Class: "my-icon"})
func PanelTopBottomDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 15h1" /> <path d="M14 9h1" /> <path d="M19 15h2" /> <path d="M19 9h2" /> <path d="M3 15h2" /> <path d="M3 9h2" /> <path d="M9 15h1" /> <path d="M9 9h1" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// PanelTopClose renders the "panel-top-close" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-top-close" }}
//
// Direct usage in Go:
//
//	lucide.PanelTopClose()
//	lucide.PanelTopClose(lucide.Options{Size: 32, Class: "my-icon"})
func PanelTopClose(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 9h18" /> <path d="m9 16 3-3 3 3" />`, opt)
}

// PanelTopDashed renders the "panel-top-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-top-dashed" }}
//
// Direct usage in Go:
//
//	lucide.PanelTopDashed()
//	lucide.PanelTopDashed(lucide.Options{Size: 32, Class: "my-icon"})
func PanelTopDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M14 9h1" /> <path d="M19 9h2" /> <path d="M3 9h2" /> <path d="M9 9h1" />`, opt)
}

// PanelTopOpen renders the "panel-top-open" icon.
//
// Usage in templates:
//
//	{{ lucide "panel-top-open" }}
//
// Direct usage in Go:
//
//	lucide.PanelTopOpen()
//	lucide.PanelTopOpen(lucide.Options{Size: 32, Class: "my-icon"})
func PanelTopOpen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 9h18" /> <path d="m15 14-3 3-3-3" />`, opt)
}

// PanelsLeftBottom renders the "panels-left-bottom" icon.
//
// Usage in templates:
//
//	{{ lucide "panels-left-bottom" }}
//
// Direct usage in Go:
//
//	lucide.PanelsLeftBottom()
//	lucide.PanelsLeftBottom(lucide.Options{Size: 32, Class: "my-icon"})
func PanelsLeftBottom(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M9 3v18" /> <path d="M9 15h12" />`, opt)
}

// PanelsRightBottom renders the "panels-right-bottom" icon.
//
// Usage in templates:
//
//	{{ lucide "panels-right-bottom" }}
//
// Direct usage in Go:
//
//	lucide.PanelsRightBottom()
//	lucide.PanelsRightBottom(lucide.Options{Size: 32, Class: "my-icon"})
func PanelsRightBottom(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 15h12" /> <path d="M15 3v18" />`, opt)
}

// PanelsTopLeft renders the "panels-top-left" icon.
//
// Usage in templates:
//
//	{{ lucide "panels-top-left" }}
//
// Direct usage in Go:
//
//	lucide.PanelsTopLeft()
//	lucide.PanelsTopLeft(lucide.Options{Size: 32, Class: "my-icon"})
func PanelsTopLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 9h18" /> <path d="M9 21V9" />`, opt)
}

// Paperclip renders the "paperclip" icon.
//
// Usage in templates:
//
//	{{ lucide "paperclip" }}
//
// Direct usage in Go:
//
//	lucide.Paperclip()
//	lucide.Paperclip(lucide.Options{Size: 32, Class: "my-icon"})
func Paperclip(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 6-8.414 8.586a2 2 0 0 0 2.829 2.829l8.414-8.586a4 4 0 1 0-5.657-5.657l-8.379 8.551a6 6 0 1 0 8.485 8.485l8.379-8.551" />`, opt)
}

// Parentheses renders the "parentheses" icon.
//
// Usage in templates:
//
//	{{ lucide "parentheses" }}
//
// Direct usage in Go:
//
//	lucide.Parentheses()
//	lucide.Parentheses(lucide.Options{Size: 32, Class: "my-icon"})
func Parentheses(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 21s-4-3-4-9 4-9 4-9" /> <path d="M16 3s4 3 4 9-4 9-4 9" />`, opt)
}

// ParkingMeter renders the "parking-meter" icon.
//
// Usage in templates:
//
//	{{ lucide "parking-meter" }}
//
// Direct usage in Go:
//
//	lucide.ParkingMeter()
//	lucide.ParkingMeter(lucide.Options{Size: 32, Class: "my-icon"})
func ParkingMeter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 15h2" /> <path d="M12 12v3" /> <path d="M12 19v3" /> <path d="M15.282 19a1 1 0 0 0 .948-.68l2.37-6.988a7 7 0 1 0-13.2 0l2.37 6.988a1 1 0 0 0 .948.68z" /> <path d="M9 9a3 3 0 1 1 6 0" />`, opt)
}

// PartyPopper renders the "party-popper" icon.
//
// Usage in templates:
//
//	{{ lucide "party-popper" }}
//
// Direct usage in Go:
//
//	lucide.PartyPopper()
//	lucide.PartyPopper(lucide.Options{Size: 32, Class: "my-icon"})
func PartyPopper(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5.8 11.3 2 22l10.7-3.79" /> <path d="M4 3h.01" /> <path d="M22 8h.01" /> <path d="M15 2h.01" /> <path d="M22 20h.01" /> <path d="m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10" /> <path d="m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17" /> <path d="m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7" /> <path d="M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z" />`, opt)
}

// Pause renders the "pause" icon.
//
// Usage in templates:
//
//	{{ lucide "pause" }}
//
// Direct usage in Go:
//
//	lucide.Pause()
//	lucide.Pause(lucide.Options{Size: 32, Class: "my-icon"})
func Pause(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="14" y="3" width="5" height="18" rx="1" /> <rect x="5" y="3" width="5" height="18" rx="1" />`, opt)
}

// PawPrint renders the "paw-print" icon.
//
// Usage in templates:
//
//	{{ lucide "paw-print" }}
//
// Direct usage in Go:
//
//	lucide.PawPrint()
//	lucide.PawPrint(lucide.Options{Size: 32, Class: "my-icon"})
func PawPrint(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="11" cy="4" r="2" /> <circle cx="18" cy="8" r="2" /> <circle cx="20" cy="16" r="2" /> <path d="M9 10a5 5 0 0 1 5 5v3.5a3.5 3.5 0 0 1-6.84 1.045Q6.52 17.48 4.46 16.84A3.5 3.5 0 0 1 5.5 10Z" />`, opt)
}

// PcCase renders the "pc-case" icon.
//
// Usage in templates:
//
//	{{ lucide "pc-case" }}
//
// Direct usage in Go:
//
//	lucide.PcCase()
//	lucide.PcCase(lucide.Options{Size: 32, Class: "my-icon"})
func PcCase(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="20" x="5" y="2" rx="2" /> <path d="M15 14h.01" /> <path d="M9 6h6" /> <path d="M9 10h6" />`, opt)
}

// Pen renders the "pen" icon.
//
// Usage in templates:
//
//	{{ lucide "pen" }}
//
// Direct usage in Go:
//
//	lucide.Pen()
//	lucide.Pen(lucide.Options{Size: 32, Class: "my-icon"})
func Pen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z" />`, opt)
}

// PenLine renders the "pen-line" icon.
//
// Usage in templates:
//
//	{{ lucide "pen-line" }}
//
// Direct usage in Go:
//
//	lucide.PenLine()
//	lucide.PenLine(lucide.Options{Size: 32, Class: "my-icon"})
func PenLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 21h8" /> <path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z" />`, opt)
}

// PenOff renders the "pen-off" icon.
//
// Usage in templates:
//
//	{{ lucide "pen-off" }}
//
// Direct usage in Go:
//
//	lucide.PenOff()
//	lucide.PenOff(lucide.Options{Size: 32, Class: "my-icon"})
func PenOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982" /> <path d="m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353" /> <path d="m2 2 20 20" />`, opt)
}

// PenTool renders the "pen-tool" icon.
//
// Usage in templates:
//
//	{{ lucide "pen-tool" }}
//
// Direct usage in Go:
//
//	lucide.PenTool()
//	lucide.PenTool(lucide.Options{Size: 32, Class: "my-icon"})
func PenTool(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z" /> <path d="m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18" /> <path d="m2.3 2.3 7.286 7.286" /> <circle cx="11" cy="11" r="2" />`, opt)
}

// Pencil renders the "pencil" icon.
//
// Usage in templates:
//
//	{{ lucide "pencil" }}
//
// Direct usage in Go:
//
//	lucide.Pencil()
//	lucide.Pencil(lucide.Options{Size: 32, Class: "my-icon"})
func Pencil(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z" /> <path d="m15 5 4 4" />`, opt)
}

// PencilLine renders the "pencil-line" icon.
//
// Usage in templates:
//
//	{{ lucide "pencil-line" }}
//
// Direct usage in Go:
//
//	lucide.PencilLine()
//	lucide.PencilLine(lucide.Options{Size: 32, Class: "my-icon"})
func PencilLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 21h8" /> <path d="m15 5 4 4" /> <path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z" />`, opt)
}

// PencilOff renders the "pencil-off" icon.
//
// Usage in templates:
//
//	{{ lucide "pencil-off" }}
//
// Direct usage in Go:
//
//	lucide.PencilOff()
//	lucide.PencilOff(lucide.Options{Size: 32, Class: "my-icon"})
func PencilOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982" /> <path d="m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353" /> <path d="m15 5 4 4" /> <path d="m2 2 20 20" />`, opt)
}

// PencilRuler renders the "pencil-ruler" icon.
//
// Usage in templates:
//
//	{{ lucide "pencil-ruler" }}
//
// Direct usage in Go:
//
//	lucide.PencilRuler()
//	lucide.PencilRuler(lucide.Options{Size: 32, Class: "my-icon"})
func PencilRuler(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13" /> <path d="m8 6 2-2" /> <path d="m18 16 2-2" /> <path d="m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17" /> <path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z" /> <path d="m15 5 4 4" />`, opt)
}

// Pentagon renders the "pentagon" icon.
//
// Usage in templates:
//
//	{{ lucide "pentagon" }}
//
// Direct usage in Go:
//
//	lucide.Pentagon()
//	lucide.Pentagon(lucide.Options{Size: 32, Class: "my-icon"})
func Pentagon(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.83 2.38a2 2 0 0 1 2.34 0l8 5.74a2 2 0 0 1 .73 2.25l-3.04 9.26a2 2 0 0 1-1.9 1.37H7.04a2 2 0 0 1-1.9-1.37L2.1 10.37a2 2 0 0 1 .73-2.25z" />`, opt)
}

// Percent renders the "percent" icon.
//
// Usage in templates:
//
//	{{ lucide "percent" }}
//
// Direct usage in Go:
//
//	lucide.Percent()
//	lucide.Percent(lucide.Options{Size: 32, Class: "my-icon"})
func Percent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="19" x2="5" y1="5" y2="19" /> <circle cx="6.5" cy="6.5" r="2.5" /> <circle cx="17.5" cy="17.5" r="2.5" />`, opt)
}

// PersonStanding renders the "person-standing" icon.
//
// Usage in templates:
//
//	{{ lucide "person-standing" }}
//
// Direct usage in Go:
//
//	lucide.PersonStanding()
//	lucide.PersonStanding(lucide.Options{Size: 32, Class: "my-icon"})
func PersonStanding(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="5" r="1" /> <path d="m9 20 3-6 3 6" /> <path d="m6 8 6 2 6-2" /> <path d="M12 10v4" />`, opt)
}

// PhilippinePeso renders the "philippine-peso" icon.
//
// Usage in templates:
//
//	{{ lucide "philippine-peso" }}
//
// Direct usage in Go:
//
//	lucide.PhilippinePeso()
//	lucide.PhilippinePeso(lucide.Options{Size: 32, Class: "my-icon"})
func PhilippinePeso(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 11H4" /> <path d="M20 7H4" /> <path d="M7 21V4a1 1 0 0 1 1-1h4a1 1 0 0 1 0 12H7" />`, opt)
}

// Phone renders the "phone" icon.
//
// Usage in templates:
//
//	{{ lucide "phone" }}
//
// Direct usage in Go:
//
//	lucide.Phone()
//	lucide.Phone(lucide.Options{Size: 32, Class: "my-icon"})
func Phone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384" />`, opt)
}

// PhoneCall renders the "phone-call" icon.
//
// Usage in templates:
//
//	{{ lucide "phone-call" }}
//
// Direct usage in Go:
//
//	lucide.PhoneCall()
//	lucide.PhoneCall(lucide.Options{Size: 32, Class: "my-icon"})
func PhoneCall(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 2a9 9 0 0 1 9 9" /> <path d="M13 6a5 5 0 0 1 5 5" /> <path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384" />`, opt)
}

// PhoneForwarded renders the "phone-forwarded" icon.
//
// Usage in templates:
//
//	{{ lucide "phone-forwarded" }}
//
// Direct usage in Go:
//
//	lucide.PhoneForwarded()
//	lucide.PhoneForwarded(lucide.Options{Size: 32, Class: "my-icon"})
func PhoneForwarded(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 6h8" /> <path d="m18 2 4 4-4 4" /> <path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384" />`, opt)
}

// PhoneIncoming renders the "phone-incoming" icon.
//
// Usage in templates:
//
//	{{ lucide "phone-incoming" }}
//
// Direct usage in Go:
//
//	lucide.PhoneIncoming()
//	lucide.PhoneIncoming(lucide.Options{Size: 32, Class: "my-icon"})
func PhoneIncoming(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 2v6h6" /> <path d="m22 2-6 6" /> <path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384" />`, opt)
}

// PhoneMissed renders the "phone-missed" icon.
//
// Usage in templates:
//
//	{{ lucide "phone-missed" }}
//
// Direct usage in Go:
//
//	lucide.PhoneMissed()
//	lucide.PhoneMissed(lucide.Options{Size: 32, Class: "my-icon"})
func PhoneMissed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 2 6 6" /> <path d="m22 2-6 6" /> <path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384" />`, opt)
}

// PhoneOff renders the "phone-off" icon.
//
// Usage in templates:
//
//	{{ lucide "phone-off" }}
//
// Direct usage in Go:
//
//	lucide.PhoneOff()
//	lucide.PhoneOff(lucide.Options{Size: 32, Class: "my-icon"})
func PhoneOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.1 13.9a14 14 0 0 0 3.732 2.668 1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2 18 18 0 0 1-12.728-5.272" /> <path d="M22 2 2 22" /> <path d="M4.76 13.582A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 .244.473" />`, opt)
}

// PhoneOutgoing renders the "phone-outgoing" icon.
//
// Usage in templates:
//
//	{{ lucide "phone-outgoing" }}
//
// Direct usage in Go:
//
//	lucide.PhoneOutgoing()
//	lucide.PhoneOutgoing(lucide.Options{Size: 32, Class: "my-icon"})
func PhoneOutgoing(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 8 6-6" /> <path d="M22 8V2h-6" /> <path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384" />`, opt)
}

// Pi renders the "pi" icon.
//
// Usage in templates:
//
//	{{ lucide "pi" }}
//
// Direct usage in Go:
//
//	lucide.Pi()
//	lucide.Pi(lucide.Options{Size: 32, Class: "my-icon"})
func Pi(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="9" x2="9" y1="4" y2="20" /> <path d="M4 7c0-1.7 1.3-3 3-3h13" /> <path d="M18 20c-1.7 0-3-1.3-3-3V4" />`, opt)
}

// Piano renders the "piano" icon.
//
// Usage in templates:
//
//	{{ lucide "piano" }}
//
// Direct usage in Go:
//
//	lucide.Piano()
//	lucide.Piano(lucide.Options{Size: 32, Class: "my-icon"})
func Piano(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18.5 8c-1.4 0-2.6-.8-3.2-2A6.87 6.87 0 0 0 2 9v11a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-8.5C22 9.6 20.4 8 18.5 8" /> <path d="M2 14h20" /> <path d="M6 14v4" /> <path d="M10 14v4" /> <path d="M14 14v4" /> <path d="M18 14v4" />`, opt)
}

// Pickaxe renders the "pickaxe" icon.
//
// Usage in templates:
//
//	{{ lucide "pickaxe" }}
//
// Direct usage in Go:
//
//	lucide.Pickaxe()
//	lucide.Pickaxe(lucide.Options{Size: 32, Class: "my-icon"})
func Pickaxe(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14 13-8.381 8.38a1 1 0 0 1-3.001-3L11 9.999" /> <path d="M15.973 4.027A13 13 0 0 0 5.902 2.373c-1.398.342-1.092 2.158.277 2.601a19.9 19.9 0 0 1 5.822 3.024" /> <path d="M16.001 11.999a19.9 19.9 0 0 1 3.024 5.824c.444 1.369 2.26 1.676 2.603.278A13 13 0 0 0 20 8.069" /> <path d="M18.352 3.352a1.205 1.205 0 0 0-1.704 0l-5.296 5.296a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l5.296-5.296a1.205 1.205 0 0 0 0-1.704z" />`, opt)
}

// PictureInPicture renders the "picture-in-picture" icon.
//
// Usage in templates:
//
//	{{ lucide "picture-in-picture" }}
//
// Direct usage in Go:
//
//	lucide.PictureInPicture()
//	lucide.PictureInPicture(lucide.Options{Size: 32, Class: "my-icon"})
func PictureInPicture(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 10h6V4" /> <path d="m2 4 6 6" /> <path d="M21 10V7a2 2 0 0 0-2-2h-7" /> <path d="M3 14v2a2 2 0 0 0 2 2h3" /> <rect x="12" y="14" width="10" height="7" rx="1" />`, opt)
}

// PictureInPicture2 renders the "picture-in-picture-2" icon.
//
// Usage in templates:
//
//	{{ lucide "picture-in-picture-2" }}
//
// Direct usage in Go:
//
//	lucide.PictureInPicture2()
//	lucide.PictureInPicture2(lucide.Options{Size: 32, Class: "my-icon"})
func PictureInPicture2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4" /> <rect width="10" height="7" x="12" y="13" rx="2" />`, opt)
}

// PiggyBank renders the "piggy-bank" icon.
//
// Usage in templates:
//
//	{{ lucide "piggy-bank" }}
//
// Direct usage in Go:
//
//	lucide.PiggyBank()
//	lucide.PiggyBank(lucide.Options{Size: 32, Class: "my-icon"})
func PiggyBank(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 17h3v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a3.16 3.16 0 0 0 2-2h1a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-1a5 5 0 0 0-2-4V3a4 4 0 0 0-3.2 1.6l-.3.4H11a6 6 0 0 0-6 6v1a5 5 0 0 0 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1z" /> <path d="M16 10h.01" /> <path d="M2 8v1a2 2 0 0 0 2 2h1" />`, opt)
}

// Pilcrow renders the "pilcrow" icon.
//
// Usage in templates:
//
//	{{ lucide "pilcrow" }}
//
// Direct usage in Go:
//
//	lucide.Pilcrow()
//	lucide.Pilcrow(lucide.Options{Size: 32, Class: "my-icon"})
func Pilcrow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 4v16" /> <path d="M17 4v16" /> <path d="M19 4H9.5a4.5 4.5 0 0 0 0 9H13" />`, opt)
}

// PilcrowLeft renders the "pilcrow-left" icon.
//
// Usage in templates:
//
//	{{ lucide "pilcrow-left" }}
//
// Direct usage in Go:
//
//	lucide.PilcrowLeft()
//	lucide.PilcrowLeft(lucide.Options{Size: 32, Class: "my-icon"})
func PilcrowLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 3v11" /> <path d="M14 9h-3a3 3 0 0 1 0-6h9" /> <path d="M18 3v11" /> <path d="M22 18H2l4-4" /> <path d="m6 22-4-4" />`, opt)
}

// PilcrowRight renders the "pilcrow-right" icon.
//
// Usage in templates:
//
//	{{ lucide "pilcrow-right" }}
//
// Direct usage in Go:
//
//	lucide.PilcrowRight()
//	lucide.PilcrowRight(lucide.Options{Size: 32, Class: "my-icon"})
func PilcrowRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 3v11" /> <path d="M10 9H7a1 1 0 0 1 0-6h8" /> <path d="M14 3v11" /> <path d="m18 14 4 4H2" /> <path d="m22 18-4 4" />`, opt)
}

// Pill renders the "pill" icon.
//
// Usage in templates:
//
//	{{ lucide "pill" }}
//
// Direct usage in Go:
//
//	lucide.Pill()
//	lucide.Pill(lucide.Options{Size: 32, Class: "my-icon"})
func Pill(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z" /> <path d="m8.5 8.5 7 7" />`, opt)
}

// PillBottle renders the "pill-bottle" icon.
//
// Usage in templates:
//
//	{{ lucide "pill-bottle" }}
//
// Direct usage in Go:
//
//	lucide.PillBottle()
//	lucide.PillBottle(lucide.Options{Size: 32, Class: "my-icon"})
func PillBottle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 11h-4a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h4" /> <path d="M6 7v13a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7" /> <rect width="16" height="5" x="4" y="2" rx="1" />`, opt)
}

// Pin renders the "pin" icon.
//
// Usage in templates:
//
//	{{ lucide "pin" }}
//
// Direct usage in Go:
//
//	lucide.Pin()
//	lucide.Pin(lucide.Options{Size: 32, Class: "my-icon"})
func Pin(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17v5" /> <path d="M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z" />`, opt)
}

// PinOff renders the "pin-off" icon.
//
// Usage in templates:
//
//	{{ lucide "pin-off" }}
//
// Direct usage in Go:
//
//	lucide.PinOff()
//	lucide.PinOff(lucide.Options{Size: 32, Class: "my-icon"})
func PinOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17v5" /> <path d="M15 9.34V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H7.89" /> <path d="m2 2 20 20" /> <path d="M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h11" />`, opt)
}

// Pipette renders the "pipette" icon.
//
// Usage in templates:
//
//	{{ lucide "pipette" }}
//
// Direct usage in Go:
//
//	lucide.Pipette()
//	lucide.Pipette(lucide.Options{Size: 32, Class: "my-icon"})
func Pipette(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 9-8.414 8.414A2 2 0 0 0 3 18.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 3.828 21h1.344a2 2 0 0 0 1.414-.586L15 12" /> <path d="m18 9 .4.4a1 1 0 1 1-3 3l-3.8-3.8a1 1 0 1 1 3-3l.4.4 3.4-3.4a1 1 0 1 1 3 3z" /> <path d="m2 22 .414-.414" />`, opt)
}

// Pizza renders the "pizza" icon.
//
// Usage in templates:
//
//	{{ lucide "pizza" }}
//
// Direct usage in Go:
//
//	lucide.Pizza()
//	lucide.Pizza(lucide.Options{Size: 32, Class: "my-icon"})
func Pizza(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 14-1 1" /> <path d="m13.75 18.25-1.25 1.42" /> <path d="M17.775 5.654a15.68 15.68 0 0 0-12.121 12.12" /> <path d="M18.8 9.3a1 1 0 0 0 2.1 7.7" /> <path d="M21.964 20.732a1 1 0 0 1-1.232 1.232l-18-5a1 1 0 0 1-.695-1.232A19.68 19.68 0 0 1 15.732 2.037a1 1 0 0 1 1.232.695z" />`, opt)
}

// Plane renders the "plane" icon.
//
// Usage in templates:
//
//	{{ lucide "plane" }}
//
// Direct usage in Go:
//
//	lucide.Plane()
//	lucide.Plane(lucide.Options{Size: 32, Class: "my-icon"})
func Plane(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z" />`, opt)
}

// PlaneLanding renders the "plane-landing" icon.
//
// Usage in templates:
//
//	{{ lucide "plane-landing" }}
//
// Direct usage in Go:
//
//	lucide.PlaneLanding()
//	lucide.PlaneLanding(lucide.Options{Size: 32, Class: "my-icon"})
func PlaneLanding(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 22h20" /> <path d="M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z" />`, opt)
}

// PlaneTakeoff renders the "plane-takeoff" icon.
//
// Usage in templates:
//
//	{{ lucide "plane-takeoff" }}
//
// Direct usage in Go:
//
//	lucide.PlaneTakeoff()
//	lucide.PlaneTakeoff(lucide.Options{Size: 32, Class: "my-icon"})
func PlaneTakeoff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 22h20" /> <path d="M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z" />`, opt)
}

// Play renders the "play" icon.
//
// Usage in templates:
//
//	{{ lucide "play" }}
//
// Direct usage in Go:
//
//	lucide.Play()
//	lucide.Play(lucide.Options{Size: 32, Class: "my-icon"})
func Play(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 5a2 2 0 0 1 3.008-1.728l11.997 6.998a2 2 0 0 1 .003 3.458l-12 7A2 2 0 0 1 5 19z" />`, opt)
}

// Plug renders the "plug" icon.
//
// Usage in templates:
//
//	{{ lucide "plug" }}
//
// Direct usage in Go:
//
//	lucide.Plug()
//	lucide.Plug(lucide.Options{Size: 32, Class: "my-icon"})
func Plug(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22v-5" /> <path d="M9 8V2" /> <path d="M15 8V2" /> <path d="M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z" />`, opt)
}

// Plug2 renders the "plug-2" icon.
//
// Usage in templates:
//
//	{{ lucide "plug-2" }}
//
// Direct usage in Go:
//
//	lucide.Plug2()
//	lucide.Plug2(lucide.Options{Size: 32, Class: "my-icon"})
func Plug2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 2v6" /> <path d="M15 2v6" /> <path d="M12 17v5" /> <path d="M5 8h14" /> <path d="M6 11V8h12v3a6 6 0 1 1-12 0Z" />`, opt)
}

// PlugZap renders the "plug-zap" icon.
//
// Usage in templates:
//
//	{{ lucide "plug-zap" }}
//
// Direct usage in Go:
//
//	lucide.PlugZap()
//	lucide.PlugZap(lucide.Options{Size: 32, Class: "my-icon"})
func PlugZap(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z" /> <path d="m2 22 3-3" /> <path d="M7.5 13.5 10 11" /> <path d="M10.5 16.5 13 14" /> <path d="m18 3-4 4h6l-4 4" />`, opt)
}

// Plus renders the "plus" icon.
//
// Usage in templates:
//
//	{{ lucide "plus" }}
//
// Direct usage in Go:
//
//	lucide.Plus()
//	lucide.Plus(lucide.Options{Size: 32, Class: "my-icon"})
func Plus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 12h14" /> <path d="M12 5v14" />`, opt)
}

// Pocket renders the "pocket" icon.
//
// Usage in templates:
//
//	{{ lucide "pocket" }}
//
// Direct usage in Go:
//
//	lucide.Pocket()
//	lucide.Pocket(lucide.Options{Size: 32, Class: "my-icon"})
func Pocket(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 3a2 2 0 0 1 2 2v6a1 1 0 0 1-20 0V5a2 2 0 0 1 2-2z" /> <path d="m8 10 4 4 4-4" />`, opt)
}

// PocketKnife renders the "pocket-knife" icon.
//
// Usage in templates:
//
//	{{ lucide "pocket-knife" }}
//
// Direct usage in Go:
//
//	lucide.PocketKnife()
//	lucide.PocketKnife(lucide.Options{Size: 32, Class: "my-icon"})
func PocketKnife(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 2v1c0 1 2 1 2 2S3 6 3 7s2 1 2 2-2 1-2 2 2 1 2 2" /> <path d="M18 6h.01" /> <path d="M6 18h.01" /> <path d="M20.83 8.83a4 4 0 0 0-5.66-5.66l-12 12a4 4 0 1 0 5.66 5.66Z" /> <path d="M18 11.66V22a4 4 0 0 0 4-4V6" />`, opt)
}

// Podcast renders the "podcast" icon.
//
// Usage in templates:
//
//	{{ lucide "podcast" }}
//
// Direct usage in Go:
//
//	lucide.Podcast()
//	lucide.Podcast(lucide.Options{Size: 32, Class: "my-icon"})
func Podcast(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 17a1 1 0 1 0-2 0l.5 4.5a0.5 0.5 0 0 0 1 0z" fill="currentColor" /> <path d="M16.85 18.58a9 9 0 1 0-9.7 0" /> <path d="M8 14a5 5 0 1 1 8 0" /> <circle cx="12" cy="11" r="1" fill="currentColor" />`, opt)
}

// Pointer renders the "pointer" icon.
//
// Usage in templates:
//
//	{{ lucide "pointer" }}
//
// Direct usage in Go:
//
//	lucide.Pointer()
//	lucide.Pointer(lucide.Options{Size: 32, Class: "my-icon"})
func Pointer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 14a8 8 0 0 1-8 8" /> <path d="M18 11v-1a2 2 0 0 0-2-2a2 2 0 0 0-2 2" /> <path d="M14 10V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1" /> <path d="M10 9.5V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v10" /> <path d="M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15" />`, opt)
}

// PointerOff renders the "pointer-off" icon.
//
// Usage in templates:
//
//	{{ lucide "pointer-off" }}
//
// Direct usage in Go:
//
//	lucide.PointerOff()
//	lucide.PointerOff(lucide.Options{Size: 32, Class: "my-icon"})
func PointerOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 4.5V4a2 2 0 0 0-2.41-1.957" /> <path d="M13.9 8.4a2 2 0 0 0-1.26-1.295" /> <path d="M21.7 16.2A8 8 0 0 0 22 14v-3a2 2 0 1 0-4 0v-1a2 2 0 0 0-3.63-1.158" /> <path d="m7 15-1.8-1.8a2 2 0 0 0-2.79 2.86L6 19.7a7.74 7.74 0 0 0 6 2.3h2a8 8 0 0 0 5.657-2.343" /> <path d="M6 6v8" /> <path d="m2 2 20 20" />`, opt)
}

// Popcorn renders the "popcorn" icon.
//
// Usage in templates:
//
//	{{ lucide "popcorn" }}
//
// Direct usage in Go:
//
//	lucide.Popcorn()
//	lucide.Popcorn(lucide.Options{Size: 32, Class: "my-icon"})
func Popcorn(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 8a2 2 0 0 0 0-4 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0 0 4" /> <path d="M10 22 9 8" /> <path d="m14 22 1-14" /> <path d="M20 8c.5 0 .9.4.8 1l-2.6 12c-.1.5-.7 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L3.2 9c-.1-.6.3-1 .8-1Z" />`, opt)
}

// Popsicle renders the "popsicle" icon.
//
// Usage in templates:
//
//	{{ lucide "popsicle" }}
//
// Direct usage in Go:
//
//	lucide.Popsicle()
//	lucide.Popsicle(lucide.Options{Size: 32, Class: "my-icon"})
func Popsicle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18.6 14.4c.8-.8.8-2 0-2.8l-8.1-8.1a4.95 4.95 0 1 0-7.1 7.1l8.1 8.1c.9.7 2.1.7 2.9-.1Z" /> <path d="m22 22-5.5-5.5" />`, opt)
}

// PoundSterling renders the "pound-sterling" icon.
//
// Usage in templates:
//
//	{{ lucide "pound-sterling" }}
//
// Direct usage in Go:
//
//	lucide.PoundSterling()
//	lucide.PoundSterling(lucide.Options{Size: 32, Class: "my-icon"})
func PoundSterling(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 7c0-5.333-8-5.333-8 0" /> <path d="M10 7v14" /> <path d="M6 21h12" /> <path d="M6 13h10" />`, opt)
}

// Power renders the "power" icon.
//
// Usage in templates:
//
//	{{ lucide "power" }}
//
// Direct usage in Go:
//
//	lucide.Power()
//	lucide.Power(lucide.Options{Size: 32, Class: "my-icon"})
func Power(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v10" /> <path d="M18.4 6.6a9 9 0 1 1-12.77.04" />`, opt)
}

// PowerOff renders the "power-off" icon.
//
// Usage in templates:
//
//	{{ lucide "power-off" }}
//
// Direct usage in Go:
//
//	lucide.PowerOff()
//	lucide.PowerOff(lucide.Options{Size: 32, Class: "my-icon"})
func PowerOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18.36 6.64A9 9 0 0 1 20.77 15" /> <path d="M6.16 6.16a9 9 0 1 0 12.68 12.68" /> <path d="M12 2v4" /> <path d="m2 2 20 20" />`, opt)
}

// Presentation renders the "presentation" icon.
//
// Usage in templates:
//
//	{{ lucide "presentation" }}
//
// Direct usage in Go:
//
//	lucide.Presentation()
//	lucide.Presentation(lucide.Options{Size: 32, Class: "my-icon"})
func Presentation(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 3h20" /> <path d="M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3" /> <path d="m7 21 5-5 5 5" />`, opt)
}

// Printer renders the "printer" icon.
//
// Usage in templates:
//
//	{{ lucide "printer" }}
//
// Direct usage in Go:
//
//	lucide.Printer()
//	lucide.Printer(lucide.Options{Size: 32, Class: "my-icon"})
func Printer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2" /> <path d="M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6" /> <rect x="6" y="14" width="12" height="8" rx="1" />`, opt)
}

// PrinterCheck renders the "printer-check" icon.
//
// Usage in templates:
//
//	{{ lucide "printer-check" }}
//
// Direct usage in Go:
//
//	lucide.PrinterCheck()
//	lucide.PrinterCheck(lucide.Options{Size: 32, Class: "my-icon"})
func PrinterCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.5 22H7a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v.5" /> <path d="m16 19 2 2 4-4" /> <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2" /> <path d="M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6" />`, opt)
}

// Projector renders the "projector" icon.
//
// Usage in templates:
//
//	{{ lucide "projector" }}
//
// Direct usage in Go:
//
//	lucide.Projector()
//	lucide.Projector(lucide.Options{Size: 32, Class: "my-icon"})
func Projector(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 7 3 5" /> <path d="M9 6V3" /> <path d="m13 7 2-2" /> <circle cx="9" cy="13" r="3" /> <path d="M11.83 12H20a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h2.17" /> <path d="M16 16h2" />`, opt)
}

// Proportions renders the "proportions" icon.
//
// Usage in templates:
//
//	{{ lucide "proportions" }}
//
// Direct usage in Go:
//
//	lucide.Proportions()
//	lucide.Proportions(lucide.Options{Size: 32, Class: "my-icon"})
func Proportions(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="16" x="2" y="4" rx="2" /> <path d="M12 9v11" /> <path d="M2 9h13a2 2 0 0 1 2 2v9" />`, opt)
}

// Puzzle renders the "puzzle" icon.
//
// Usage in templates:
//
//	{{ lucide "puzzle" }}
//
// Direct usage in Go:
//
//	lucide.Puzzle()
//	lucide.Puzzle(lucide.Options{Size: 32, Class: "my-icon"})
func Puzzle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.39 4.39a1 1 0 0 0 1.68-.474 2.5 2.5 0 1 1 3.014 3.015 1 1 0 0 0-.474 1.68l1.683 1.682a2.414 2.414 0 0 1 0 3.414L19.61 15.39a1 1 0 0 1-1.68-.474 2.5 2.5 0 1 0-3.014 3.015 1 1 0 0 1 .474 1.68l-1.683 1.682a2.414 2.414 0 0 1-3.414 0L8.61 19.61a1 1 0 0 0-1.68.474 2.5 2.5 0 1 1-3.014-3.015 1 1 0 0 0 .474-1.68l-1.683-1.682a2.414 2.414 0 0 1 0-3.414L4.39 8.61a1 1 0 0 1 1.68.474 2.5 2.5 0 1 0 3.014-3.015 1 1 0 0 1-.474-1.68l1.683-1.682a2.414 2.414 0 0 1 3.414 0z" />`, opt)
}

// Pyramid renders the "pyramid" icon.
//
// Usage in templates:
//
//	{{ lucide "pyramid" }}
//
// Direct usage in Go:
//
//	lucide.Pyramid()
//	lucide.Pyramid(lucide.Options{Size: 32, Class: "my-icon"})
func Pyramid(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.5 16.88a1 1 0 0 1-.32-1.43l9-13.02a1 1 0 0 1 1.64 0l9 13.01a1 1 0 0 1-.32 1.44l-8.51 4.86a2 2 0 0 1-1.98 0Z" /> <path d="M12 2v20" />`, opt)
}

// QrCode renders the "qr-code" icon.
//
// Usage in templates:
//
//	{{ lucide "qr-code" }}
//
// Direct usage in Go:
//
//	lucide.QrCode()
//	lucide.QrCode(lucide.Options{Size: 32, Class: "my-icon"})
func QrCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="5" height="5" x="3" y="3" rx="1" /> <rect width="5" height="5" x="16" y="3" rx="1" /> <rect width="5" height="5" x="3" y="16" rx="1" /> <path d="M21 16h-3a2 2 0 0 0-2 2v3" /> <path d="M21 21v.01" /> <path d="M12 7v3a2 2 0 0 1-2 2H7" /> <path d="M3 12h.01" /> <path d="M12 3h.01" /> <path d="M12 16v.01" /> <path d="M16 12h1" /> <path d="M21 12v.01" /> <path d="M12 21v-1" />`, opt)
}

// Quote renders the "quote" icon.
//
// Usage in templates:
//
//	{{ lucide "quote" }}
//
// Direct usage in Go:
//
//	lucide.Quote()
//	lucide.Quote(lucide.Options{Size: 32, Class: "my-icon"})
func Quote(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z" /> <path d="M5 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z" />`, opt)
}

// Rabbit renders the "rabbit" icon.
//
// Usage in templates:
//
//	{{ lucide "rabbit" }}
//
// Direct usage in Go:
//
//	lucide.Rabbit()
//	lucide.Rabbit(lucide.Options{Size: 32, Class: "my-icon"})
func Rabbit(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 16a3 3 0 0 1 2.24 5" /> <path d="M18 12h.01" /> <path d="M18 21h-8a4 4 0 0 1-4-4 7 7 0 0 1 7-7h.2L9.6 6.4a1 1 0 1 1 2.8-2.8L15.8 7h.2c3.3 0 6 2.7 6 6v1a2 2 0 0 1-2 2h-1a3 3 0 0 0-3 3" /> <path d="M20 8.54V4a2 2 0 1 0-4 0v3" /> <path d="M7.612 12.524a3 3 0 1 0-1.6 4.3" />`, opt)
}

// Radar renders the "radar" icon.
//
// Usage in templates:
//
//	{{ lucide "radar" }}
//
// Direct usage in Go:
//
//	lucide.Radar()
//	lucide.Radar(lucide.Options{Size: 32, Class: "my-icon"})
func Radar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19.07 4.93A10 10 0 0 0 6.99 3.34" /> <path d="M4 6h.01" /> <path d="M2.29 9.62A10 10 0 1 0 21.31 8.35" /> <path d="M16.24 7.76A6 6 0 1 0 8.23 16.67" /> <path d="M12 18h.01" /> <path d="M17.99 11.66A6 6 0 0 1 15.77 16.67" /> <circle cx="12" cy="12" r="2" /> <path d="m13.41 10.59 5.66-5.66" />`, opt)
}

// Radiation renders the "radiation" icon.
//
// Usage in templates:
//
//	{{ lucide "radiation" }}
//
// Direct usage in Go:
//
//	lucide.Radiation()
//	lucide.Radiation(lucide.Options{Size: 32, Class: "my-icon"})
func Radiation(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 12h.01" /> <path d="M14 15.4641a4 4 0 0 1-4 0L7.52786 19.74597 A 1 1 0 0 0 7.99303 21.16211 10 10 0 0 0 16.00697 21.16211 1 1 0 0 0 16.47214 19.74597z" /> <path d="M16 12a4 4 0 0 0-2-3.464l2.472-4.282a1 1 0 0 1 1.46-.305 10 10 0 0 1 4.006 6.94A1 1 0 0 1 21 12z" /> <path d="M8 12a4 4 0 0 1 2-3.464L7.528 4.254a1 1 0 0 0-1.46-.305 10 10 0 0 0-4.006 6.94A1 1 0 0 0 3 12z" />`, opt)
}

// Radical renders the "radical" icon.
//
// Usage in templates:
//
//	{{ lucide "radical" }}
//
// Direct usage in Go:
//
//	lucide.Radical()
//	lucide.Radical(lucide.Options{Size: 32, Class: "my-icon"})
func Radical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 12h3.28a1 1 0 0 1 .948.684l2.298 7.934a.5.5 0 0 0 .96-.044L13.82 4.771A1 1 0 0 1 14.792 4H21" />`, opt)
}

// Radio renders the "radio" icon.
//
// Usage in templates:
//
//	{{ lucide "radio" }}
//
// Direct usage in Go:
//
//	lucide.Radio()
//	lucide.Radio(lucide.Options{Size: 32, Class: "my-icon"})
func Radio(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16.247 7.761a6 6 0 0 1 0 8.478" /> <path d="M19.075 4.933a10 10 0 0 1 0 14.134" /> <path d="M4.925 19.067a10 10 0 0 1 0-14.134" /> <path d="M7.753 16.239a6 6 0 0 1 0-8.478" /> <circle cx="12" cy="12" r="2" />`, opt)
}

// RadioReceiver renders the "radio-receiver" icon.
//
// Usage in templates:
//
//	{{ lucide "radio-receiver" }}
//
// Direct usage in Go:
//
//	lucide.RadioReceiver()
//	lucide.RadioReceiver(lucide.Options{Size: 32, Class: "my-icon"})
func RadioReceiver(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 16v2" /> <path d="M19 16v2" /> <rect width="20" height="8" x="2" y="8" rx="2" /> <path d="M18 12h.01" />`, opt)
}

// RadioTower renders the "radio-tower" icon.
//
// Usage in templates:
//
//	{{ lucide "radio-tower" }}
//
// Direct usage in Go:
//
//	lucide.RadioTower()
//	lucide.RadioTower(lucide.Options{Size: 32, Class: "my-icon"})
func RadioTower(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4.9 16.1C1 12.2 1 5.8 4.9 1.9" /> <path d="M7.8 4.7a6.14 6.14 0 0 0-.8 7.5" /> <circle cx="12" cy="9" r="2" /> <path d="M16.2 4.8c2 2 2.26 5.11.8 7.47" /> <path d="M19.1 1.9a9.96 9.96 0 0 1 0 14.1" /> <path d="M9.5 18h5" /> <path d="m8 22 4-11 4 11" />`, opt)
}

// Radius renders the "radius" icon.
//
// Usage in templates:
//
//	{{ lucide "radius" }}
//
// Direct usage in Go:
//
//	lucide.Radius()
//	lucide.Radius(lucide.Options{Size: 32, Class: "my-icon"})
func Radius(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20.34 17.52a10 10 0 1 0-2.82 2.82" /> <circle cx="19" cy="19" r="2" /> <path d="m13.41 13.41 4.18 4.18" /> <circle cx="12" cy="12" r="2" />`, opt)
}

// RailSymbol renders the "rail-symbol" icon.
//
// Usage in templates:
//
//	{{ lucide "rail-symbol" }}
//
// Direct usage in Go:
//
//	lucide.RailSymbol()
//	lucide.RailSymbol(lucide.Options{Size: 32, Class: "my-icon"})
func RailSymbol(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 15h14" /> <path d="M5 9h14" /> <path d="m14 20-5-5 6-6-5-5" />`, opt)
}

// Rainbow renders the "rainbow" icon.
//
// Usage in templates:
//
//	{{ lucide "rainbow" }}
//
// Direct usage in Go:
//
//	lucide.Rainbow()
//	lucide.Rainbow(lucide.Options{Size: 32, Class: "my-icon"})
func Rainbow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17a10 10 0 0 0-20 0" /> <path d="M6 17a6 6 0 0 1 12 0" /> <path d="M10 17a2 2 0 0 1 4 0" />`, opt)
}

// Rat renders the "rat" icon.
//
// Usage in templates:
//
//	{{ lucide "rat" }}
//
// Direct usage in Go:
//
//	lucide.Rat()
//	lucide.Rat(lucide.Options{Size: 32, Class: "my-icon"})
func Rat(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 22H4a2 2 0 0 1 0-4h12" /> <path d="M13.236 18a3 3 0 0 0-2.2-5" /> <path d="M16 9h.01" /> <path d="M16.82 3.94a3 3 0 1 1 3.237 4.868l1.815 2.587a1.5 1.5 0 0 1-1.5 2.1l-2.872-.453a3 3 0 0 0-3.5 3" /> <path d="M17 4.988a3 3 0 1 0-5.2 2.052A7 7 0 0 0 4 14.015 4 4 0 0 0 8 18" />`, opt)
}

// Ratio renders the "ratio" icon.
//
// Usage in templates:
//
//	{{ lucide "ratio" }}
//
// Direct usage in Go:
//
//	lucide.Ratio()
//	lucide.Ratio(lucide.Options{Size: 32, Class: "my-icon"})
func Ratio(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="12" height="20" x="6" y="2" rx="2" /> <rect width="20" height="12" x="2" y="6" rx="2" />`, opt)
}

// Receipt renders the "receipt" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt" }}
//
// Direct usage in Go:
//
//	lucide.Receipt()
//	lucide.Receipt(lucide.Options{Size: 32, Class: "my-icon"})
func Receipt(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /> <path d="M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8" /> <path d="M12 17.5v-11" />`, opt)
}

// ReceiptCent renders the "receipt-cent" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-cent" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptCent()
//	lucide.ReceiptCent(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptCent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /> <path d="M12 6.5v11" /> <path d="M15 9.4a4 4 0 1 0 0 5.2" />`, opt)
}

// ReceiptEuro renders the "receipt-euro" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-euro" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptEuro()
//	lucide.ReceiptEuro(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptEuro(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /> <path d="M8 12h5" /> <path d="M16 9.5a4 4 0 1 0 0 5.2" />`, opt)
}

// ReceiptIndianRupee renders the "receipt-indian-rupee" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-indian-rupee" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptIndianRupee()
//	lucide.ReceiptIndianRupee(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptIndianRupee(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /> <path d="M8 7h8" /> <path d="M12 17.5 8 15h1a4 4 0 0 0 0-8" /> <path d="M8 11h8" />`, opt)
}

// ReceiptJapaneseYen renders the "receipt-japanese-yen" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-japanese-yen" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptJapaneseYen()
//	lucide.ReceiptJapaneseYen(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptJapaneseYen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /> <path d="m12 10 3-3" /> <path d="m9 7 3 3v7.5" /> <path d="M9 11h6" /> <path d="M9 15h6" />`, opt)
}

// ReceiptPoundSterling renders the "receipt-pound-sterling" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-pound-sterling" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptPoundSterling()
//	lucide.ReceiptPoundSterling(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptPoundSterling(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /> <path d="M8 13h5" /> <path d="M10 17V9.5a2.5 2.5 0 0 1 5 0" /> <path d="M8 17h7" />`, opt)
}

// ReceiptRussianRuble renders the "receipt-russian-ruble" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-russian-ruble" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptRussianRuble()
//	lucide.ReceiptRussianRuble(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptRussianRuble(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /> <path d="M8 15h5" /> <path d="M8 11h5a2 2 0 1 0 0-4h-3v10" />`, opt)
}

// ReceiptSwissFranc renders the "receipt-swiss-franc" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-swiss-franc" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptSwissFranc()
//	lucide.ReceiptSwissFranc(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptSwissFranc(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /> <path d="M10 17V7h5" /> <path d="M10 11h4" /> <path d="M8 15h5" />`, opt)
}

// ReceiptText renders the "receipt-text" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-text" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptText()
//	lucide.ReceiptText(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 16H8" /> <path d="M14 8H8" /> <path d="M16 12H8" /> <path d="M4 3a1 1 0 0 1 1-1 1.3 1.3 0 0 1 .7.2l.933.6a1.3 1.3 0 0 0 1.4 0l.934-.6a1.3 1.3 0 0 1 1.4 0l.933.6a1.3 1.3 0 0 0 1.4 0l.933-.6a1.3 1.3 0 0 1 1.4 0l.934.6a1.3 1.3 0 0 0 1.4 0l.933-.6A1.3 1.3 0 0 1 19 2a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1 1.3 1.3 0 0 1-.7-.2l-.933-.6a1.3 1.3 0 0 0-1.4 0l-.934.6a1.3 1.3 0 0 1-1.4 0l-.933-.6a1.3 1.3 0 0 0-1.4 0l-.933.6a1.3 1.3 0 0 1-1.4 0l-.934-.6a1.3 1.3 0 0 0-1.4 0l-.933.6a1.3 1.3 0 0 1-.7.2 1 1 0 0 1-1-1z" />`, opt)
}

// ReceiptTurkishLira renders the "receipt-turkish-lira" icon.
//
// Usage in templates:
//
//	{{ lucide "receipt-turkish-lira" }}
//
// Direct usage in Go:
//
//	lucide.ReceiptTurkishLira()
//	lucide.ReceiptTurkishLira(lucide.Options{Size: 32, Class: "my-icon"})
func ReceiptTurkishLira(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 6.5v11a5.5 5.5 0 0 0 5.5-5.5" /> <path d="m14 8-6 3" /> <path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1z" />`, opt)
}

// RectangleCircle renders the "rectangle-circle" icon.
//
// Usage in templates:
//
//	{{ lucide "rectangle-circle" }}
//
// Direct usage in Go:
//
//	lucide.RectangleCircle()
//	lucide.RectangleCircle(lucide.Options{Size: 32, Class: "my-icon"})
func RectangleCircle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 4v16H3a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1z" /> <circle cx="14" cy="12" r="8" />`, opt)
}

// RectangleEllipsis renders the "rectangle-ellipsis" icon.
//
// Usage in templates:
//
//	{{ lucide "rectangle-ellipsis" }}
//
// Direct usage in Go:
//
//	lucide.RectangleEllipsis()
//	lucide.RectangleEllipsis(lucide.Options{Size: 32, Class: "my-icon"})
func RectangleEllipsis(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="12" x="2" y="6" rx="2" /> <path d="M12 12h.01" /> <path d="M17 12h.01" /> <path d="M7 12h.01" />`, opt)
}

// RectangleGoggles renders the "rectangle-goggles" icon.
//
// Usage in templates:
//
//	{{ lucide "rectangle-goggles" }}
//
// Direct usage in Go:
//
//	lucide.RectangleGoggles()
//	lucide.RectangleGoggles(lucide.Options{Size: 32, Class: "my-icon"})
func RectangleGoggles(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 6a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-4a2 2 0 0 1-1.6-.8l-1.6-2.13a1 1 0 0 0-1.6 0L9.6 17.2A2 2 0 0 1 8 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z" />`, opt)
}

// RectangleHorizontal renders the "rectangle-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "rectangle-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.RectangleHorizontal()
//	lucide.RectangleHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func RectangleHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="12" x="2" y="6" rx="2" />`, opt)
}

// RectangleVertical renders the "rectangle-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "rectangle-vertical" }}
//
// Direct usage in Go:
//
//	lucide.RectangleVertical()
//	lucide.RectangleVertical(lucide.Options{Size: 32, Class: "my-icon"})
func RectangleVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="12" height="20" x="6" y="2" rx="2" />`, opt)
}

// Recycle renders the "recycle" icon.
//
// Usage in templates:
//
//	{{ lucide "recycle" }}
//
// Direct usage in Go:
//
//	lucide.Recycle()
//	lucide.Recycle(lucide.Options{Size: 32, Class: "my-icon"})
func Recycle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5" /> <path d="M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12" /> <path d="m14 16-3 3 3 3" /> <path d="M8.293 13.596 7.196 9.5 3.1 10.598" /> <path d="m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843" /> <path d="m13.378 9.633 4.096 1.098 1.097-4.096" />`, opt)
}

// Redo renders the "redo" icon.
//
// Usage in templates:
//
//	{{ lucide "redo" }}
//
// Direct usage in Go:
//
//	lucide.Redo()
//	lucide.Redo(lucide.Options{Size: 32, Class: "my-icon"})
func Redo(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 7v6h-6" /> <path d="M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7" />`, opt)
}

// Redo2 renders the "redo-2" icon.
//
// Usage in templates:
//
//	{{ lucide "redo-2" }}
//
// Direct usage in Go:
//
//	lucide.Redo2()
//	lucide.Redo2(lucide.Options{Size: 32, Class: "my-icon"})
func Redo2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 14 5-5-5-5" /> <path d="M20 9H9.5A5.5 5.5 0 0 0 4 14.5A5.5 5.5 0 0 0 9.5 20H13" />`, opt)
}

// RedoDot renders the "redo-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "redo-dot" }}
//
// Direct usage in Go:
//
//	lucide.RedoDot()
//	lucide.RedoDot(lucide.Options{Size: 32, Class: "my-icon"})
func RedoDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="17" r="1" /> <path d="M21 7v6h-6" /> <path d="M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7" />`, opt)
}

// RefreshCcw renders the "refresh-ccw" icon.
//
// Usage in templates:
//
//	{{ lucide "refresh-ccw" }}
//
// Direct usage in Go:
//
//	lucide.RefreshCcw()
//	lucide.RefreshCcw(lucide.Options{Size: 32, Class: "my-icon"})
func RefreshCcw(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" /> <path d="M3 3v5h5" /> <path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16" /> <path d="M16 16h5v5" />`, opt)
}

// RefreshCcwDot renders the "refresh-ccw-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "refresh-ccw-dot" }}
//
// Direct usage in Go:
//
//	lucide.RefreshCcwDot()
//	lucide.RefreshCcwDot(lucide.Options{Size: 32, Class: "my-icon"})
func RefreshCcwDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" /> <path d="M3 3v5h5" /> <path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16" /> <path d="M16 16h5v5" /> <circle cx="12" cy="12" r="1" />`, opt)
}

// RefreshCw renders the "refresh-cw" icon.
//
// Usage in templates:
//
//	{{ lucide "refresh-cw" }}
//
// Direct usage in Go:
//
//	lucide.RefreshCw()
//	lucide.RefreshCw(lucide.Options{Size: 32, Class: "my-icon"})
func RefreshCw(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" /> <path d="M21 3v5h-5" /> <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" /> <path d="M8 16H3v5" />`, opt)
}

// RefreshCwOff renders the "refresh-cw-off" icon.
//
// Usage in templates:
//
//	{{ lucide "refresh-cw-off" }}
//
// Direct usage in Go:
//
//	lucide.RefreshCwOff()
//	lucide.RefreshCwOff(lucide.Options{Size: 32, Class: "my-icon"})
func RefreshCwOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 8L18.74 5.74A9.75 9.75 0 0 0 12 3C11 3 10.03 3.16 9.13 3.47" /> <path d="M8 16H3v5" /> <path d="M3 12C3 9.51 4 7.26 5.64 5.64" /> <path d="m3 16 2.26 2.26A9.75 9.75 0 0 0 12 21c2.49 0 4.74-1 6.36-2.64" /> <path d="M21 12c0 1-.16 1.97-.47 2.87" /> <path d="M21 3v5h-5" /> <path d="M22 22 2 2" />`, opt)
}

// Refrigerator renders the "refrigerator" icon.
//
// Usage in templates:
//
//	{{ lucide "refrigerator" }}
//
// Direct usage in Go:
//
//	lucide.Refrigerator()
//	lucide.Refrigerator(lucide.Options{Size: 32, Class: "my-icon"})
func Refrigerator(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z" /> <path d="M5 10h14" /> <path d="M15 7v6" />`, opt)
}

// Regex renders the "regex" icon.
//
// Usage in templates:
//
//	{{ lucide "regex" }}
//
// Direct usage in Go:
//
//	lucide.Regex()
//	lucide.Regex(lucide.Options{Size: 32, Class: "my-icon"})
func Regex(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 3v10" /> <path d="m12.67 5.5 8.66 5" /> <path d="m12.67 10.5 8.66-5" /> <path d="M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z" />`, opt)
}

// RemoveFormatting renders the "remove-formatting" icon.
//
// Usage in templates:
//
//	{{ lucide "remove-formatting" }}
//
// Direct usage in Go:
//
//	lucide.RemoveFormatting()
//	lucide.RemoveFormatting(lucide.Options{Size: 32, Class: "my-icon"})
func RemoveFormatting(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 7V4h16v3" /> <path d="M5 20h6" /> <path d="M13 4 8 20" /> <path d="m15 15 5 5" /> <path d="m20 15-5 5" />`, opt)
}

// Repeat renders the "repeat" icon.
//
// Usage in templates:
//
//	{{ lucide "repeat" }}
//
// Direct usage in Go:
//
//	lucide.Repeat()
//	lucide.Repeat(lucide.Options{Size: 32, Class: "my-icon"})
func Repeat(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 2 4 4-4 4" /> <path d="M3 11v-1a4 4 0 0 1 4-4h14" /> <path d="m7 22-4-4 4-4" /> <path d="M21 13v1a4 4 0 0 1-4 4H3" />`, opt)
}

// Repeat1 renders the "repeat-1" icon.
//
// Usage in templates:
//
//	{{ lucide "repeat-1" }}
//
// Direct usage in Go:
//
//	lucide.Repeat1()
//	lucide.Repeat1(lucide.Options{Size: 32, Class: "my-icon"})
func Repeat1(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 2 4 4-4 4" /> <path d="M3 11v-1a4 4 0 0 1 4-4h14" /> <path d="m7 22-4-4 4-4" /> <path d="M21 13v1a4 4 0 0 1-4 4H3" /> <path d="M11 10h1v4" />`, opt)
}

// Repeat2 renders the "repeat-2" icon.
//
// Usage in templates:
//
//	{{ lucide "repeat-2" }}
//
// Direct usage in Go:
//
//	lucide.Repeat2()
//	lucide.Repeat2(lucide.Options{Size: 32, Class: "my-icon"})
func Repeat2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 9 3-3 3 3" /> <path d="M13 18H7a2 2 0 0 1-2-2V6" /> <path d="m22 15-3 3-3-3" /> <path d="M11 6h6a2 2 0 0 1 2 2v10" />`, opt)
}

// Replace renders the "replace" icon.
//
// Usage in templates:
//
//	{{ lucide "replace" }}
//
// Direct usage in Go:
//
//	lucide.Replace()
//	lucide.Replace(lucide.Options{Size: 32, Class: "my-icon"})
func Replace(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 4a1 1 0 0 1 1-1" /> <path d="M15 10a1 1 0 0 1-1-1" /> <path d="M21 4a1 1 0 0 0-1-1" /> <path d="M21 9a1 1 0 0 1-1 1" /> <path d="m3 7 3 3 3-3" /> <path d="M6 10V5a2 2 0 0 1 2-2h2" /> <rect x="3" y="14" width="7" height="7" rx="1" />`, opt)
}

// ReplaceAll renders the "replace-all" icon.
//
// Usage in templates:
//
//	{{ lucide "replace-all" }}
//
// Direct usage in Go:
//
//	lucide.ReplaceAll()
//	lucide.ReplaceAll(lucide.Options{Size: 32, Class: "my-icon"})
func ReplaceAll(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 14a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1" /> <path d="M14 4a1 1 0 0 1 1-1" /> <path d="M15 10a1 1 0 0 1-1-1" /> <path d="M19 14a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1" /> <path d="M21 4a1 1 0 0 0-1-1" /> <path d="M21 9a1 1 0 0 1-1 1" /> <path d="m3 7 3 3 3-3" /> <path d="M6 10V5a2 2 0 0 1 2-2h2" /> <rect x="3" y="14" width="7" height="7" rx="1" />`, opt)
}

// Reply renders the "reply" icon.
//
// Usage in templates:
//
//	{{ lucide "reply" }}
//
// Direct usage in Go:
//
//	lucide.Reply()
//	lucide.Reply(lucide.Options{Size: 32, Class: "my-icon"})
func Reply(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 18v-2a4 4 0 0 0-4-4H4" /> <path d="m9 17-5-5 5-5" />`, opt)
}

// ReplyAll renders the "reply-all" icon.
//
// Usage in templates:
//
//	{{ lucide "reply-all" }}
//
// Direct usage in Go:
//
//	lucide.ReplyAll()
//	lucide.ReplyAll(lucide.Options{Size: 32, Class: "my-icon"})
func ReplyAll(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 17-5-5 5-5" /> <path d="M22 18v-2a4 4 0 0 0-4-4H7" /> <path d="m7 17-5-5 5-5" />`, opt)
}

// Rewind renders the "rewind" icon.
//
// Usage in templates:
//
//	{{ lucide "rewind" }}
//
// Direct usage in Go:
//
//	lucide.Rewind()
//	lucide.Rewind(lucide.Options{Size: 32, Class: "my-icon"})
func Rewind(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 6a2 2 0 0 0-3.414-1.414l-6 6a2 2 0 0 0 0 2.828l6 6A2 2 0 0 0 12 18z" /> <path d="M22 6a2 2 0 0 0-3.414-1.414l-6 6a2 2 0 0 0 0 2.828l6 6A2 2 0 0 0 22 18z" />`, opt)
}

// Ribbon renders the "ribbon" icon.
//
// Usage in templates:
//
//	{{ lucide "ribbon" }}
//
// Direct usage in Go:
//
//	lucide.Ribbon()
//	lucide.Ribbon(lucide.Options{Size: 32, Class: "my-icon"})
func Ribbon(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 11.22C11 9.997 10 9 10 8a2 2 0 0 1 4 0c0 1-.998 2.002-2.01 3.22" /> <path d="m12 18 2.57-3.5" /> <path d="M6.243 9.016a7 7 0 0 1 11.507-.009" /> <path d="M9.35 14.53 12 11.22" /> <path d="M9.35 14.53C7.728 12.246 6 10.221 6 7a6 5 0 0 1 12 0c-.005 3.22-1.778 5.235-3.43 7.5l3.557 4.527a1 1 0 0 1-.203 1.43l-1.894 1.36a1 1 0 0 1-1.384-.215L12 18l-2.679 3.593a1 1 0 0 1-1.39.213l-1.865-1.353a1 1 0 0 1-.203-1.422z" />`, opt)
}

// Rocket renders the "rocket" icon.
//
// Usage in templates:
//
//	{{ lucide "rocket" }}
//
// Direct usage in Go:
//
//	lucide.Rocket()
//	lucide.Rocket(lucide.Options{Size: 32, Class: "my-icon"})
func Rocket(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z" /> <path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z" /> <path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" /> <path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" />`, opt)
}

// RockingChair renders the "rocking-chair" icon.
//
// Usage in templates:
//
//	{{ lucide "rocking-chair" }}
//
// Direct usage in Go:
//
//	lucide.RockingChair()
//	lucide.RockingChair(lucide.Options{Size: 32, Class: "my-icon"})
func RockingChair(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<polyline points="3.5 2 6.5 12.5 18 12.5" /> <line x1="9.5" x2="5.5" y1="12.5" y2="20" /> <line x1="15" x2="18.5" y1="12.5" y2="20" /> <path d="M2.75 18a13 13 0 0 0 18.5 0" />`, opt)
}

// RollerCoaster renders the "roller-coaster" icon.
//
// Usage in templates:
//
//	{{ lucide "roller-coaster" }}
//
// Direct usage in Go:
//
//	lucide.RollerCoaster()
//	lucide.RollerCoaster(lucide.Options{Size: 32, Class: "my-icon"})
func RollerCoaster(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 19V5" /> <path d="M10 19V6.8" /> <path d="M14 19v-7.8" /> <path d="M18 5v4" /> <path d="M18 19v-6" /> <path d="M22 19V9" /> <path d="M2 19V9a4 4 0 0 1 4-4c2 0 4 1.33 6 4s4 4 6 4a4 4 0 1 0-3-6.65" />`, opt)
}

// Rose renders the "rose" icon.
//
// Usage in templates:
//
//	{{ lucide "rose" }}
//
// Direct usage in Go:
//
//	lucide.Rose()
//	lucide.Rose(lucide.Options{Size: 32, Class: "my-icon"})
func Rose(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 10h-1a4 4 0 1 1 4-4v.534" /> <path d="M17 6h1a4 4 0 0 1 1.42 7.74l-2.29.87a6 6 0 0 1-5.339-10.68l2.069-1.31" /> <path d="M4.5 17c2.8-.5 4.4 0 5.5.8s1.8 2.2 2.3 3.7c-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2" /> <path d="M9.77 12C4 15 2 22 2 22" /> <circle cx="17" cy="8" r="2" />`, opt)
}

// Rotate3d renders the "rotate-3d" icon.
//
// Usage in templates:
//
//	{{ lucide "rotate-3d" }}
//
// Direct usage in Go:
//
//	lucide.Rotate3d()
//	lucide.Rotate3d(lucide.Options{Size: 32, Class: "my-icon"})
func Rotate3d(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2" /> <path d="m15.194 13.707 3.814 1.86-1.86 3.814" /> <path d="M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4" />`, opt)
}

// RotateCcw renders the "rotate-ccw" icon.
//
// Usage in templates:
//
//	{{ lucide "rotate-ccw" }}
//
// Direct usage in Go:
//
//	lucide.RotateCcw()
//	lucide.RotateCcw(lucide.Options{Size: 32, Class: "my-icon"})
func RotateCcw(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" /> <path d="M3 3v5h5" />`, opt)
}

// RotateCcwKey renders the "rotate-ccw-key" icon.
//
// Usage in templates:
//
//	{{ lucide "rotate-ccw-key" }}
//
// Direct usage in Go:
//
//	lucide.RotateCcwKey()
//	lucide.RotateCcwKey(lucide.Options{Size: 32, Class: "my-icon"})
func RotateCcwKey(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14.5 9.5 1 1" /> <path d="m15.5 8.5-4 4" /> <path d="M3 12a9 9 0 1 0 9-9 9.74 9.74 0 0 0-6.74 2.74L3 8" /> <path d="M3 3v5h5" /> <circle cx="10" cy="14" r="2" />`, opt)
}

// RotateCcwSquare renders the "rotate-ccw-square" icon.
//
// Usage in templates:
//
//	{{ lucide "rotate-ccw-square" }}
//
// Direct usage in Go:
//
//	lucide.RotateCcwSquare()
//	lucide.RotateCcwSquare(lucide.Options{Size: 32, Class: "my-icon"})
func RotateCcwSquare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 9V7a2 2 0 0 0-2-2h-6" /> <path d="m15 2-3 3 3 3" /> <path d="M20 13v5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2" />`, opt)
}

// RotateCw renders the "rotate-cw" icon.
//
// Usage in templates:
//
//	{{ lucide "rotate-cw" }}
//
// Direct usage in Go:
//
//	lucide.RotateCw()
//	lucide.RotateCw(lucide.Options{Size: 32, Class: "my-icon"})
func RotateCw(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8" /> <path d="M21 3v5h-5" />`, opt)
}

// RotateCwSquare renders the "rotate-cw-square" icon.
//
// Usage in templates:
//
//	{{ lucide "rotate-cw-square" }}
//
// Direct usage in Go:
//
//	lucide.RotateCwSquare()
//	lucide.RotateCwSquare(lucide.Options{Size: 32, Class: "my-icon"})
func RotateCwSquare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 5H6a2 2 0 0 0-2 2v3" /> <path d="m9 8 3-3-3-3" /> <path d="M4 14v4a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2" />`, opt)
}

// Route renders the "route" icon.
//
// Usage in templates:
//
//	{{ lucide "route" }}
//
// Direct usage in Go:
//
//	lucide.Route()
//	lucide.Route(lucide.Options{Size: 32, Class: "my-icon"})
func Route(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="6" cy="19" r="3" /> <path d="M9 19h8.5a3.5 3.5 0 0 0 0-7h-11a3.5 3.5 0 0 1 0-7H15" /> <circle cx="18" cy="5" r="3" />`, opt)
}

// RouteOff renders the "route-off" icon.
//
// Usage in templates:
//
//	{{ lucide "route-off" }}
//
// Direct usage in Go:
//
//	lucide.RouteOff()
//	lucide.RouteOff(lucide.Options{Size: 32, Class: "my-icon"})
func RouteOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="6" cy="19" r="3" /> <path d="M9 19h8.5c.4 0 .9-.1 1.3-.2" /> <path d="M5.2 5.2A3.5 3.53 0 0 0 6.5 12H12" /> <path d="m2 2 20 20" /> <path d="M21 15.3a3.5 3.5 0 0 0-3.3-3.3" /> <path d="M15 5h-4.3" /> <circle cx="18" cy="5" r="3" />`, opt)
}

// Router renders the "router" icon.
//
// Usage in templates:
//
//	{{ lucide "router" }}
//
// Direct usage in Go:
//
//	lucide.Router()
//	lucide.Router(lucide.Options{Size: 32, Class: "my-icon"})
func Router(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="8" x="2" y="14" rx="2" /> <path d="M6.01 18H6" /> <path d="M10.01 18H10" /> <path d="M15 10v4" /> <path d="M17.84 7.17a4 4 0 0 0-5.66 0" /> <path d="M20.66 4.34a8 8 0 0 0-11.31 0" />`, opt)
}

// Rows2 renders the "rows-2" icon.
//
// Usage in templates:
//
//	{{ lucide "rows-2" }}
//
// Direct usage in Go:
//
//	lucide.Rows2()
//	lucide.Rows2(lucide.Options{Size: 32, Class: "my-icon"})
func Rows2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 12h18" />`, opt)
}

// Rows3 renders the "rows-3" icon.
//
// Usage in templates:
//
//	{{ lucide "rows-3" }}
//
// Direct usage in Go:
//
//	lucide.Rows3()
//	lucide.Rows3(lucide.Options{Size: 32, Class: "my-icon"})
func Rows3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M21 9H3" /> <path d="M21 15H3" />`, opt)
}

// Rows4 renders the "rows-4" icon.
//
// Usage in templates:
//
//	{{ lucide "rows-4" }}
//
// Direct usage in Go:
//
//	lucide.Rows4()
//	lucide.Rows4(lucide.Options{Size: 32, Class: "my-icon"})
func Rows4(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M21 7.5H3" /> <path d="M21 12H3" /> <path d="M21 16.5H3" />`, opt)
}

// Rss renders the "rss" icon.
//
// Usage in templates:
//
//	{{ lucide "rss" }}
//
// Direct usage in Go:
//
//	lucide.Rss()
//	lucide.Rss(lucide.Options{Size: 32, Class: "my-icon"})
func Rss(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 11a9 9 0 0 1 9 9" /> <path d="M4 4a16 16 0 0 1 16 16" /> <circle cx="5" cy="19" r="1" />`, opt)
}

// Ruler renders the "ruler" icon.
//
// Usage in templates:
//
//	{{ lucide "ruler" }}
//
// Direct usage in Go:
//
//	lucide.Ruler()
//	lucide.Ruler(lucide.Options{Size: 32, Class: "my-icon"})
func Ruler(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L2.7 8.7a2.41 2.41 0 0 1 0-3.4l2.6-2.6a2.41 2.41 0 0 1 3.4 0Z" /> <path d="m14.5 12.5 2-2" /> <path d="m11.5 9.5 2-2" /> <path d="m8.5 6.5 2-2" /> <path d="m17.5 15.5 2-2" />`, opt)
}

// RulerDimensionLine renders the "ruler-dimension-line" icon.
//
// Usage in templates:
//
//	{{ lucide "ruler-dimension-line" }}
//
// Direct usage in Go:
//
//	lucide.RulerDimensionLine()
//	lucide.RulerDimensionLine(lucide.Options{Size: 32, Class: "my-icon"})
func RulerDimensionLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 15v-3.014" /> <path d="M16 15v-3.014" /> <path d="M20 6H4" /> <path d="M20 8V4" /> <path d="M4 8V4" /> <path d="M8 15v-3.014" /> <rect x="3" y="12" width="18" height="7" rx="1" />`, opt)
}

// RussianRuble renders the "russian-ruble" icon.
//
// Usage in templates:
//
//	{{ lucide "russian-ruble" }}
//
// Direct usage in Go:
//
//	lucide.RussianRuble()
//	lucide.RussianRuble(lucide.Options{Size: 32, Class: "my-icon"})
func RussianRuble(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 11h8a4 4 0 0 0 0-8H9v18" /> <path d="M6 15h8" />`, opt)
}

// Sailboat renders the "sailboat" icon.
//
// Usage in templates:
//
//	{{ lucide "sailboat" }}
//
// Direct usage in Go:
//
//	lucide.Sailboat()
//	lucide.Sailboat(lucide.Options{Size: 32, Class: "my-icon"})
func Sailboat(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v15" /> <path d="M7 22a4 4 0 0 1-4-4 1 1 0 0 1 1-1h16a1 1 0 0 1 1 1 4 4 0 0 1-4 4z" /> <path d="M9.159 2.46a1 1 0 0 1 1.521-.193l9.977 8.98A1 1 0 0 1 20 13H4a1 1 0 0 1-.824-1.567z" />`, opt)
}

// Salad renders the "salad" icon.
//
// Usage in templates:
//
//	{{ lucide "salad" }}
//
// Direct usage in Go:
//
//	lucide.Salad()
//	lucide.Salad(lucide.Options{Size: 32, Class: "my-icon"})
func Salad(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 21h10" /> <path d="M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z" /> <path d="M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1" /> <path d="m13 12 4-4" /> <path d="M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2" />`, opt)
}

// Sandwich renders the "sandwich" icon.
//
// Usage in templates:
//
//	{{ lucide "sandwich" }}
//
// Direct usage in Go:
//
//	lucide.Sandwich()
//	lucide.Sandwich(lucide.Options{Size: 32, Class: "my-icon"})
func Sandwich(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2.37 11.223 8.372-6.777a2 2 0 0 1 2.516 0l8.371 6.777" /> <path d="M21 15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-5.25" /> <path d="M3 15a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h9" /> <path d="m6.67 15 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2" /> <rect width="20" height="4" x="2" y="11" rx="1" />`, opt)
}

// Satellite renders the "satellite" icon.
//
// Usage in templates:
//
//	{{ lucide "satellite" }}
//
// Direct usage in Go:
//
//	lucide.Satellite()
//	lucide.Satellite(lucide.Options{Size: 32, Class: "my-icon"})
func Satellite(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m13.5 6.5-3.148-3.148a1.205 1.205 0 0 0-1.704 0L6.352 5.648a1.205 1.205 0 0 0 0 1.704L9.5 10.5" /> <path d="M16.5 7.5 19 5" /> <path d="m17.5 10.5 3.148 3.148a1.205 1.205 0 0 1 0 1.704l-2.296 2.296a1.205 1.205 0 0 1-1.704 0L13.5 14.5" /> <path d="M9 21a6 6 0 0 0-6-6" /> <path d="M9.352 10.648a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l4.296-4.296a1.205 1.205 0 0 0 0-1.704l-2.296-2.296a1.205 1.205 0 0 0-1.704 0z" />`, opt)
}

// SatelliteDish renders the "satellite-dish" icon.
//
// Usage in templates:
//
//	{{ lucide "satellite-dish" }}
//
// Direct usage in Go:
//
//	lucide.SatelliteDish()
//	lucide.SatelliteDish(lucide.Options{Size: 32, Class: "my-icon"})
func SatelliteDish(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 10a7.31 7.31 0 0 0 10 10Z" /> <path d="m9 15 3-3" /> <path d="M17 13a6 6 0 0 0-6-6" /> <path d="M21 13A10 10 0 0 0 11 3" />`, opt)
}

// SaudiRiyal renders the "saudi-riyal" icon.
//
// Usage in templates:
//
//	{{ lucide "saudi-riyal" }}
//
// Direct usage in Go:
//
//	lucide.SaudiRiyal()
//	lucide.SaudiRiyal(lucide.Options{Size: 32, Class: "my-icon"})
func SaudiRiyal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m20 19.5-5.5 1.2" /> <path d="M14.5 4v11.22a1 1 0 0 0 1.242.97L20 15.2" /> <path d="m2.978 19.351 5.549-1.363A2 2 0 0 0 10 16V2" /> <path d="M20 10 4 13.5" />`, opt)
}

// Save renders the "save" icon.
//
// Usage in templates:
//
//	{{ lucide "save" }}
//
// Direct usage in Go:
//
//	lucide.Save()
//	lucide.Save(lucide.Options{Size: 32, Class: "my-icon"})
func Save(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z" /> <path d="M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7" /> <path d="M7 3v4a1 1 0 0 0 1 1h7" />`, opt)
}

// SaveAll renders the "save-all" icon.
//
// Usage in templates:
//
//	{{ lucide "save-all" }}
//
// Direct usage in Go:
//
//	lucide.SaveAll()
//	lucide.SaveAll(lucide.Options{Size: 32, Class: "my-icon"})
func SaveAll(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v3a1 1 0 0 0 1 1h5" /> <path d="M18 18v-6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6" /> <path d="M18 22H4a2 2 0 0 1-2-2V6" /> <path d="M8 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9.172a2 2 0 0 1 1.414.586l2.828 2.828A2 2 0 0 1 22 6.828V16a2 2 0 0 1-2.01 2z" />`, opt)
}

// SaveOff renders the "save-off" icon.
//
// Usage in templates:
//
//	{{ lucide "save-off" }}
//
// Direct usage in Go:
//
//	lucide.SaveOff()
//	lucide.SaveOff(lucide.Options{Size: 32, Class: "my-icon"})
func SaveOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 13H8a1 1 0 0 0-1 1v7" /> <path d="M14 8h1" /> <path d="M17 21v-4" /> <path d="m2 2 20 20" /> <path d="M20.41 20.41A2 2 0 0 1 19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 .59-1.41" /> <path d="M29.5 11.5s5 5 4 5" /> <path d="M9 3h6.2a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V15" />`, opt)
}

// Scale renders the "scale" icon.
//
// Usage in templates:
//
//	{{ lucide "scale" }}
//
// Direct usage in Go:
//
//	lucide.Scale()
//	lucide.Scale(lucide.Options{Size: 32, Class: "my-icon"})
func Scale(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z" /> <path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z" /> <path d="M7 21h10" /> <path d="M12 3v18" /> <path d="M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2" />`, opt)
}

// Scale3d renders the "scale-3d" icon.
//
// Usage in templates:
//
//	{{ lucide "scale-3d" }}
//
// Direct usage in Go:
//
//	lucide.Scale3d()
//	lucide.Scale3d(lucide.Options{Size: 32, Class: "my-icon"})
func Scale3d(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 7v11a1 1 0 0 0 1 1h11" /> <path d="M5.293 18.707 11 13" /> <circle cx="19" cy="19" r="2" /> <circle cx="5" cy="5" r="2" />`, opt)
}

// Scaling renders the "scaling" icon.
//
// Usage in templates:
//
//	{{ lucide "scaling" }}
//
// Direct usage in Go:
//
//	lucide.Scaling()
//	lucide.Scaling(lucide.Options{Size: 32, Class: "my-icon"})
func Scaling(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" /> <path d="M14 15H9v-5" /> <path d="M16 3h5v5" /> <path d="M21 3 9 15" />`, opt)
}

// Scan renders the "scan" icon.
//
// Usage in templates:
//
//	{{ lucide "scan" }}
//
// Direct usage in Go:
//
//	lucide.Scan()
//	lucide.Scan(lucide.Options{Size: 32, Class: "my-icon"})
func Scan(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" />`, opt)
}

// ScanBarcode renders the "scan-barcode" icon.
//
// Usage in templates:
//
//	{{ lucide "scan-barcode" }}
//
// Direct usage in Go:
//
//	lucide.ScanBarcode()
//	lucide.ScanBarcode(lucide.Options{Size: 32, Class: "my-icon"})
func ScanBarcode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <path d="M8 7v10" /> <path d="M12 7v10" /> <path d="M17 7v10" />`, opt)
}

// ScanEye renders the "scan-eye" icon.
//
// Usage in templates:
//
//	{{ lucide "scan-eye" }}
//
// Direct usage in Go:
//
//	lucide.ScanEye()
//	lucide.ScanEye(lucide.Options{Size: 32, Class: "my-icon"})
func ScanEye(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <circle cx="12" cy="12" r="1" /> <path d="M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0" />`, opt)
}

// ScanFace renders the "scan-face" icon.
//
// Usage in templates:
//
//	{{ lucide "scan-face" }}
//
// Direct usage in Go:
//
//	lucide.ScanFace()
//	lucide.ScanFace(lucide.Options{Size: 32, Class: "my-icon"})
func ScanFace(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <path d="M8 14s1.5 2 4 2 4-2 4-2" /> <path d="M9 9h.01" /> <path d="M15 9h.01" />`, opt)
}

// ScanHeart renders the "scan-heart" icon.
//
// Usage in templates:
//
//	{{ lucide "scan-heart" }}
//
// Direct usage in Go:
//
//	lucide.ScanHeart()
//	lucide.ScanHeart(lucide.Options{Size: 32, Class: "my-icon"})
func ScanHeart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <path d="M7.828 13.07A3 3 0 0 1 12 8.764a3 3 0 0 1 4.172 4.306l-3.447 3.62a1 1 0 0 1-1.449 0z" />`, opt)
}

// ScanLine renders the "scan-line" icon.
//
// Usage in templates:
//
//	{{ lucide "scan-line" }}
//
// Direct usage in Go:
//
//	lucide.ScanLine()
//	lucide.ScanLine(lucide.Options{Size: 32, Class: "my-icon"})
func ScanLine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <path d="M7 12h10" />`, opt)
}

// ScanQrCode renders the "scan-qr-code" icon.
//
// Usage in templates:
//
//	{{ lucide "scan-qr-code" }}
//
// Direct usage in Go:
//
//	lucide.ScanQrCode()
//	lucide.ScanQrCode(lucide.Options{Size: 32, Class: "my-icon"})
func ScanQrCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 12v4a1 1 0 0 1-1 1h-4" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M17 8V7" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M7 17h.01" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <rect x="7" y="7" width="5" height="5" rx="1" />`, opt)
}

// ScanSearch renders the "scan-search" icon.
//
// Usage in templates:
//
//	{{ lucide "scan-search" }}
//
// Direct usage in Go:
//
//	lucide.ScanSearch()
//	lucide.ScanSearch(lucide.Options{Size: 32, Class: "my-icon"})
func ScanSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <circle cx="12" cy="12" r="3" /> <path d="m16 16-1.9-1.9" />`, opt)
}

// ScanText renders the "scan-text" icon.
//
// Usage in templates:
//
//	{{ lucide "scan-text" }}
//
// Direct usage in Go:
//
//	lucide.ScanText()
//	lucide.ScanText(lucide.Options{Size: 32, Class: "my-icon"})
func ScanText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7V5a2 2 0 0 1 2-2h2" /> <path d="M17 3h2a2 2 0 0 1 2 2v2" /> <path d="M21 17v2a2 2 0 0 1-2 2h-2" /> <path d="M7 21H5a2 2 0 0 1-2-2v-2" /> <path d="M7 8h8" /> <path d="M7 12h10" /> <path d="M7 16h6" />`, opt)
}

// School renders the "school" icon.
//
// Usage in templates:
//
//	{{ lucide "school" }}
//
// Direct usage in Go:
//
//	lucide.School()
//	lucide.School(lucide.Options{Size: 32, Class: "my-icon"})
func School(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 21v-3a2 2 0 0 0-4 0v3" /> <path d="M18 5v16" /> <path d="m4 6 7.106-3.79a2 2 0 0 1 1.788 0L20 6" /> <path d="m6 11-3.52 2.147a1 1 0 0 0-.48.854V19a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a1 1 0 0 0-.48-.853L18 11" /> <path d="M6 5v16" /> <circle cx="12" cy="9" r="2" />`, opt)
}

// Scissors renders the "scissors" icon.
//
// Usage in templates:
//
//	{{ lucide "scissors" }}
//
// Direct usage in Go:
//
//	lucide.Scissors()
//	lucide.Scissors(lucide.Options{Size: 32, Class: "my-icon"})
func Scissors(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="6" cy="6" r="3" /> <path d="M8.12 8.12 12 12" /> <path d="M20 4 8.12 15.88" /> <circle cx="6" cy="18" r="3" /> <path d="M14.8 14.8 20 20" />`, opt)
}

// ScissorsLineDashed renders the "scissors-line-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "scissors-line-dashed" }}
//
// Direct usage in Go:
//
//	lucide.ScissorsLineDashed()
//	lucide.ScissorsLineDashed(lucide.Options{Size: 32, Class: "my-icon"})
func ScissorsLineDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5.42 9.42 8 12" /> <circle cx="4" cy="8" r="2" /> <path d="m14 6-8.58 8.58" /> <circle cx="4" cy="16" r="2" /> <path d="M10.8 14.8 14 18" /> <path d="M16 12h-2" /> <path d="M22 12h-2" />`, opt)
}

// ScreenShare renders the "screen-share" icon.
//
// Usage in templates:
//
//	{{ lucide "screen-share" }}
//
// Direct usage in Go:
//
//	lucide.ScreenShare()
//	lucide.ScreenShare(lucide.Options{Size: 32, Class: "my-icon"})
func ScreenShare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3" /> <path d="M8 21h8" /> <path d="M12 17v4" /> <path d="m17 8 5-5" /> <path d="M17 3h5v5" />`, opt)
}

// ScreenShareOff renders the "screen-share-off" icon.
//
// Usage in templates:
//
//	{{ lucide "screen-share-off" }}
//
// Direct usage in Go:
//
//	lucide.ScreenShareOff()
//	lucide.ScreenShareOff(lucide.Options{Size: 32, Class: "my-icon"})
func ScreenShareOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3" /> <path d="M8 21h8" /> <path d="M12 17v4" /> <path d="m22 3-5 5" /> <path d="m17 3 5 5" />`, opt)
}

// Scroll renders the "scroll" icon.
//
// Usage in templates:
//
//	{{ lucide "scroll" }}
//
// Direct usage in Go:
//
//	lucide.Scroll()
//	lucide.Scroll(lucide.Options{Size: 32, Class: "my-icon"})
func Scroll(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 17V5a2 2 0 0 0-2-2H4" /> <path d="M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3" />`, opt)
}

// ScrollText renders the "scroll-text" icon.
//
// Usage in templates:
//
//	{{ lucide "scroll-text" }}
//
// Direct usage in Go:
//
//	lucide.ScrollText()
//	lucide.ScrollText(lucide.Options{Size: 32, Class: "my-icon"})
func ScrollText(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 12h-5" /> <path d="M15 8h-5" /> <path d="M19 17V5a2 2 0 0 0-2-2H4" /> <path d="M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3" />`, opt)
}

// Search renders the "search" icon.
//
// Usage in templates:
//
//	{{ lucide "search" }}
//
// Direct usage in Go:
//
//	lucide.Search()
//	lucide.Search(lucide.Options{Size: 32, Class: "my-icon"})
func Search(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m21 21-4.34-4.34" /> <circle cx="11" cy="11" r="8" />`, opt)
}

// SearchCheck renders the "search-check" icon.
//
// Usage in templates:
//
//	{{ lucide "search-check" }}
//
// Direct usage in Go:
//
//	lucide.SearchCheck()
//	lucide.SearchCheck(lucide.Options{Size: 32, Class: "my-icon"})
func SearchCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m8 11 2 2 4-4" /> <circle cx="11" cy="11" r="8" /> <path d="m21 21-4.3-4.3" />`, opt)
}

// SearchCode renders the "search-code" icon.
//
// Usage in templates:
//
//	{{ lucide "search-code" }}
//
// Direct usage in Go:
//
//	lucide.SearchCode()
//	lucide.SearchCode(lucide.Options{Size: 32, Class: "my-icon"})
func SearchCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m13 13.5 2-2.5-2-2.5" /> <path d="m21 21-4.3-4.3" /> <path d="M9 8.5 7 11l2 2.5" /> <circle cx="11" cy="11" r="8" />`, opt)
}

// SearchSlash renders the "search-slash" icon.
//
// Usage in templates:
//
//	{{ lucide "search-slash" }}
//
// Direct usage in Go:
//
//	lucide.SearchSlash()
//	lucide.SearchSlash(lucide.Options{Size: 32, Class: "my-icon"})
func SearchSlash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m13.5 8.5-5 5" /> <circle cx="11" cy="11" r="8" /> <path d="m21 21-4.3-4.3" />`, opt)
}

// SearchX renders the "search-x" icon.
//
// Usage in templates:
//
//	{{ lucide "search-x" }}
//
// Direct usage in Go:
//
//	lucide.SearchX()
//	lucide.SearchX(lucide.Options{Size: 32, Class: "my-icon"})
func SearchX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m13.5 8.5-5 5" /> <path d="m8.5 8.5 5 5" /> <circle cx="11" cy="11" r="8" /> <path d="m21 21-4.3-4.3" />`, opt)
}

// Section renders the "section" icon.
//
// Usage in templates:
//
//	{{ lucide "section" }}
//
// Direct usage in Go:
//
//	lucide.Section()
//	lucide.Section(lucide.Options{Size: 32, Class: "my-icon"})
func Section(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5a4 3 0 0 0-8 0c0 4 8 3 8 7a4 3 0 0 1-8 0" /> <path d="M8 19a4 3 0 0 0 8 0c0-4-8-3-8-7a4 3 0 0 1 8 0" />`, opt)
}

// Send renders the "send" icon.
//
// Usage in templates:
//
//	{{ lucide "send" }}
//
// Direct usage in Go:
//
//	lucide.Send()
//	lucide.Send(lucide.Options{Size: 32, Class: "my-icon"})
func Send(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z" /> <path d="m21.854 2.147-10.94 10.939" />`, opt)
}

// SendHorizontal renders the "send-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "send-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.SendHorizontal()
//	lucide.SendHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func SendHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z" /> <path d="M6 12h16" />`, opt)
}

// SendToBack renders the "send-to-back" icon.
//
// Usage in templates:
//
//	{{ lucide "send-to-back" }}
//
// Direct usage in Go:
//
//	lucide.SendToBack()
//	lucide.SendToBack(lucide.Options{Size: 32, Class: "my-icon"})
func SendToBack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="14" y="14" width="8" height="8" rx="2" /> <rect x="2" y="2" width="8" height="8" rx="2" /> <path d="M7 14v1a2 2 0 0 0 2 2h1" /> <path d="M14 7h1a2 2 0 0 1 2 2v1" />`, opt)
}

// SeparatorHorizontal renders the "separator-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "separator-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.SeparatorHorizontal()
//	lucide.SeparatorHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func SeparatorHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 16-4 4-4-4" /> <path d="M3 12h18" /> <path d="m8 8 4-4 4 4" />`, opt)
}

// SeparatorVertical renders the "separator-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "separator-vertical" }}
//
// Direct usage in Go:
//
//	lucide.SeparatorVertical()
//	lucide.SeparatorVertical(lucide.Options{Size: 32, Class: "my-icon"})
func SeparatorVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v18" /> <path d="m16 16 4-4-4-4" /> <path d="m8 8-4 4 4 4" />`, opt)
}

// Server renders the "server" icon.
//
// Usage in templates:
//
//	{{ lucide "server" }}
//
// Direct usage in Go:
//
//	lucide.Server()
//	lucide.Server(lucide.Options{Size: 32, Class: "my-icon"})
func Server(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="8" x="2" y="2" rx="2" ry="2" /> <rect width="20" height="8" x="2" y="14" rx="2" ry="2" /> <line x1="6" x2="6.01" y1="6" y2="6" /> <line x1="6" x2="6.01" y1="18" y2="18" />`, opt)
}

// ServerCog renders the "server-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "server-cog" }}
//
// Direct usage in Go:
//
//	lucide.ServerCog()
//	lucide.ServerCog(lucide.Options{Size: 32, Class: "my-icon"})
func ServerCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10.852 14.772-.383.923" /> <path d="M13.148 14.772a3 3 0 1 0-2.296-5.544l-.383-.923" /> <path d="m13.148 9.228.383-.923" /> <path d="m13.53 15.696-.382-.924a3 3 0 1 1-2.296-5.544" /> <path d="m14.772 10.852.923-.383" /> <path d="m14.772 13.148.923.383" /> <path d="M4.5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-.5" /> <path d="M4.5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-.5" /> <path d="M6 18h.01" /> <path d="M6 6h.01" /> <path d="m9.228 10.852-.923-.383" /> <path d="m9.228 13.148-.923.383" />`, opt)
}

// ServerCrash renders the "server-crash" icon.
//
// Usage in templates:
//
//	{{ lucide "server-crash" }}
//
// Direct usage in Go:
//
//	lucide.ServerCrash()
//	lucide.ServerCrash(lucide.Options{Size: 32, Class: "my-icon"})
func ServerCrash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2" /> <path d="M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2" /> <path d="M6 6h.01" /> <path d="M6 18h.01" /> <path d="m13 6-4 6h6l-4 6" />`, opt)
}

// ServerOff renders the "server-off" icon.
//
// Usage in templates:
//
//	{{ lucide "server-off" }}
//
// Direct usage in Go:
//
//	lucide.ServerOff()
//	lucide.ServerOff(lucide.Options{Size: 32, Class: "my-icon"})
func ServerOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5" /> <path d="M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z" /> <path d="M22 17v-1a2 2 0 0 0-2-2h-1" /> <path d="M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z" /> <path d="M6 18h.01" /> <path d="m2 2 20 20" />`, opt)
}

// Settings renders the "settings" icon.
//
// Usage in templates:
//
//	{{ lucide "settings" }}
//
// Direct usage in Go:
//
//	lucide.Settings()
//	lucide.Settings(lucide.Options{Size: 32, Class: "my-icon"})
func Settings(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9.671 4.136a2.34 2.34 0 0 1 4.659 0 2.34 2.34 0 0 0 3.319 1.915 2.34 2.34 0 0 1 2.33 4.033 2.34 2.34 0 0 0 0 3.831 2.34 2.34 0 0 1-2.33 4.033 2.34 2.34 0 0 0-3.319 1.915 2.34 2.34 0 0 1-4.659 0 2.34 2.34 0 0 0-3.32-1.915 2.34 2.34 0 0 1-2.33-4.033 2.34 2.34 0 0 0 0-3.831A2.34 2.34 0 0 1 6.35 6.051a2.34 2.34 0 0 0 3.319-1.915" /> <circle cx="12" cy="12" r="3" />`, opt)
}

// Settings2 renders the "settings-2" icon.
//
// Usage in templates:
//
//	{{ lucide "settings-2" }}
//
// Direct usage in Go:
//
//	lucide.Settings2()
//	lucide.Settings2(lucide.Options{Size: 32, Class: "my-icon"})
func Settings2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 17H5" /> <path d="M19 7h-9" /> <circle cx="17" cy="17" r="3" /> <circle cx="7" cy="7" r="3" />`, opt)
}

// Shapes renders the "shapes" icon.
//
// Usage in templates:
//
//	{{ lucide "shapes" }}
//
// Direct usage in Go:
//
//	lucide.Shapes()
//	lucide.Shapes(lucide.Options{Size: 32, Class: "my-icon"})
func Shapes(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z" /> <rect x="3" y="14" width="7" height="7" rx="1" /> <circle cx="17.5" cy="17.5" r="3.5" />`, opt)
}

// Share renders the "share" icon.
//
// Usage in templates:
//
//	{{ lucide "share" }}
//
// Direct usage in Go:
//
//	lucide.Share()
//	lucide.Share(lucide.Options{Size: 32, Class: "my-icon"})
func Share(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v13" /> <path d="m16 6-4-4-4 4" /> <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />`, opt)
}

// Share2 renders the "share-2" icon.
//
// Usage in templates:
//
//	{{ lucide "share-2" }}
//
// Direct usage in Go:
//
//	lucide.Share2()
//	lucide.Share2(lucide.Options{Size: 32, Class: "my-icon"})
func Share2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="18" cy="5" r="3" /> <circle cx="6" cy="12" r="3" /> <circle cx="18" cy="19" r="3" /> <line x1="8.59" x2="15.42" y1="13.51" y2="17.49" /> <line x1="15.41" x2="8.59" y1="6.51" y2="10.49" />`, opt)
}

// Sheet renders the "sheet" icon.
//
// Usage in templates:
//
//	{{ lucide "sheet" }}
//
// Direct usage in Go:
//
//	lucide.Sheet()
//	lucide.Sheet(lucide.Options{Size: 32, Class: "my-icon"})
func Sheet(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <line x1="3" x2="21" y1="9" y2="9" /> <line x1="3" x2="21" y1="15" y2="15" /> <line x1="9" x2="9" y1="9" y2="21" /> <line x1="15" x2="15" y1="9" y2="21" />`, opt)
}

// Shell renders the "shell" icon.
//
// Usage in templates:
//
//	{{ lucide "shell" }}
//
// Direct usage in Go:
//
//	lucide.Shell()
//	lucide.Shell(lucide.Options{Size: 32, Class: "my-icon"})
func Shell(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 11a2 2 0 1 1-4 0 4 4 0 0 1 8 0 6 6 0 0 1-12 0 8 8 0 0 1 16 0 10 10 0 1 1-20 0 11.93 11.93 0 0 1 2.42-7.22 2 2 0 1 1 3.16 2.44" />`, opt)
}

// Shield renders the "shield" icon.
//
// Usage in templates:
//
//	{{ lucide "shield" }}
//
// Direct usage in Go:
//
//	lucide.Shield()
//	lucide.Shield(lucide.Options{Size: 32, Class: "my-icon"})
func Shield(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" />`, opt)
}

// ShieldAlert renders the "shield-alert" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-alert" }}
//
// Direct usage in Go:
//
//	lucide.ShieldAlert()
//	lucide.ShieldAlert(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldAlert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="M12 8v4" /> <path d="M12 16h.01" />`, opt)
}

// ShieldBan renders the "shield-ban" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-ban" }}
//
// Direct usage in Go:
//
//	lucide.ShieldBan()
//	lucide.ShieldBan(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldBan(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="m4.243 5.21 14.39 12.472" />`, opt)
}

// ShieldCheck renders the "shield-check" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-check" }}
//
// Direct usage in Go:
//
//	lucide.ShieldCheck()
//	lucide.ShieldCheck(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="m9 12 2 2 4-4" />`, opt)
}

// ShieldEllipsis renders the "shield-ellipsis" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-ellipsis" }}
//
// Direct usage in Go:
//
//	lucide.ShieldEllipsis()
//	lucide.ShieldEllipsis(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldEllipsis(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="M8 12h.01" /> <path d="M12 12h.01" /> <path d="M16 12h.01" />`, opt)
}

// ShieldHalf renders the "shield-half" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-half" }}
//
// Direct usage in Go:
//
//	lucide.ShieldHalf()
//	lucide.ShieldHalf(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldHalf(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="M12 22V2" />`, opt)
}

// ShieldMinus renders the "shield-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-minus" }}
//
// Direct usage in Go:
//
//	lucide.ShieldMinus()
//	lucide.ShieldMinus(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="M9 12h6" />`, opt)
}

// ShieldOff renders the "shield-off" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-off" }}
//
// Direct usage in Go:
//
//	lucide.ShieldOff()
//	lucide.ShieldOff(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 2 20 20" /> <path d="M5 5a1 1 0 0 0-1 1v7c0 5 3.5 7.5 7.67 8.94a1 1 0 0 0 .67.01c2.35-.82 4.48-1.97 5.9-3.71" /> <path d="M9.309 3.652A12.252 12.252 0 0 0 11.24 2.28a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1v7a9.784 9.784 0 0 1-.08 1.264" />`, opt)
}

// ShieldPlus renders the "shield-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-plus" }}
//
// Direct usage in Go:
//
//	lucide.ShieldPlus()
//	lucide.ShieldPlus(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="M9 12h6" /> <path d="M12 9v6" />`, opt)
}

// ShieldQuestionMark renders the "shield-question-mark" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-question-mark" }}
//
// Direct usage in Go:
//
//	lucide.ShieldQuestionMark()
//	lucide.ShieldQuestionMark(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldQuestionMark(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3" /> <path d="M12 17h.01" />`, opt)
}

// ShieldUser renders the "shield-user" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-user" }}
//
// Direct usage in Go:
//
//	lucide.ShieldUser()
//	lucide.ShieldUser(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldUser(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="M6.376 18.91a6 6 0 0 1 11.249.003" /> <circle cx="12" cy="11" r="4" />`, opt)
}

// ShieldX renders the "shield-x" icon.
//
// Usage in templates:
//
//	{{ lucide "shield-x" }}
//
// Direct usage in Go:
//
//	lucide.ShieldX()
//	lucide.ShieldX(lucide.Options{Size: 32, Class: "my-icon"})
func ShieldX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z" /> <path d="m14.5 9.5-5 5" /> <path d="m9.5 9.5 5 5" />`, opt)
}

// Ship renders the "ship" icon.
//
// Usage in templates:
//
//	{{ lucide "ship" }}
//
// Direct usage in Go:
//
//	lucide.Ship()
//	lucide.Ship(lucide.Options{Size: 32, Class: "my-icon"})
func Ship(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 10.189V14" /> <path d="M12 2v3" /> <path d="M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6" /> <path d="M19.38 20A11.6 11.6 0 0 0 21 14l-8.188-3.639a2 2 0 0 0-1.624 0L3 14a11.6 11.6 0 0 0 2.81 7.76" /> <path d="M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1s1.2 1 2.5 1c2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" />`, opt)
}

// ShipWheel renders the "ship-wheel" icon.
//
// Usage in templates:
//
//	{{ lucide "ship-wheel" }}
//
// Direct usage in Go:
//
//	lucide.ShipWheel()
//	lucide.ShipWheel(lucide.Options{Size: 32, Class: "my-icon"})
func ShipWheel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="8" /> <path d="M12 2v7.5" /> <path d="m19 5-5.23 5.23" /> <path d="M22 12h-7.5" /> <path d="m19 19-5.23-5.23" /> <path d="M12 14.5V22" /> <path d="M10.23 13.77 5 19" /> <path d="M9.5 12H2" /> <path d="M10.23 10.23 5 5" /> <circle cx="12" cy="12" r="2.5" />`, opt)
}

// Shirt renders the "shirt" icon.
//
// Usage in templates:
//
//	{{ lucide "shirt" }}
//
// Direct usage in Go:
//
//	lucide.Shirt()
//	lucide.Shirt(lucide.Options{Size: 32, Class: "my-icon"})
func Shirt(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z" />`, opt)
}

// ShoppingBag renders the "shopping-bag" icon.
//
// Usage in templates:
//
//	{{ lucide "shopping-bag" }}
//
// Direct usage in Go:
//
//	lucide.ShoppingBag()
//	lucide.ShoppingBag(lucide.Options{Size: 32, Class: "my-icon"})
func ShoppingBag(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 10a4 4 0 0 1-8 0" /> <path d="M3.103 6.034h17.794" /> <path d="M3.4 5.467a2 2 0 0 0-.4 1.2V20a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6.667a2 2 0 0 0-.4-1.2l-2-2.667A2 2 0 0 0 17 2H7a2 2 0 0 0-1.6.8z" />`, opt)
}

// ShoppingBasket renders the "shopping-basket" icon.
//
// Usage in templates:
//
//	{{ lucide "shopping-basket" }}
//
// Direct usage in Go:
//
//	lucide.ShoppingBasket()
//	lucide.ShoppingBasket(lucide.Options{Size: 32, Class: "my-icon"})
func ShoppingBasket(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 11-1 9" /> <path d="m19 11-4-7" /> <path d="M2 11h20" /> <path d="m3.5 11 1.6 7.4a2 2 0 0 0 2 1.6h9.8a2 2 0 0 0 2-1.6l1.7-7.4" /> <path d="M4.5 15.5h15" /> <path d="m5 11 4-7" /> <path d="m9 11 1 9" />`, opt)
}

// ShoppingCart renders the "shopping-cart" icon.
//
// Usage in templates:
//
//	{{ lucide "shopping-cart" }}
//
// Direct usage in Go:
//
//	lucide.ShoppingCart()
//	lucide.ShoppingCart(lucide.Options{Size: 32, Class: "my-icon"})
func ShoppingCart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="8" cy="21" r="1" /> <circle cx="19" cy="21" r="1" /> <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />`, opt)
}

// Shovel renders the "shovel" icon.
//
// Usage in templates:
//
//	{{ lucide "shovel" }}
//
// Direct usage in Go:
//
//	lucide.Shovel()
//	lucide.Shovel(lucide.Options{Size: 32, Class: "my-icon"})
func Shovel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21.56 4.56a1.5 1.5 0 0 1 0 2.122l-.47.47a3 3 0 0 1-4.212-.03 3 3 0 0 1 0-4.243l.44-.44a1.5 1.5 0 0 1 2.121 0z" /> <path d="M3 22a1 1 0 0 1-1-1v-3.586a1 1 0 0 1 .293-.707l3.355-3.355a1.205 1.205 0 0 1 1.704 0l3.296 3.296a1.205 1.205 0 0 1 0 1.704l-3.355 3.355a1 1 0 0 1-.707.293z" /> <path d="m9 15 7.879-7.878" />`, opt)
}

// ShowerHead renders the "shower-head" icon.
//
// Usage in templates:
//
//	{{ lucide "shower-head" }}
//
// Direct usage in Go:
//
//	lucide.ShowerHead()
//	lucide.ShowerHead(lucide.Options{Size: 32, Class: "my-icon"})
func ShowerHead(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m4 4 2.5 2.5" /> <path d="M13.5 6.5a4.95 4.95 0 0 0-7 7" /> <path d="M15 5 5 15" /> <path d="M14 17v.01" /> <path d="M10 16v.01" /> <path d="M13 13v.01" /> <path d="M16 10v.01" /> <path d="M11 20v.01" /> <path d="M17 14v.01" /> <path d="M20 11v.01" />`, opt)
}

// Shredder renders the "shredder" icon.
//
// Usage in templates:
//
//	{{ lucide "shredder" }}
//
// Direct usage in Go:
//
//	lucide.Shredder()
//	lucide.Shredder(lucide.Options{Size: 32, Class: "my-icon"})
func Shredder(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 22v-5" /> <path d="M14 19v-2" /> <path d="M14 2v4a2 2 0 0 0 2 2h4" /> <path d="M18 20v-3" /> <path d="M2 13h20" /> <path d="M20 13V7l-5-5H6a2 2 0 0 0-2 2v9" /> <path d="M6 20v-3" />`, opt)
}

// Shrimp renders the "shrimp" icon.
//
// Usage in templates:
//
//	{{ lucide "shrimp" }}
//
// Direct usage in Go:
//
//	lucide.Shrimp()
//	lucide.Shrimp(lucide.Options{Size: 32, Class: "my-icon"})
func Shrimp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 12h.01" /> <path d="M13 22c.5-.5 1.12-1 2.5-1-1.38 0-2-.5-2.5-1" /> <path d="M14 2a3.28 3.28 0 0 1-3.227 1.798l-6.17-.561A2.387 2.387 0 1 0 4.387 8H15.5a1 1 0 0 1 0 13 1 1 0 0 0 0-5H12a7 7 0 0 1-7-7V8" /> <path d="M14 8a8.5 8.5 0 0 1 0 8" /> <path d="M16 16c2 0 4.5-4 4-6" />`, opt)
}

// Shrink renders the "shrink" icon.
//
// Usage in templates:
//
//	{{ lucide "shrink" }}
//
// Direct usage in Go:
//
//	lucide.Shrink()
//	lucide.Shrink(lucide.Options{Size: 32, Class: "my-icon"})
func Shrink(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m15 15 6 6m-6-6v4.8m0-4.8h4.8" /> <path d="M9 19.8V15m0 0H4.2M9 15l-6 6" /> <path d="M15 4.2V9m0 0h4.8M15 9l6-6" /> <path d="M9 4.2V9m0 0H4.2M9 9 3 3" />`, opt)
}

// Shrub renders the "shrub" icon.
//
// Usage in templates:
//
//	{{ lucide "shrub" }}
//
// Direct usage in Go:
//
//	lucide.Shrub()
//	lucide.Shrub(lucide.Options{Size: 32, Class: "my-icon"})
func Shrub(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22v-5.172a2 2 0 0 0-.586-1.414L9.5 13.5" /> <path d="M14.5 14.5 12 17" /> <path d="M17 8.8A6 6 0 0 1 13.8 20H10A6.5 6.5 0 0 1 7 8a5 5 0 0 1 10 0z" />`, opt)
}

// Shuffle renders the "shuffle" icon.
//
// Usage in templates:
//
//	{{ lucide "shuffle" }}
//
// Direct usage in Go:
//
//	lucide.Shuffle()
//	lucide.Shuffle(lucide.Options{Size: 32, Class: "my-icon"})
func Shuffle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18 14 4 4-4 4" /> <path d="m18 2 4 4-4 4" /> <path d="M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22" /> <path d="M2 6h1.972a4 4 0 0 1 3.6 2.2" /> <path d="M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45" />`, opt)
}

// Sigma renders the "sigma" icon.
//
// Usage in templates:
//
//	{{ lucide "sigma" }}
//
// Direct usage in Go:
//
//	lucide.Sigma()
//	lucide.Sigma(lucide.Options{Size: 32, Class: "my-icon"})
func Sigma(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 7V5a1 1 0 0 0-1-1H6.5a.5.5 0 0 0-.4.8l4.5 6a2 2 0 0 1 0 2.4l-4.5 6a.5.5 0 0 0 .4.8H17a1 1 0 0 0 1-1v-2" />`, opt)
}

// Signal renders the "signal" icon.
//
// Usage in templates:
//
//	{{ lucide "signal" }}
//
// Direct usage in Go:
//
//	lucide.Signal()
//	lucide.Signal(lucide.Options{Size: 32, Class: "my-icon"})
func Signal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 20h.01" /> <path d="M7 20v-4" /> <path d="M12 20v-8" /> <path d="M17 20V8" /> <path d="M22 4v16" />`, opt)
}

// SignalHigh renders the "signal-high" icon.
//
// Usage in templates:
//
//	{{ lucide "signal-high" }}
//
// Direct usage in Go:
//
//	lucide.SignalHigh()
//	lucide.SignalHigh(lucide.Options{Size: 32, Class: "my-icon"})
func SignalHigh(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 20h.01" /> <path d="M7 20v-4" /> <path d="M12 20v-8" /> <path d="M17 20V8" />`, opt)
}

// SignalLow renders the "signal-low" icon.
//
// Usage in templates:
//
//	{{ lucide "signal-low" }}
//
// Direct usage in Go:
//
//	lucide.SignalLow()
//	lucide.SignalLow(lucide.Options{Size: 32, Class: "my-icon"})
func SignalLow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 20h.01" /> <path d="M7 20v-4" />`, opt)
}

// SignalMedium renders the "signal-medium" icon.
//
// Usage in templates:
//
//	{{ lucide "signal-medium" }}
//
// Direct usage in Go:
//
//	lucide.SignalMedium()
//	lucide.SignalMedium(lucide.Options{Size: 32, Class: "my-icon"})
func SignalMedium(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 20h.01" /> <path d="M7 20v-4" /> <path d="M12 20v-8" />`, opt)
}

// SignalZero renders the "signal-zero" icon.
//
// Usage in templates:
//
//	{{ lucide "signal-zero" }}
//
// Direct usage in Go:
//
//	lucide.SignalZero()
//	lucide.SignalZero(lucide.Options{Size: 32, Class: "my-icon"})
func SignalZero(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 20h.01" />`, opt)
}

// Signature renders the "signature" icon.
//
// Usage in templates:
//
//	{{ lucide "signature" }}
//
// Direct usage in Go:
//
//	lucide.Signature()
//	lucide.Signature(lucide.Options{Size: 32, Class: "my-icon"})
func Signature(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m21 17-2.156-1.868A.5.5 0 0 0 18 15.5v.5a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1c0-2.545-3.991-3.97-8.5-4a1 1 0 0 0 0 5c4.153 0 4.745-11.295 5.708-13.5a2.5 2.5 0 1 1 3.31 3.284" /> <path d="M3 21h18" />`, opt)
}

// Signpost renders the "signpost" icon.
//
// Usage in templates:
//
//	{{ lucide "signpost" }}
//
// Direct usage in Go:
//
//	lucide.Signpost()
//	lucide.Signpost(lucide.Options{Size: 32, Class: "my-icon"})
func Signpost(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13v8" /> <path d="M12 3v3" /> <path d="M18 6a2 2 0 0 1 1.387.56l2.307 2.22a1 1 0 0 1 0 1.44l-2.307 2.22A2 2 0 0 1 18 13H6a2 2 0 0 1-1.387-.56l-2.306-2.22a1 1 0 0 1 0-1.44l2.306-2.22A2 2 0 0 1 6 6z" />`, opt)
}

// SignpostBig renders the "signpost-big" icon.
//
// Usage in templates:
//
//	{{ lucide "signpost-big" }}
//
// Direct usage in Go:
//
//	lucide.SignpostBig()
//	lucide.SignpostBig(lucide.Options{Size: 32, Class: "my-icon"})
func SignpostBig(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 9H4L2 7l2-2h6" /> <path d="M14 5h6l2 2-2 2h-6" /> <path d="M10 22V4a2 2 0 1 1 4 0v18" /> <path d="M8 22h8" />`, opt)
}

// Siren renders the "siren" icon.
//
// Usage in templates:
//
//	{{ lucide "siren" }}
//
// Direct usage in Go:
//
//	lucide.Siren()
//	lucide.Siren(lucide.Options{Size: 32, Class: "my-icon"})
func Siren(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 18v-6a5 5 0 1 1 10 0v6" /> <path d="M5 21a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2z" /> <path d="M21 12h1" /> <path d="M18.5 4.5 18 5" /> <path d="M2 12h1" /> <path d="M12 2v1" /> <path d="m4.929 4.929.707.707" /> <path d="M12 12v6" />`, opt)
}

// SkipBack renders the "skip-back" icon.
//
// Usage in templates:
//
//	{{ lucide "skip-back" }}
//
// Direct usage in Go:
//
//	lucide.SkipBack()
//	lucide.SkipBack(lucide.Options{Size: 32, Class: "my-icon"})
func SkipBack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17.971 4.285A2 2 0 0 1 21 6v12a2 2 0 0 1-3.029 1.715l-9.997-5.998a2 2 0 0 1-.003-3.432z" /> <path d="M3 20V4" />`, opt)
}

// SkipForward renders the "skip-forward" icon.
//
// Usage in templates:
//
//	{{ lucide "skip-forward" }}
//
// Direct usage in Go:
//
//	lucide.SkipForward()
//	lucide.SkipForward(lucide.Options{Size: 32, Class: "my-icon"})
func SkipForward(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 4v16" /> <path d="M6.029 4.285A2 2 0 0 0 3 6v12a2 2 0 0 0 3.029 1.715l9.997-5.998a2 2 0 0 0 .003-3.432z" />`, opt)
}

// Skull renders the "skull" icon.
//
// Usage in templates:
//
//	{{ lucide "skull" }}
//
// Direct usage in Go:
//
//	lucide.Skull()
//	lucide.Skull(lucide.Options{Size: 32, Class: "my-icon"})
func Skull(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12.5 17-.5-1-.5 1h1z" /> <path d="M15 22a1 1 0 0 0 1-1v-1a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20v1a1 1 0 0 0 1 1z" /> <circle cx="15" cy="12" r="1" /> <circle cx="9" cy="12" r="1" />`, opt)
}

// Slack renders the "slack" icon.
//
// Usage in templates:
//
//	{{ lucide "slack" }}
//
// Direct usage in Go:
//
//	lucide.Slack()
//	lucide.Slack(lucide.Options{Size: 32, Class: "my-icon"})
func Slack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="3" height="8" x="13" y="2" rx="1.5" /> <path d="M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5" /> <rect width="3" height="8" x="8" y="14" rx="1.5" /> <path d="M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5" /> <rect width="8" height="3" x="14" y="13" rx="1.5" /> <path d="M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5" /> <rect width="8" height="3" x="2" y="8" rx="1.5" /> <path d="M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5" />`, opt)
}

// Slash renders the "slash" icon.
//
// Usage in templates:
//
//	{{ lucide "slash" }}
//
// Direct usage in Go:
//
//	lucide.Slash()
//	lucide.Slash(lucide.Options{Size: 32, Class: "my-icon"})
func Slash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 2 2 22" />`, opt)
}

// Slice renders the "slice" icon.
//
// Usage in templates:
//
//	{{ lucide "slice" }}
//
// Direct usage in Go:
//
//	lucide.Slice()
//	lucide.Slice(lucide.Options{Size: 32, Class: "my-icon"})
func Slice(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 16.586V19a1 1 0 0 1-1 1H2L18.37 3.63a1 1 0 1 1 3 3l-9.663 9.663a1 1 0 0 1-1.414 0L8 14" />`, opt)
}

// SlidersHorizontal renders the "sliders-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "sliders-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.SlidersHorizontal()
//	lucide.SlidersHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func SlidersHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 5H3" /> <path d="M12 19H3" /> <path d="M14 3v4" /> <path d="M16 17v4" /> <path d="M21 12h-9" /> <path d="M21 19h-5" /> <path d="M21 5h-7" /> <path d="M8 10v4" /> <path d="M8 12H3" />`, opt)
}

// SlidersVertical renders the "sliders-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "sliders-vertical" }}
//
// Direct usage in Go:
//
//	lucide.SlidersVertical()
//	lucide.SlidersVertical(lucide.Options{Size: 32, Class: "my-icon"})
func SlidersVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 8h4" /> <path d="M12 21v-9" /> <path d="M12 8V3" /> <path d="M17 16h4" /> <path d="M19 12V3" /> <path d="M19 21v-5" /> <path d="M3 14h4" /> <path d="M5 10V3" /> <path d="M5 21v-7" />`, opt)
}

// Smartphone renders the "smartphone" icon.
//
// Usage in templates:
//
//	{{ lucide "smartphone" }}
//
// Direct usage in Go:
//
//	lucide.Smartphone()
//	lucide.Smartphone(lucide.Options{Size: 32, Class: "my-icon"})
func Smartphone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="20" x="5" y="2" rx="2" ry="2" /> <path d="M12 18h.01" />`, opt)
}

// SmartphoneCharging renders the "smartphone-charging" icon.
//
// Usage in templates:
//
//	{{ lucide "smartphone-charging" }}
//
// Direct usage in Go:
//
//	lucide.SmartphoneCharging()
//	lucide.SmartphoneCharging(lucide.Options{Size: 32, Class: "my-icon"})
func SmartphoneCharging(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="14" height="20" x="5" y="2" rx="2" ry="2" /> <path d="M12.667 8 10 12h4l-2.667 4" />`, opt)
}

// SmartphoneNfc renders the "smartphone-nfc" icon.
//
// Usage in templates:
//
//	{{ lucide "smartphone-nfc" }}
//
// Direct usage in Go:
//
//	lucide.SmartphoneNfc()
//	lucide.SmartphoneNfc(lucide.Options{Size: 32, Class: "my-icon"})
func SmartphoneNfc(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="7" height="12" x="2" y="6" rx="1" /> <path d="M13 8.32a7.43 7.43 0 0 1 0 7.36" /> <path d="M16.46 6.21a11.76 11.76 0 0 1 0 11.58" /> <path d="M19.91 4.1a15.91 15.91 0 0 1 .01 15.8" />`, opt)
}

// Smile renders the "smile" icon.
//
// Usage in templates:
//
//	{{ lucide "smile" }}
//
// Direct usage in Go:
//
//	lucide.Smile()
//	lucide.Smile(lucide.Options{Size: 32, Class: "my-icon"})
func Smile(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <path d="M8 14s1.5 2 4 2 4-2 4-2" /> <line x1="9" x2="9.01" y1="9" y2="9" /> <line x1="15" x2="15.01" y1="9" y2="9" />`, opt)
}

// SmilePlus renders the "smile-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "smile-plus" }}
//
// Direct usage in Go:
//
//	lucide.SmilePlus()
//	lucide.SmilePlus(lucide.Options{Size: 32, Class: "my-icon"})
func SmilePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 11v1a10 10 0 1 1-9-10" /> <path d="M8 14s1.5 2 4 2 4-2 4-2" /> <line x1="9" x2="9.01" y1="9" y2="9" /> <line x1="15" x2="15.01" y1="9" y2="9" /> <path d="M16 5h6" /> <path d="M19 2v6" />`, opt)
}

// Snail renders the "snail" icon.
//
// Usage in templates:
//
//	{{ lucide "snail" }}
//
// Direct usage in Go:
//
//	lucide.Snail()
//	lucide.Snail(lucide.Options{Size: 32, Class: "my-icon"})
func Snail(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 13a6 6 0 1 0 12 0 4 4 0 1 0-8 0 2 2 0 0 0 4 0" /> <circle cx="10" cy="13" r="8" /> <path d="M2 21h12c4.4 0 8-3.6 8-8V7a2 2 0 1 0-4 0v6" /> <path d="M18 3 19.1 5.2" /> <path d="M22 3 20.9 5.2" />`, opt)
}

// Snowflake renders the "snowflake" icon.
//
// Usage in templates:
//
//	{{ lucide "snowflake" }}
//
// Direct usage in Go:
//
//	lucide.Snowflake()
//	lucide.Snowflake(lucide.Options{Size: 32, Class: "my-icon"})
func Snowflake(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 20-1.25-2.5L6 18" /> <path d="M10 4 8.75 6.5 6 6" /> <path d="m14 20 1.25-2.5L18 18" /> <path d="m14 4 1.25 2.5L18 6" /> <path d="m17 21-3-6h-4" /> <path d="m17 3-3 6 1.5 3" /> <path d="M2 12h6.5L10 9" /> <path d="m20 10-1.5 2 1.5 2" /> <path d="M22 12h-6.5L14 15" /> <path d="m4 10 1.5 2L4 14" /> <path d="m7 21 3-6-1.5-3" /> <path d="m7 3 3 6h4" />`, opt)
}

// SoapDispenserDroplet renders the "soap-dispenser-droplet" icon.
//
// Usage in templates:
//
//	{{ lucide "soap-dispenser-droplet" }}
//
// Direct usage in Go:
//
//	lucide.SoapDispenserDroplet()
//	lucide.SoapDispenserDroplet(lucide.Options{Size: 32, Class: "my-icon"})
func SoapDispenserDroplet(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.5 2v4" /> <path d="M14 2H7a2 2 0 0 0-2 2" /> <path d="M19.29 14.76A6.67 6.67 0 0 1 17 11a6.6 6.6 0 0 1-2.29 3.76c-1.15.92-1.71 2.04-1.71 3.19 0 2.22 1.8 4.05 4 4.05s4-1.83 4-4.05c0-1.16-.57-2.26-1.71-3.19" /> <path d="M9.607 21H6a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h7V7a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3" />`, opt)
}

// Sofa renders the "sofa" icon.
//
// Usage in templates:
//
//	{{ lucide "sofa" }}
//
// Direct usage in Go:
//
//	lucide.Sofa()
//	lucide.Sofa(lucide.Options{Size: 32, Class: "my-icon"})
func Sofa(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3" /> <path d="M2 16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z" /> <path d="M4 18v2" /> <path d="M20 18v2" /> <path d="M12 4v9" />`, opt)
}

// Soup renders the "soup" icon.
//
// Usage in templates:
//
//	{{ lucide "soup" }}
//
// Direct usage in Go:
//
//	lucide.Soup()
//	lucide.Soup(lucide.Options{Size: 32, Class: "my-icon"})
func Soup(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z" /> <path d="M7 21h10" /> <path d="M19.5 12 22 6" /> <path d="M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62" /> <path d="M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62" /> <path d="M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62" />`, opt)
}

// Space renders the "space" icon.
//
// Usage in templates:
//
//	{{ lucide "space" }}
//
// Direct usage in Go:
//
//	lucide.Space()
//	lucide.Space(lucide.Options{Size: 32, Class: "my-icon"})
func Space(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1" />`, opt)
}

// Spade renders the "spade" icon.
//
// Usage in templates:
//
//	{{ lucide "spade" }}
//
// Direct usage in Go:
//
//	lucide.Spade()
//	lucide.Spade(lucide.Options{Size: 32, Class: "my-icon"})
func Spade(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 18v4" /> <path d="M2 14.499a5.5 5.5 0 0 0 9.591 3.675.6.6 0 0 1 .818.001A5.5 5.5 0 0 0 22 14.5c0-2.29-1.5-4-3-5.5l-5.492-5.312a2 2 0 0 0-3-.02L5 8.999c-1.5 1.5-3 3.2-3 5.5" />`, opt)
}

// Sparkle renders the "sparkle" icon.
//
// Usage in templates:
//
//	{{ lucide "sparkle" }}
//
// Direct usage in Go:
//
//	lucide.Sparkle()
//	lucide.Sparkle(lucide.Options{Size: 32, Class: "my-icon"})
func Sparkle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.017 2.814a1 1 0 0 1 1.966 0l1.051 5.558a2 2 0 0 0 1.594 1.594l5.558 1.051a1 1 0 0 1 0 1.966l-5.558 1.051a2 2 0 0 0-1.594 1.594l-1.051 5.558a1 1 0 0 1-1.966 0l-1.051-5.558a2 2 0 0 0-1.594-1.594l-5.558-1.051a1 1 0 0 1 0-1.966l5.558-1.051a2 2 0 0 0 1.594-1.594z" />`, opt)
}

// Sparkles renders the "sparkles" icon.
//
// Usage in templates:
//
//	{{ lucide "sparkles" }}
//
// Direct usage in Go:
//
//	lucide.Sparkles()
//	lucide.Sparkles(lucide.Options{Size: 32, Class: "my-icon"})
func Sparkles(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.017 2.814a1 1 0 0 1 1.966 0l1.051 5.558a2 2 0 0 0 1.594 1.594l5.558 1.051a1 1 0 0 1 0 1.966l-5.558 1.051a2 2 0 0 0-1.594 1.594l-1.051 5.558a1 1 0 0 1-1.966 0l-1.051-5.558a2 2 0 0 0-1.594-1.594l-5.558-1.051a1 1 0 0 1 0-1.966l5.558-1.051a2 2 0 0 0 1.594-1.594z" /> <path d="M20 2v4" /> <path d="M22 4h-4" /> <circle cx="4" cy="20" r="2" />`, opt)
}

// Speaker renders the "speaker" icon.
//
// Usage in templates:
//
//	{{ lucide "speaker" }}
//
// Direct usage in Go:
//
//	lucide.Speaker()
//	lucide.Speaker(lucide.Options{Size: 32, Class: "my-icon"})
func Speaker(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="16" height="20" x="4" y="2" rx="2" /> <path d="M12 6h.01" /> <circle cx="12" cy="14" r="4" /> <path d="M12 14h.01" />`, opt)
}

// Speech renders the "speech" icon.
//
// Usage in templates:
//
//	{{ lucide "speech" }}
//
// Direct usage in Go:
//
//	lucide.Speech()
//	lucide.Speech(lucide.Options{Size: 32, Class: "my-icon"})
func Speech(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8.8 20v-4.1l1.9.2a2.3 2.3 0 0 0 2.164-2.1V8.3A5.37 5.37 0 0 0 2 8.25c0 2.8.656 3.054 1 4.55a5.77 5.77 0 0 1 .029 2.758L2 20" /> <path d="M19.8 17.8a7.5 7.5 0 0 0 .003-10.603" /> <path d="M17 15a3.5 3.5 0 0 0-.025-4.975" />`, opt)
}

// SpellCheck renders the "spell-check" icon.
//
// Usage in templates:
//
//	{{ lucide "spell-check" }}
//
// Direct usage in Go:
//
//	lucide.SpellCheck()
//	lucide.SpellCheck(lucide.Options{Size: 32, Class: "my-icon"})
func SpellCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m6 16 6-12 6 12" /> <path d="M8 12h8" /> <path d="m16 20 2 2 4-4" />`, opt)
}

// SpellCheck2 renders the "spell-check-2" icon.
//
// Usage in templates:
//
//	{{ lucide "spell-check-2" }}
//
// Direct usage in Go:
//
//	lucide.SpellCheck2()
//	lucide.SpellCheck2(lucide.Options{Size: 32, Class: "my-icon"})
func SpellCheck2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m6 16 6-12 6 12" /> <path d="M8 12h8" /> <path d="M4 21c1.1 0 1.1-1 2.3-1s1.1 1 2.3 1c1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1" />`, opt)
}

// Spline renders the "spline" icon.
//
// Usage in templates:
//
//	{{ lucide "spline" }}
//
// Direct usage in Go:
//
//	lucide.Spline()
//	lucide.Spline(lucide.Options{Size: 32, Class: "my-icon"})
func Spline(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="19" cy="5" r="2" /> <circle cx="5" cy="19" r="2" /> <path d="M5 17A12 12 0 0 1 17 5" />`, opt)
}

// SplinePointer renders the "spline-pointer" icon.
//
// Usage in templates:
//
//	{{ lucide "spline-pointer" }}
//
// Direct usage in Go:
//
//	lucide.SplinePointer()
//	lucide.SplinePointer(lucide.Options{Size: 32, Class: "my-icon"})
func SplinePointer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z" /> <path d="M5 17A12 12 0 0 1 17 5" /> <circle cx="19" cy="5" r="2" /> <circle cx="5" cy="19" r="2" />`, opt)
}

// Split renders the "split" icon.
//
// Usage in templates:
//
//	{{ lucide "split" }}
//
// Direct usage in Go:
//
//	lucide.Split()
//	lucide.Split(lucide.Options{Size: 32, Class: "my-icon"})
func Split(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 3h5v5" /> <path d="M8 3H3v5" /> <path d="M12 22v-8.3a4 4 0 0 0-1.172-2.872L3 3" /> <path d="m15 9 6-6" />`, opt)
}

// Spool renders the "spool" icon.
//
// Usage in templates:
//
//	{{ lucide "spool" }}
//
// Direct usage in Go:
//
//	lucide.Spool()
//	lucide.Spool(lucide.Options{Size: 32, Class: "my-icon"})
func Spool(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 13.44 4.442 17.082A2 2 0 0 0 4.982 21H19a2 2 0 0 0 .558-3.921l-1.115-.32A2 2 0 0 1 17 14.837V7.66" /> <path d="m7 10.56 12.558-3.642A2 2 0 0 0 19.018 3H5a2 2 0 0 0-.558 3.921l1.115.32A2 2 0 0 1 7 9.163v7.178" />`, opt)
}

// Spotlight renders the "spotlight" icon.
//
// Usage in templates:
//
//	{{ lucide "spotlight" }}
//
// Direct usage in Go:
//
//	lucide.Spotlight()
//	lucide.Spotlight(lucide.Options{Size: 32, Class: "my-icon"})
func Spotlight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.295 19.562 16 22" /> <path d="m17 16 3.758 2.098" /> <path d="m19 12.5 3.026-.598" /> <path d="M7.61 6.3a3 3 0 0 0-3.92 1.3l-1.38 2.79a3 3 0 0 0 1.3 3.91l6.89 3.597a1 1 0 0 0 1.342-.447l3.106-6.211a1 1 0 0 0-.447-1.341z" /> <path d="M8 9V2" />`, opt)
}

// SprayCan renders the "spray-can" icon.
//
// Usage in templates:
//
//	{{ lucide "spray-can" }}
//
// Direct usage in Go:
//
//	lucide.SprayCan()
//	lucide.SprayCan(lucide.Options{Size: 32, Class: "my-icon"})
func SprayCan(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 3h.01" /> <path d="M7 5h.01" /> <path d="M11 7h.01" /> <path d="M3 7h.01" /> <path d="M7 9h.01" /> <path d="M3 11h.01" /> <rect width="4" height="4" x="15" y="5" /> <path d="m19 9 2 2v10c0 .6-.4 1-1 1h-6c-.6 0-1-.4-1-1V11l2-2" /> <path d="m13 14 8-2" /> <path d="m13 19 8-2" />`, opt)
}

// Sprout renders the "sprout" icon.
//
// Usage in templates:
//
//	{{ lucide "sprout" }}
//
// Direct usage in Go:
//
//	lucide.Sprout()
//	lucide.Sprout(lucide.Options{Size: 32, Class: "my-icon"})
func Sprout(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 9.536V7a4 4 0 0 1 4-4h1.5a.5.5 0 0 1 .5.5V5a4 4 0 0 1-4 4 4 4 0 0 0-4 4c0 2 1 3 1 5a5 5 0 0 1-1 3" /> <path d="M4 9a5 5 0 0 1 8 4 5 5 0 0 1-8-4" /> <path d="M5 21h14" />`, opt)
}

// Square renders the "square" icon.
//
// Usage in templates:
//
//	{{ lucide "square" }}
//
// Direct usage in Go:
//
//	lucide.Square()
//	lucide.Square(lucide.Options{Size: 32, Class: "my-icon"})
func Square(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" />`, opt)
}

// SquareActivity renders the "square-activity" icon.
//
// Usage in templates:
//
//	{{ lucide "square-activity" }}
//
// Direct usage in Go:
//
//	lucide.SquareActivity()
//	lucide.SquareActivity(lucide.Options{Size: 32, Class: "my-icon"})
func SquareActivity(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M17 12h-2l-2 5-2-10-2 5H7" />`, opt)
}

// SquareArrowDown renders the "square-arrow-down" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-down" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowDown()
//	lucide.SquareArrowDown(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M12 8v8" /> <path d="m8 12 4 4 4-4" />`, opt)
}

// SquareArrowDownLeft renders the "square-arrow-down-left" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-down-left" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowDownLeft()
//	lucide.SquareArrowDownLeft(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowDownLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m16 8-8 8" /> <path d="M16 16H8V8" />`, opt)
}

// SquareArrowDownRight renders the "square-arrow-down-right" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-down-right" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowDownRight()
//	lucide.SquareArrowDownRight(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowDownRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m8 8 8 8" /> <path d="M16 8v8H8" />`, opt)
}

// SquareArrowLeft renders the "square-arrow-left" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-left" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowLeft()
//	lucide.SquareArrowLeft(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m12 8-4 4 4 4" /> <path d="M16 12H8" />`, opt)
}

// SquareArrowOutDownLeft renders the "square-arrow-out-down-left" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-out-down-left" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowOutDownLeft()
//	lucide.SquareArrowOutDownLeft(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowOutDownLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 21h6a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v6" /> <path d="m3 21 9-9" /> <path d="M9 21H3v-6" />`, opt)
}

// SquareArrowOutDownRight renders the "square-arrow-out-down-right" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-out-down-right" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowOutDownRight()
//	lucide.SquareArrowOutDownRight(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowOutDownRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6" /> <path d="m21 21-9-9" /> <path d="M21 15v6h-6" />`, opt)
}

// SquareArrowOutUpLeft renders the "square-arrow-out-up-left" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-out-up-left" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowOutUpLeft()
//	lucide.SquareArrowOutUpLeft(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowOutUpLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6" /> <path d="m3 3 9 9" /> <path d="M3 9V3h6" />`, opt)
}

// SquareArrowOutUpRight renders the "square-arrow-out-up-right" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-out-up-right" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowOutUpRight()
//	lucide.SquareArrowOutUpRight(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowOutUpRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h6" /> <path d="m21 3-9 9" /> <path d="M15 3h6v6" />`, opt)
}

// SquareArrowRight renders the "square-arrow-right" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-right" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowRight()
//	lucide.SquareArrowRight(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M8 12h8" /> <path d="m12 16 4-4-4-4" />`, opt)
}

// SquareArrowUp renders the "square-arrow-up" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-up" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowUp()
//	lucide.SquareArrowUp(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m16 12-4-4-4 4" /> <path d="M12 16V8" />`, opt)
}

// SquareArrowUpLeft renders the "square-arrow-up-left" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-up-left" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowUpLeft()
//	lucide.SquareArrowUpLeft(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowUpLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M8 16V8h8" /> <path d="M16 16 8 8" />`, opt)
}

// SquareArrowUpRight renders the "square-arrow-up-right" icon.
//
// Usage in templates:
//
//	{{ lucide "square-arrow-up-right" }}
//
// Direct usage in Go:
//
//	lucide.SquareArrowUpRight()
//	lucide.SquareArrowUpRight(lucide.Options{Size: 32, Class: "my-icon"})
func SquareArrowUpRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M8 8h8v8" /> <path d="m8 16 8-8" />`, opt)
}

// SquareAsterisk renders the "square-asterisk" icon.
//
// Usage in templates:
//
//	{{ lucide "square-asterisk" }}
//
// Direct usage in Go:
//
//	lucide.SquareAsterisk()
//	lucide.SquareAsterisk(lucide.Options{Size: 32, Class: "my-icon"})
func SquareAsterisk(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M12 8v8" /> <path d="m8.5 14 7-4" /> <path d="m8.5 10 7 4" />`, opt)
}

// SquareBottomDashedScissors renders the "square-bottom-dashed-scissors" icon.
//
// Usage in templates:
//
//	{{ lucide "square-bottom-dashed-scissors" }}
//
// Direct usage in Go:
//
//	lucide.SquareBottomDashedScissors()
//	lucide.SquareBottomDashedScissors(lucide.Options{Size: 32, Class: "my-icon"})
func SquareBottomDashedScissors(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 22a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2" /> <path d="M10 22H8" /> <path d="M16 22h-2" /> <circle cx="8" cy="8" r="2" /> <path d="M9.414 9.414 12 12" /> <path d="M14.8 14.8 18 18" /> <circle cx="8" cy="16" r="2" /> <path d="m18 6-8.586 8.586" />`, opt)
}

// SquareChartGantt renders the "square-chart-gantt" icon.
//
// Usage in templates:
//
//	{{ lucide "square-chart-gantt" }}
//
// Direct usage in Go:
//
//	lucide.SquareChartGantt()
//	lucide.SquareChartGantt(lucide.Options{Size: 32, Class: "my-icon"})
func SquareChartGantt(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M9 8h7" /> <path d="M8 12h6" /> <path d="M11 16h5" />`, opt)
}

// SquareCheck renders the "square-check" icon.
//
// Usage in templates:
//
//	{{ lucide "square-check" }}
//
// Direct usage in Go:
//
//	lucide.SquareCheck()
//	lucide.SquareCheck(lucide.Options{Size: 32, Class: "my-icon"})
func SquareCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m9 12 2 2 4-4" />`, opt)
}

// SquareCheckBig renders the "square-check-big" icon.
//
// Usage in templates:
//
//	{{ lucide "square-check-big" }}
//
// Direct usage in Go:
//
//	lucide.SquareCheckBig()
//	lucide.SquareCheckBig(lucide.Options{Size: 32, Class: "my-icon"})
func SquareCheckBig(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 10.656V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h12.344" /> <path d="m9 11 3 3L22 4" />`, opt)
}

// SquareChevronDown renders the "square-chevron-down" icon.
//
// Usage in templates:
//
//	{{ lucide "square-chevron-down" }}
//
// Direct usage in Go:
//
//	lucide.SquareChevronDown()
//	lucide.SquareChevronDown(lucide.Options{Size: 32, Class: "my-icon"})
func SquareChevronDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m16 10-4 4-4-4" />`, opt)
}

// SquareChevronLeft renders the "square-chevron-left" icon.
//
// Usage in templates:
//
//	{{ lucide "square-chevron-left" }}
//
// Direct usage in Go:
//
//	lucide.SquareChevronLeft()
//	lucide.SquareChevronLeft(lucide.Options{Size: 32, Class: "my-icon"})
func SquareChevronLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m14 16-4-4 4-4" />`, opt)
}

// SquareChevronRight renders the "square-chevron-right" icon.
//
// Usage in templates:
//
//	{{ lucide "square-chevron-right" }}
//
// Direct usage in Go:
//
//	lucide.SquareChevronRight()
//	lucide.SquareChevronRight(lucide.Options{Size: 32, Class: "my-icon"})
func SquareChevronRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m10 8 4 4-4 4" />`, opt)
}

// SquareChevronUp renders the "square-chevron-up" icon.
//
// Usage in templates:
//
//	{{ lucide "square-chevron-up" }}
//
// Direct usage in Go:
//
//	lucide.SquareChevronUp()
//	lucide.SquareChevronUp(lucide.Options{Size: 32, Class: "my-icon"})
func SquareChevronUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m8 14 4-4 4 4" />`, opt)
}

// SquareCode renders the "square-code" icon.
//
// Usage in templates:
//
//	{{ lucide "square-code" }}
//
// Direct usage in Go:
//
//	lucide.SquareCode()
//	lucide.SquareCode(lucide.Options{Size: 32, Class: "my-icon"})
func SquareCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 9-3 3 3 3" /> <path d="m14 15 3-3-3-3" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// SquareDashed renders the "square-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "square-dashed" }}
//
// Direct usage in Go:
//
//	lucide.SquareDashed()
//	lucide.SquareDashed(lucide.Options{Size: 32, Class: "my-icon"})
func SquareDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 3a2 2 0 0 0-2 2" /> <path d="M19 3a2 2 0 0 1 2 2" /> <path d="M21 19a2 2 0 0 1-2 2" /> <path d="M5 21a2 2 0 0 1-2-2" /> <path d="M9 3h1" /> <path d="M9 21h1" /> <path d="M14 3h1" /> <path d="M14 21h1" /> <path d="M3 9v1" /> <path d="M21 9v1" /> <path d="M3 14v1" /> <path d="M21 14v1" />`, opt)
}

// SquareDashedBottom renders the "square-dashed-bottom" icon.
//
// Usage in templates:
//
//	{{ lucide "square-dashed-bottom" }}
//
// Direct usage in Go:
//
//	lucide.SquareDashedBottom()
//	lucide.SquareDashedBottom(lucide.Options{Size: 32, Class: "my-icon"})
func SquareDashedBottom(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2" /> <path d="M9 21h1" /> <path d="M14 21h1" />`, opt)
}

// SquareDashedBottomCode renders the "square-dashed-bottom-code" icon.
//
// Usage in templates:
//
//	{{ lucide "square-dashed-bottom-code" }}
//
// Direct usage in Go:
//
//	lucide.SquareDashedBottomCode()
//	lucide.SquareDashedBottomCode(lucide.Options{Size: 32, Class: "my-icon"})
func SquareDashedBottomCode(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 9.5 8 12l2 2.5" /> <path d="M14 21h1" /> <path d="m14 9.5 2 2.5-2 2.5" /> <path d="M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2" /> <path d="M9 21h1" />`, opt)
}

// SquareDashedKanban renders the "square-dashed-kanban" icon.
//
// Usage in templates:
//
//	{{ lucide "square-dashed-kanban" }}
//
// Direct usage in Go:
//
//	lucide.SquareDashedKanban()
//	lucide.SquareDashedKanban(lucide.Options{Size: 32, Class: "my-icon"})
func SquareDashedKanban(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 7v7" /> <path d="M12 7v4" /> <path d="M16 7v9" /> <path d="M5 3a2 2 0 0 0-2 2" /> <path d="M9 3h1" /> <path d="M14 3h1" /> <path d="M19 3a2 2 0 0 1 2 2" /> <path d="M21 9v1" /> <path d="M21 14v1" /> <path d="M21 19a2 2 0 0 1-2 2" /> <path d="M14 21h1" /> <path d="M9 21h1" /> <path d="M5 21a2 2 0 0 1-2-2" /> <path d="M3 14v1" /> <path d="M3 9v1" />`, opt)
}

// SquareDashedMousePointer renders the "square-dashed-mouse-pointer" icon.
//
// Usage in templates:
//
//	{{ lucide "square-dashed-mouse-pointer" }}
//
// Direct usage in Go:
//
//	lucide.SquareDashedMousePointer()
//	lucide.SquareDashedMousePointer(lucide.Options{Size: 32, Class: "my-icon"})
func SquareDashedMousePointer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z" /> <path d="M5 3a2 2 0 0 0-2 2" /> <path d="M19 3a2 2 0 0 1 2 2" /> <path d="M5 21a2 2 0 0 1-2-2" /> <path d="M9 3h1" /> <path d="M9 21h2" /> <path d="M14 3h1" /> <path d="M3 9v1" /> <path d="M21 9v2" /> <path d="M3 14v1" />`, opt)
}

// SquareDashedTopSolid renders the "square-dashed-top-solid" icon.
//
// Usage in templates:
//
//	{{ lucide "square-dashed-top-solid" }}
//
// Direct usage in Go:
//
//	lucide.SquareDashedTopSolid()
//	lucide.SquareDashedTopSolid(lucide.Options{Size: 32, Class: "my-icon"})
func SquareDashedTopSolid(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 21h1" /> <path d="M21 14v1" /> <path d="M21 19a2 2 0 0 1-2 2" /> <path d="M21 9v1" /> <path d="M3 14v1" /> <path d="M3 5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2" /> <path d="M3 9v1" /> <path d="M5 21a2 2 0 0 1-2-2" /> <path d="M9 21h1" />`, opt)
}

// SquareDivide renders the "square-divide" icon.
//
// Usage in templates:
//
//	{{ lucide "square-divide" }}
//
// Direct usage in Go:
//
//	lucide.SquareDivide()
//	lucide.SquareDivide(lucide.Options{Size: 32, Class: "my-icon"})
func SquareDivide(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <line x1="8" x2="16" y1="12" y2="12" /> <line x1="12" x2="12" y1="16" y2="16" /> <line x1="12" x2="12" y1="8" y2="8" />`, opt)
}

// SquareDot renders the "square-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "square-dot" }}
//
// Direct usage in Go:
//
//	lucide.SquareDot()
//	lucide.SquareDot(lucide.Options{Size: 32, Class: "my-icon"})
func SquareDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <circle cx="12" cy="12" r="1" />`, opt)
}

// SquareEqual renders the "square-equal" icon.
//
// Usage in templates:
//
//	{{ lucide "square-equal" }}
//
// Direct usage in Go:
//
//	lucide.SquareEqual()
//	lucide.SquareEqual(lucide.Options{Size: 32, Class: "my-icon"})
func SquareEqual(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M7 10h10" /> <path d="M7 14h10" />`, opt)
}

// SquareFunction renders the "square-function" icon.
//
// Usage in templates:
//
//	{{ lucide "square-function" }}
//
// Direct usage in Go:
//
//	lucide.SquareFunction()
//	lucide.SquareFunction(lucide.Options{Size: 32, Class: "my-icon"})
func SquareFunction(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <path d="M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3" /> <path d="M9 11.2h5.7" />`, opt)
}

// SquareKanban renders the "square-kanban" icon.
//
// Usage in templates:
//
//	{{ lucide "square-kanban" }}
//
// Direct usage in Go:
//
//	lucide.SquareKanban()
//	lucide.SquareKanban(lucide.Options{Size: 32, Class: "my-icon"})
func SquareKanban(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M8 7v7" /> <path d="M12 7v4" /> <path d="M16 7v9" />`, opt)
}

// SquareLibrary renders the "square-library" icon.
//
// Usage in templates:
//
//	{{ lucide "square-library" }}
//
// Direct usage in Go:
//
//	lucide.SquareLibrary()
//	lucide.SquareLibrary(lucide.Options{Size: 32, Class: "my-icon"})
func SquareLibrary(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M7 7v10" /> <path d="M11 7v10" /> <path d="m15 7 2 10" />`, opt)
}

// SquareM renders the "square-m" icon.
//
// Usage in templates:
//
//	{{ lucide "square-m" }}
//
// Direct usage in Go:
//
//	lucide.SquareM()
//	lucide.SquareM(lucide.Options{Size: 32, Class: "my-icon"})
func SquareM(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 16V8.5a.5.5 0 0 1 .9-.3l2.7 3.599a.5.5 0 0 0 .8 0l2.7-3.6a.5.5 0 0 1 .9.3V16" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// SquareMenu renders the "square-menu" icon.
//
// Usage in templates:
//
//	{{ lucide "square-menu" }}
//
// Direct usage in Go:
//
//	lucide.SquareMenu()
//	lucide.SquareMenu(lucide.Options{Size: 32, Class: "my-icon"})
func SquareMenu(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M7 8h10" /> <path d="M7 12h10" /> <path d="M7 16h10" />`, opt)
}

// SquareMinus renders the "square-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "square-minus" }}
//
// Direct usage in Go:
//
//	lucide.SquareMinus()
//	lucide.SquareMinus(lucide.Options{Size: 32, Class: "my-icon"})
func SquareMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M8 12h8" />`, opt)
}

// SquareMousePointer renders the "square-mouse-pointer" icon.
//
// Usage in templates:
//
//	{{ lucide "square-mouse-pointer" }}
//
// Direct usage in Go:
//
//	lucide.SquareMousePointer()
//	lucide.SquareMousePointer(lucide.Options{Size: 32, Class: "my-icon"})
func SquareMousePointer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z" /> <path d="M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6" />`, opt)
}

// SquareParking renders the "square-parking" icon.
//
// Usage in templates:
//
//	{{ lucide "square-parking" }}
//
// Direct usage in Go:
//
//	lucide.SquareParking()
//	lucide.SquareParking(lucide.Options{Size: 32, Class: "my-icon"})
func SquareParking(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M9 17V7h4a3 3 0 0 1 0 6H9" />`, opt)
}

// SquareParkingOff renders the "square-parking-off" icon.
//
// Usage in templates:
//
//	{{ lucide "square-parking-off" }}
//
// Direct usage in Go:
//
//	lucide.SquareParkingOff()
//	lucide.SquareParkingOff(lucide.Options{Size: 32, Class: "my-icon"})
func SquareParkingOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.6 3.6A2 2 0 0 1 5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-.59 1.41" /> <path d="M3 8.7V19a2 2 0 0 0 2 2h10.3" /> <path d="m2 2 20 20" /> <path d="M13 13a3 3 0 1 0 0-6H9v2" /> <path d="M9 17v-2.3" />`, opt)
}

// SquarePause renders the "square-pause" icon.
//
// Usage in templates:
//
//	{{ lucide "square-pause" }}
//
// Direct usage in Go:
//
//	lucide.SquarePause()
//	lucide.SquarePause(lucide.Options{Size: 32, Class: "my-icon"})
func SquarePause(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <line x1="10" x2="10" y1="15" y2="9" /> <line x1="14" x2="14" y1="15" y2="9" />`, opt)
}

// SquarePen renders the "square-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "square-pen" }}
//
// Direct usage in Go:
//
//	lucide.SquarePen()
//	lucide.SquarePen(lucide.Options{Size: 32, Class: "my-icon"})
func SquarePen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" /> <path d="M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z" />`, opt)
}

// SquarePercent renders the "square-percent" icon.
//
// Usage in templates:
//
//	{{ lucide "square-percent" }}
//
// Direct usage in Go:
//
//	lucide.SquarePercent()
//	lucide.SquarePercent(lucide.Options{Size: 32, Class: "my-icon"})
func SquarePercent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="m15 9-6 6" /> <path d="M9 9h.01" /> <path d="M15 15h.01" />`, opt)
}

// SquarePi renders the "square-pi" icon.
//
// Usage in templates:
//
//	{{ lucide "square-pi" }}
//
// Direct usage in Go:
//
//	lucide.SquarePi()
//	lucide.SquarePi(lucide.Options{Size: 32, Class: "my-icon"})
func SquarePi(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M7 7h10" /> <path d="M10 7v10" /> <path d="M16 17a2 2 0 0 1-2-2V7" />`, opt)
}

// SquarePilcrow renders the "square-pilcrow" icon.
//
// Usage in templates:
//
//	{{ lucide "square-pilcrow" }}
//
// Direct usage in Go:
//
//	lucide.SquarePilcrow()
//	lucide.SquarePilcrow(lucide.Options{Size: 32, Class: "my-icon"})
func SquarePilcrow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M12 12H9.5a2.5 2.5 0 0 1 0-5H17" /> <path d="M12 7v10" /> <path d="M16 7v10" />`, opt)
}

// SquarePlay renders the "square-play" icon.
//
// Usage in templates:
//
//	{{ lucide "square-play" }}
//
// Direct usage in Go:
//
//	lucide.SquarePlay()
//	lucide.SquarePlay(lucide.Options{Size: 32, Class: "my-icon"})
func SquarePlay(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="3" y="3" width="18" height="18" rx="2" /> <path d="M9 9.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997A1 1 0 0 1 9 14.996z" />`, opt)
}

// SquarePlus renders the "square-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "square-plus" }}
//
// Direct usage in Go:
//
//	lucide.SquarePlus()
//	lucide.SquarePlus(lucide.Options{Size: 32, Class: "my-icon"})
func SquarePlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M8 12h8" /> <path d="M12 8v8" />`, opt)
}

// SquarePower renders the "square-power" icon.
//
// Usage in templates:
//
//	{{ lucide "square-power" }}
//
// Direct usage in Go:
//
//	lucide.SquarePower()
//	lucide.SquarePower(lucide.Options{Size: 32, Class: "my-icon"})
func SquarePower(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 7v4" /> <path d="M7.998 9.003a5 5 0 1 0 8-.005" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// SquareRadical renders the "square-radical" icon.
//
// Usage in templates:
//
//	{{ lucide "square-radical" }}
//
// Direct usage in Go:
//
//	lucide.SquareRadical()
//	lucide.SquareRadical(lucide.Options{Size: 32, Class: "my-icon"})
func SquareRadical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 12h2l2 5 2-10h4" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// SquareRoundCorner renders the "square-round-corner" icon.
//
// Usage in templates:
//
//	{{ lucide "square-round-corner" }}
//
// Direct usage in Go:
//
//	lucide.SquareRoundCorner()
//	lucide.SquareRoundCorner(lucide.Options{Size: 32, Class: "my-icon"})
func SquareRoundCorner(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 11a8 8 0 0 0-8-8" /> <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />`, opt)
}

// SquareScissors renders the "square-scissors" icon.
//
// Usage in templates:
//
//	{{ lucide "square-scissors" }}
//
// Direct usage in Go:
//
//	lucide.SquareScissors()
//	lucide.SquareScissors(lucide.Options{Size: 32, Class: "my-icon"})
func SquareScissors(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="20" x="2" y="2" rx="2" /> <circle cx="8" cy="8" r="2" /> <path d="M9.414 9.414 12 12" /> <path d="M14.8 14.8 18 18" /> <circle cx="8" cy="16" r="2" /> <path d="m18 6-8.586 8.586" />`, opt)
}

// SquareSigma renders the "square-sigma" icon.
//
// Usage in templates:
//
//	{{ lucide "square-sigma" }}
//
// Direct usage in Go:
//
//	lucide.SquareSigma()
//	lucide.SquareSigma(lucide.Options{Size: 32, Class: "my-icon"})
func SquareSigma(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M16 8.9V7H8l4 5-4 5h8v-1.9" />`, opt)
}

// SquareSlash renders the "square-slash" icon.
//
// Usage in templates:
//
//	{{ lucide "square-slash" }}
//
// Direct usage in Go:
//
//	lucide.SquareSlash()
//	lucide.SquareSlash(lucide.Options{Size: 32, Class: "my-icon"})
func SquareSlash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <line x1="9" x2="15" y1="15" y2="9" />`, opt)
}

// SquareSplitHorizontal renders the "square-split-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "square-split-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.SquareSplitHorizontal()
//	lucide.SquareSplitHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func SquareSplitHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3" /> <path d="M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3" /> <line x1="12" x2="12" y1="4" y2="20" />`, opt)
}

// SquareSplitVertical renders the "square-split-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "square-split-vertical" }}
//
// Direct usage in Go:
//
//	lucide.SquareSplitVertical()
//	lucide.SquareSplitVertical(lucide.Options{Size: 32, Class: "my-icon"})
func SquareSplitVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3" /> <path d="M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3" /> <line x1="4" x2="20" y1="12" y2="12" />`, opt)
}

// SquareSquare renders the "square-square" icon.
//
// Usage in templates:
//
//	{{ lucide "square-square" }}
//
// Direct usage in Go:
//
//	lucide.SquareSquare()
//	lucide.SquareSquare(lucide.Options{Size: 32, Class: "my-icon"})
func SquareSquare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect x="3" y="3" width="18" height="18" rx="2" /> <rect x="8" y="8" width="8" height="8" rx="1" />`, opt)
}

// SquareStack renders the "square-stack" icon.
//
// Usage in templates:
//
//	{{ lucide "square-stack" }}
//
// Direct usage in Go:
//
//	lucide.SquareStack()
//	lucide.SquareStack(lucide.Options{Size: 32, Class: "my-icon"})
func SquareStack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 10c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2" /> <path d="M10 16c-1.1 0-2-.9-2-2v-4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2" /> <rect width="8" height="8" x="14" y="14" rx="2" />`, opt)
}

// SquareStar renders the "square-star" icon.
//
// Usage in templates:
//
//	{{ lucide "square-star" }}
//
// Direct usage in Go:
//
//	lucide.SquareStar()
//	lucide.SquareStar(lucide.Options{Size: 32, Class: "my-icon"})
func SquareStar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.035 7.69a1 1 0 0 1 1.909.024l.737 1.452a1 1 0 0 0 .737.535l1.634.256a1 1 0 0 1 .588 1.806l-1.172 1.168a1 1 0 0 0-.282.866l.259 1.613a1 1 0 0 1-1.541 1.134l-1.465-.75a1 1 0 0 0-.912 0l-1.465.75a1 1 0 0 1-1.539-1.133l.258-1.613a1 1 0 0 0-.282-.866l-1.156-1.153a1 1 0 0 1 .572-1.822l1.633-.256a1 1 0 0 0 .737-.535z" /> <rect x="3" y="3" width="18" height="18" rx="2" />`, opt)
}

// SquareStop renders the "square-stop" icon.
//
// Usage in templates:
//
//	{{ lucide "square-stop" }}
//
// Direct usage in Go:
//
//	lucide.SquareStop()
//	lucide.SquareStop(lucide.Options{Size: 32, Class: "my-icon"})
func SquareStop(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <rect x="9" y="9" width="6" height="6" rx="1" />`, opt)
}

// SquareTerminal renders the "square-terminal" icon.
//
// Usage in templates:
//
//	{{ lucide "square-terminal" }}
//
// Direct usage in Go:
//
//	lucide.SquareTerminal()
//	lucide.SquareTerminal(lucide.Options{Size: 32, Class: "my-icon"})
func SquareTerminal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m7 11 2-2-2-2" /> <path d="M11 13h4" /> <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />`, opt)
}

// SquareUser renders the "square-user" icon.
//
// Usage in templates:
//
//	{{ lucide "square-user" }}
//
// Direct usage in Go:
//
//	lucide.SquareUser()
//	lucide.SquareUser(lucide.Options{Size: 32, Class: "my-icon"})
func SquareUser(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <circle cx="12" cy="10" r="3" /> <path d="M7 21v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2" />`, opt)
}

// SquareUserRound renders the "square-user-round" icon.
//
// Usage in templates:
//
//	{{ lucide "square-user-round" }}
//
// Direct usage in Go:
//
//	lucide.SquareUserRound()
//	lucide.SquareUserRound(lucide.Options{Size: 32, Class: "my-icon"})
func SquareUserRound(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 21a6 6 0 0 0-12 0" /> <circle cx="12" cy="11" r="4" /> <rect width="18" height="18" x="3" y="3" rx="2" />`, opt)
}

// SquareX renders the "square-x" icon.
//
// Usage in templates:
//
//	{{ lucide "square-x" }}
//
// Direct usage in Go:
//
//	lucide.SquareX()
//	lucide.SquareX(lucide.Options{Size: 32, Class: "my-icon"})
func SquareX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <path d="m15 9-6 6" /> <path d="m9 9 6 6" />`, opt)
}

// SquaresExclude renders the "squares-exclude" icon.
//
// Usage in templates:
//
//	{{ lucide "squares-exclude" }}
//
// Direct usage in Go:
//
//	lucide.SquaresExclude()
//	lucide.SquaresExclude(lucide.Options{Size: 32, Class: "my-icon"})
func SquaresExclude(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 12v2a2 2 0 0 1-2 2H9a1 1 0 0 0-1 1v3a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2h0" /> <path d="M4 16a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v3a1 1 0 0 1-1 1h-5a2 2 0 0 0-2 2v2" />`, opt)
}

// SquaresIntersect renders the "squares-intersect" icon.
//
// Usage in templates:
//
//	{{ lucide "squares-intersect" }}
//
// Direct usage in Go:
//
//	lucide.SquaresIntersect()
//	lucide.SquaresIntersect(lucide.Options{Size: 32, Class: "my-icon"})
func SquaresIntersect(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 22a2 2 0 0 1-2-2" /> <path d="M14 2a2 2 0 0 1 2 2" /> <path d="M16 22h-2" /> <path d="M2 10V8" /> <path d="M2 4a2 2 0 0 1 2-2" /> <path d="M20 8a2 2 0 0 1 2 2" /> <path d="M22 14v2" /> <path d="M22 20a2 2 0 0 1-2 2" /> <path d="M4 16a2 2 0 0 1-2-2" /> <path d="M8 10a2 2 0 0 1 2-2h5a1 1 0 0 1 1 1v5a2 2 0 0 1-2 2H9a1 1 0 0 1-1-1z" /> <path d="M8 2h2" />`, opt)
}

// SquaresSubtract renders the "squares-subtract" icon.
//
// Usage in templates:
//
//	{{ lucide "squares-subtract" }}
//
// Direct usage in Go:
//
//	lucide.SquaresSubtract()
//	lucide.SquaresSubtract(lucide.Options{Size: 32, Class: "my-icon"})
func SquaresSubtract(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 22a2 2 0 0 1-2-2" /> <path d="M16 22h-2" /> <path d="M16 4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-5a2 2 0 0 1 2-2h5a1 1 0 0 0 1-1z" /> <path d="M20 8a2 2 0 0 1 2 2" /> <path d="M22 14v2" /> <path d="M22 20a2 2 0 0 1-2 2" />`, opt)
}

// SquaresUnite renders the "squares-unite" icon.
//
// Usage in templates:
//
//	{{ lucide "squares-unite" }}
//
// Direct usage in Go:
//
//	lucide.SquaresUnite()
//	lucide.SquaresUnite(lucide.Options{Size: 32, Class: "my-icon"})
func SquaresUnite(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 16a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v3a1 1 0 0 0 1 1h3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H10a2 2 0 0 1-2-2v-3a1 1 0 0 0-1-1z" />`, opt)
}

// Squircle renders the "squircle" icon.
//
// Usage in templates:
//
//	{{ lucide "squircle" }}
//
// Direct usage in Go:
//
//	lucide.Squircle()
//	lucide.Squircle(lucide.Options{Size: 32, Class: "my-icon"})
func Squircle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3c7.2 0 9 1.8 9 9s-1.8 9-9 9-9-1.8-9-9 1.8-9 9-9" />`, opt)
}

// SquircleDashed renders the "squircle-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "squircle-dashed" }}
//
// Direct usage in Go:
//
//	lucide.SquircleDashed()
//	lucide.SquircleDashed(lucide.Options{Size: 32, Class: "my-icon"})
func SquircleDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.77 3.043a34 34 0 0 0-3.54 0" /> <path d="M13.771 20.956a33 33 0 0 1-3.541.001" /> <path d="M20.18 17.74c-.51 1.15-1.29 1.93-2.439 2.44" /> <path d="M20.18 6.259c-.51-1.148-1.291-1.929-2.44-2.438" /> <path d="M20.957 10.23a33 33 0 0 1 0 3.54" /> <path d="M3.043 10.23a34 34 0 0 0 .001 3.541" /> <path d="M6.26 20.179c-1.15-.508-1.93-1.29-2.44-2.438" /> <path d="M6.26 3.82c-1.149.51-1.93 1.291-2.44 2.44" />`, opt)
}

// Squirrel renders the "squirrel" icon.
//
// Usage in templates:
//
//	{{ lucide "squirrel" }}
//
// Direct usage in Go:
//
//	lucide.Squirrel()
//	lucide.Squirrel(lucide.Options{Size: 32, Class: "my-icon"})
func Squirrel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.236 22a3 3 0 0 0-2.2-5" /> <path d="M16 20a3 3 0 0 1 3-3h1a2 2 0 0 0 2-2v-2a4 4 0 0 0-4-4V4" /> <path d="M18 13h.01" /> <path d="M18 6a4 4 0 0 0-4 4 7 7 0 0 0-7 7c0-5 4-5 4-10.5a4.5 4.5 0 1 0-9 0 2.5 2.5 0 0 0 5 0C7 10 3 11 3 17c0 2.8 2.2 5 5 5h10" />`, opt)
}

// Stamp renders the "stamp" icon.
//
// Usage in templates:
//
//	{{ lucide "stamp" }}
//
// Direct usage in Go:
//
//	lucide.Stamp()
//	lucide.Stamp(lucide.Options{Size: 32, Class: "my-icon"})
func Stamp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-6 0c0 2 1 2 1 3.5V13" /> <path d="M20 15.5a2.5 2.5 0 0 0-2.5-2.5h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1z" /> <path d="M5 22h14" />`, opt)
}

// Star renders the "star" icon.
//
// Usage in templates:
//
//	{{ lucide "star" }}
//
// Direct usage in Go:
//
//	lucide.Star()
//	lucide.Star(lucide.Options{Size: 32, Class: "my-icon"})
func Star(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z" />`, opt)
}

// StarHalf renders the "star-half" icon.
//
// Usage in templates:
//
//	{{ lucide "star-half" }}
//
// Direct usage in Go:
//
//	lucide.StarHalf()
//	lucide.StarHalf(lucide.Options{Size: 32, Class: "my-icon"})
func StarHalf(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 18.338a2.1 2.1 0 0 0-.987.244L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.12 2.12 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.12 2.12 0 0 0 1.597-1.16l2.309-4.679A.53.53 0 0 1 12 2" />`, opt)
}

// StarOff renders the "star-off" icon.
//
// Usage in templates:
//
//	{{ lucide "star-off" }}
//
// Direct usage in Go:
//
//	lucide.StarOff()
//	lucide.StarOff(lucide.Options{Size: 32, Class: "my-icon"})
func StarOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43" /> <path d="M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// StepBack renders the "step-back" icon.
//
// Usage in templates:
//
//	{{ lucide "step-back" }}
//
// Direct usage in Go:
//
//	lucide.StepBack()
//	lucide.StepBack(lucide.Options{Size: 32, Class: "my-icon"})
func StepBack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.971 4.285A2 2 0 0 1 17 6v12a2 2 0 0 1-3.029 1.715l-9.997-5.998a2 2 0 0 1-.003-3.432z" /> <path d="M21 20V4" />`, opt)
}

// StepForward renders the "step-forward" icon.
//
// Usage in templates:
//
//	{{ lucide "step-forward" }}
//
// Direct usage in Go:
//
//	lucide.StepForward()
//	lucide.StepForward(lucide.Options{Size: 32, Class: "my-icon"})
func StepForward(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.029 4.285A2 2 0 0 0 7 6v12a2 2 0 0 0 3.029 1.715l9.997-5.998a2 2 0 0 0 .003-3.432z" /> <path d="M3 4v16" />`, opt)
}

// Stethoscope renders the "stethoscope" icon.
//
// Usage in templates:
//
//	{{ lucide "stethoscope" }}
//
// Direct usage in Go:
//
//	lucide.Stethoscope()
//	lucide.Stethoscope(lucide.Options{Size: 32, Class: "my-icon"})
func Stethoscope(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 2v2" /> <path d="M5 2v2" /> <path d="M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1" /> <path d="M8 15a6 6 0 0 0 12 0v-3" /> <circle cx="20" cy="10" r="2" />`, opt)
}

// Sticker renders the "sticker" icon.
//
// Usage in templates:
//
//	{{ lucide "sticker" }}
//
// Direct usage in Go:
//
//	lucide.Sticker()
//	lucide.Sticker(lucide.Options{Size: 32, Class: "my-icon"})
func Sticker(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z" /> <path d="M14 3v4a2 2 0 0 0 2 2h4" /> <path d="M8 13h.01" /> <path d="M16 13h.01" /> <path d="M10 16s.8 1 2 1c1.3 0 2-1 2-1" />`, opt)
}

// StickyNote renders the "sticky-note" icon.
//
// Usage in templates:
//
//	{{ lucide "sticky-note" }}
//
// Direct usage in Go:
//
//	lucide.StickyNote()
//	lucide.StickyNote(lucide.Options{Size: 32, Class: "my-icon"})
func StickyNote(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8Z" /> <path d="M15 3v4a2 2 0 0 0 2 2h4" />`, opt)
}

// Store renders the "store" icon.
//
// Usage in templates:
//
//	{{ lucide "store" }}
//
// Direct usage in Go:
//
//	lucide.Store()
//	lucide.Store(lucide.Options{Size: 32, Class: "my-icon"})
func Store(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 21v-5a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v5" /> <path d="M17.774 10.31a1.12 1.12 0 0 0-1.549 0 2.5 2.5 0 0 1-3.451 0 1.12 1.12 0 0 0-1.548 0 2.5 2.5 0 0 1-3.452 0 1.12 1.12 0 0 0-1.549 0 2.5 2.5 0 0 1-3.77-3.248l2.889-4.184A2 2 0 0 1 7 2h10a2 2 0 0 1 1.653.873l2.895 4.192a2.5 2.5 0 0 1-3.774 3.244" /> <path d="M4 10.95V19a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8.05" />`, opt)
}

// StretchHorizontal renders the "stretch-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "stretch-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.StretchHorizontal()
//	lucide.StretchHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func StretchHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="6" x="2" y="4" rx="2" /> <rect width="20" height="6" x="2" y="14" rx="2" />`, opt)
}

// StretchVertical renders the "stretch-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "stretch-vertical" }}
//
// Direct usage in Go:
//
//	lucide.StretchVertical()
//	lucide.StretchVertical(lucide.Options{Size: 32, Class: "my-icon"})
func StretchVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="6" height="20" x="4" y="2" rx="2" /> <rect width="6" height="20" x="14" y="2" rx="2" />`, opt)
}

// Strikethrough renders the "strikethrough" icon.
//
// Usage in templates:
//
//	{{ lucide "strikethrough" }}
//
// Direct usage in Go:
//
//	lucide.Strikethrough()
//	lucide.Strikethrough(lucide.Options{Size: 32, Class: "my-icon"})
func Strikethrough(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 4H9a3 3 0 0 0-2.83 4" /> <path d="M14 12a4 4 0 0 1 0 8H6" /> <line x1="4" x2="20" y1="12" y2="12" />`, opt)
}

// Subscript renders the "subscript" icon.
//
// Usage in templates:
//
//	{{ lucide "subscript" }}
//
// Direct usage in Go:
//
//	lucide.Subscript()
//	lucide.Subscript(lucide.Options{Size: 32, Class: "my-icon"})
func Subscript(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m4 5 8 8" /> <path d="m12 5-8 8" /> <path d="M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07" />`, opt)
}

// Sun renders the "sun" icon.
//
// Usage in templates:
//
//	{{ lucide "sun" }}
//
// Direct usage in Go:
//
//	lucide.Sun()
//	lucide.Sun(lucide.Options{Size: 32, Class: "my-icon"})
func Sun(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="4" /> <path d="M12 2v2" /> <path d="M12 20v2" /> <path d="m4.93 4.93 1.41 1.41" /> <path d="m17.66 17.66 1.41 1.41" /> <path d="M2 12h2" /> <path d="M20 12h2" /> <path d="m6.34 17.66-1.41 1.41" /> <path d="m19.07 4.93-1.41 1.41" />`, opt)
}

// SunDim renders the "sun-dim" icon.
//
// Usage in templates:
//
//	{{ lucide "sun-dim" }}
//
// Direct usage in Go:
//
//	lucide.SunDim()
//	lucide.SunDim(lucide.Options{Size: 32, Class: "my-icon"})
func SunDim(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="4" /> <path d="M12 4h.01" /> <path d="M20 12h.01" /> <path d="M12 20h.01" /> <path d="M4 12h.01" /> <path d="M17.657 6.343h.01" /> <path d="M17.657 17.657h.01" /> <path d="M6.343 17.657h.01" /> <path d="M6.343 6.343h.01" />`, opt)
}

// SunMedium renders the "sun-medium" icon.
//
// Usage in templates:
//
//	{{ lucide "sun-medium" }}
//
// Direct usage in Go:
//
//	lucide.SunMedium()
//	lucide.SunMedium(lucide.Options{Size: 32, Class: "my-icon"})
func SunMedium(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="4" /> <path d="M12 3v1" /> <path d="M12 20v1" /> <path d="M3 12h1" /> <path d="M20 12h1" /> <path d="m18.364 5.636-.707.707" /> <path d="m6.343 17.657-.707.707" /> <path d="m5.636 5.636.707.707" /> <path d="m17.657 17.657.707.707" />`, opt)
}

// SunMoon renders the "sun-moon" icon.
//
// Usage in templates:
//
//	{{ lucide "sun-moon" }}
//
// Direct usage in Go:
//
//	lucide.SunMoon()
//	lucide.SunMoon(lucide.Options{Size: 32, Class: "my-icon"})
func SunMoon(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v2" /> <path d="M14.837 16.385a6 6 0 1 1-7.223-7.222c.624-.147.97.66.715 1.248a4 4 0 0 0 5.26 5.259c.589-.255 1.396.09 1.248.715" /> <path d="M16 12a4 4 0 0 0-4-4" /> <path d="m19 5-1.256 1.256" /> <path d="M20 12h2" />`, opt)
}

// SunSnow renders the "sun-snow" icon.
//
// Usage in templates:
//
//	{{ lucide "sun-snow" }}
//
// Direct usage in Go:
//
//	lucide.SunSnow()
//	lucide.SunSnow(lucide.Options{Size: 32, Class: "my-icon"})
func SunSnow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 21v-1" /> <path d="M10 4V3" /> <path d="M10 9a3 3 0 0 0 0 6" /> <path d="m14 20 1.25-2.5L18 18" /> <path d="m14 4 1.25 2.5L18 6" /> <path d="m17 21-3-6 1.5-3H22" /> <path d="m17 3-3 6 1.5 3" /> <path d="M2 12h1" /> <path d="m20 10-1.5 2 1.5 2" /> <path d="m3.64 18.36.7-.7" /> <path d="m4.34 6.34-.7-.7" />`, opt)
}

// Sunrise renders the "sunrise" icon.
//
// Usage in templates:
//
//	{{ lucide "sunrise" }}
//
// Direct usage in Go:
//
//	lucide.Sunrise()
//	lucide.Sunrise(lucide.Options{Size: 32, Class: "my-icon"})
func Sunrise(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v8" /> <path d="m4.93 10.93 1.41 1.41" /> <path d="M2 18h2" /> <path d="M20 18h2" /> <path d="m19.07 10.93-1.41 1.41" /> <path d="M22 22H2" /> <path d="m8 6 4-4 4 4" /> <path d="M16 18a4 4 0 0 0-8 0" />`, opt)
}

// Sunset renders the "sunset" icon.
//
// Usage in templates:
//
//	{{ lucide "sunset" }}
//
// Direct usage in Go:
//
//	lucide.Sunset()
//	lucide.Sunset(lucide.Options{Size: 32, Class: "my-icon"})
func Sunset(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 10V2" /> <path d="m4.93 10.93 1.41 1.41" /> <path d="M2 18h2" /> <path d="M20 18h2" /> <path d="m19.07 10.93-1.41 1.41" /> <path d="M22 22H2" /> <path d="m16 6-4 4-4-4" /> <path d="M16 18a4 4 0 0 0-8 0" />`, opt)
}

// Superscript renders the "superscript" icon.
//
// Usage in templates:
//
//	{{ lucide "superscript" }}
//
// Direct usage in Go:
//
//	lucide.Superscript()
//	lucide.Superscript(lucide.Options{Size: 32, Class: "my-icon"})
func Superscript(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m4 19 8-8" /> <path d="m12 19-8-8" /> <path d="M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06" />`, opt)
}

// SwatchBook renders the "swatch-book" icon.
//
// Usage in templates:
//
//	{{ lucide "swatch-book" }}
//
// Direct usage in Go:
//
//	lucide.SwatchBook()
//	lucide.SwatchBook(lucide.Options{Size: 32, Class: "my-icon"})
func SwatchBook(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 17a4 4 0 0 1-8 0V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2Z" /> <path d="M16.7 13H19a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H7" /> <path d="M 7 17h.01" /> <path d="m11 8 2.3-2.3a2.4 2.4 0 0 1 3.404.004L18.6 7.6a2.4 2.4 0 0 1 .026 3.434L9.9 19.8" />`, opt)
}

// SwissFranc renders the "swiss-franc" icon.
//
// Usage in templates:
//
//	{{ lucide "swiss-franc" }}
//
// Direct usage in Go:
//
//	lucide.SwissFranc()
//	lucide.SwissFranc(lucide.Options{Size: 32, Class: "my-icon"})
func SwissFranc(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 21V3h8" /> <path d="M6 16h9" /> <path d="M10 9.5h7" />`, opt)
}

// SwitchCamera renders the "switch-camera" icon.
//
// Usage in templates:
//
//	{{ lucide "switch-camera" }}
//
// Direct usage in Go:
//
//	lucide.SwitchCamera()
//	lucide.SwitchCamera(lucide.Options{Size: 32, Class: "my-icon"})
func SwitchCamera(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5" /> <path d="M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5" /> <circle cx="12" cy="12" r="3" /> <path d="m18 22-3-3 3-3" /> <path d="m6 2 3 3-3 3" />`, opt)
}

// Sword renders the "sword" icon.
//
// Usage in templates:
//
//	{{ lucide "sword" }}
//
// Direct usage in Go:
//
//	lucide.Sword()
//	lucide.Sword(lucide.Options{Size: 32, Class: "my-icon"})
func Sword(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m11 19-6-6" /> <path d="m5 21-2-2" /> <path d="m8 16-4 4" /> <path d="M9.5 17.5 21 6V3h-3L6.5 14.5" />`, opt)
}

// Swords renders the "swords" icon.
//
// Usage in templates:
//
//	{{ lucide "swords" }}
//
// Direct usage in Go:
//
//	lucide.Swords()
//	lucide.Swords(lucide.Options{Size: 32, Class: "my-icon"})
func Swords(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<polyline points="14.5 17.5 3 6 3 3 6 3 17.5 14.5" /> <line x1="13" x2="19" y1="19" y2="13" /> <line x1="16" x2="20" y1="16" y2="20" /> <line x1="19" x2="21" y1="21" y2="19" /> <polyline points="14.5 6.5 18 3 21 3 21 6 17.5 9.5" /> <line x1="5" x2="9" y1="14" y2="18" /> <line x1="7" x2="4" y1="17" y2="20" /> <line x1="3" x2="5" y1="19" y2="21" />`, opt)
}

// Syringe renders the "syringe" icon.
//
// Usage in templates:
//
//	{{ lucide "syringe" }}
//
// Direct usage in Go:
//
//	lucide.Syringe()
//	lucide.Syringe(lucide.Options{Size: 32, Class: "my-icon"})
func Syringe(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18 2 4 4" /> <path d="m17 7 3-3" /> <path d="M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5" /> <path d="m9 11 4 4" /> <path d="m5 19-3 3" /> <path d="m14 4 6 6" />`, opt)
}

// Table renders the "table" icon.
//
// Usage in templates:
//
//	{{ lucide "table" }}
//
// Direct usage in Go:
//
//	lucide.Table()
//	lucide.Table(lucide.Options{Size: 32, Class: "my-icon"})
func Table(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v18" /> <rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 9h18" /> <path d="M3 15h18" />`, opt)
}

// Table2 renders the "table-2" icon.
//
// Usage in templates:
//
//	{{ lucide "table-2" }}
//
// Direct usage in Go:
//
//	lucide.Table2()
//	lucide.Table2(lucide.Options{Size: 32, Class: "my-icon"})
func Table2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18" />`, opt)
}

// TableCellsMerge renders the "table-cells-merge" icon.
//
// Usage in templates:
//
//	{{ lucide "table-cells-merge" }}
//
// Direct usage in Go:
//
//	lucide.TableCellsMerge()
//	lucide.TableCellsMerge(lucide.Options{Size: 32, Class: "my-icon"})
func TableCellsMerge(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 21v-6" /> <path d="M12 9V3" /> <path d="M3 15h18" /> <path d="M3 9h18" /> <rect width="18" height="18" x="3" y="3" rx="2" />`, opt)
}

// TableCellsSplit renders the "table-cells-split" icon.
//
// Usage in templates:
//
//	{{ lucide "table-cells-split" }}
//
// Direct usage in Go:
//
//	lucide.TableCellsSplit()
//	lucide.TableCellsSplit(lucide.Options{Size: 32, Class: "my-icon"})
func TableCellsSplit(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 15V9" /> <path d="M3 15h18" /> <path d="M3 9h18" /> <rect width="18" height="18" x="3" y="3" rx="2" />`, opt)
}

// TableColumnsSplit renders the "table-columns-split" icon.
//
// Usage in templates:
//
//	{{ lucide "table-columns-split" }}
//
// Direct usage in Go:
//
//	lucide.TableColumnsSplit()
//	lucide.TableColumnsSplit(lucide.Options{Size: 32, Class: "my-icon"})
func TableColumnsSplit(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 14v2" /> <path d="M14 20v2" /> <path d="M14 2v2" /> <path d="M14 8v2" /> <path d="M2 15h8" /> <path d="M2 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H2" /> <path d="M2 9h8" /> <path d="M22 15h-4" /> <path d="M22 3h-2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h2" /> <path d="M22 9h-4" /> <path d="M5 3v18" />`, opt)
}

// TableOfContents renders the "table-of-contents" icon.
//
// Usage in templates:
//
//	{{ lucide "table-of-contents" }}
//
// Direct usage in Go:
//
//	lucide.TableOfContents()
//	lucide.TableOfContents(lucide.Options{Size: 32, Class: "my-icon"})
func TableOfContents(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 5H3" /> <path d="M16 12H3" /> <path d="M16 19H3" /> <path d="M21 5h.01" /> <path d="M21 12h.01" /> <path d="M21 19h.01" />`, opt)
}

// TableProperties renders the "table-properties" icon.
//
// Usage in templates:
//
//	{{ lucide "table-properties" }}
//
// Direct usage in Go:
//
//	lucide.TableProperties()
//	lucide.TableProperties(lucide.Options{Size: 32, Class: "my-icon"})
func TableProperties(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 3v18" /> <rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M21 9H3" /> <path d="M21 15H3" />`, opt)
}

// TableRowsSplit renders the "table-rows-split" icon.
//
// Usage in templates:
//
//	{{ lucide "table-rows-split" }}
//
// Direct usage in Go:
//
//	lucide.TableRowsSplit()
//	lucide.TableRowsSplit(lucide.Options{Size: 32, Class: "my-icon"})
func TableRowsSplit(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 10h2" /> <path d="M15 22v-8" /> <path d="M15 2v4" /> <path d="M2 10h2" /> <path d="M20 10h2" /> <path d="M3 19h18" /> <path d="M3 22v-6a2 2 135 0 1 2-2h14a2 2 45 0 1 2 2v6" /> <path d="M3 2v2a2 2 45 0 0 2 2h14a2 2 135 0 0 2-2V2" /> <path d="M8 10h2" /> <path d="M9 22v-8" /> <path d="M9 2v4" />`, opt)
}

// Tablet renders the "tablet" icon.
//
// Usage in templates:
//
//	{{ lucide "tablet" }}
//
// Direct usage in Go:
//
//	lucide.Tablet()
//	lucide.Tablet(lucide.Options{Size: 32, Class: "my-icon"})
func Tablet(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="16" height="20" x="4" y="2" rx="2" ry="2" /> <line x1="12" x2="12.01" y1="18" y2="18" />`, opt)
}

// TabletSmartphone renders the "tablet-smartphone" icon.
//
// Usage in templates:
//
//	{{ lucide "tablet-smartphone" }}
//
// Direct usage in Go:
//
//	lucide.TabletSmartphone()
//	lucide.TabletSmartphone(lucide.Options{Size: 32, Class: "my-icon"})
func TabletSmartphone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="10" height="14" x="3" y="8" rx="2" /> <path d="M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4" /> <path d="M8 18h.01" />`, opt)
}

// Tablets renders the "tablets" icon.
//
// Usage in templates:
//
//	{{ lucide "tablets" }}
//
// Direct usage in Go:
//
//	lucide.Tablets()
//	lucide.Tablets(lucide.Options{Size: 32, Class: "my-icon"})
func Tablets(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="7" cy="7" r="5" /> <circle cx="17" cy="17" r="5" /> <path d="M12 17h10" /> <path d="m3.46 10.54 7.08-7.08" />`, opt)
}

// Tag renders the "tag" icon.
//
// Usage in templates:
//
//	{{ lucide "tag" }}
//
// Direct usage in Go:
//
//	lucide.Tag()
//	lucide.Tag(lucide.Options{Size: 32, Class: "my-icon"})
func Tag(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z" /> <circle cx="7.5" cy="7.5" r=".5" fill="currentColor" />`, opt)
}

// Tags renders the "tags" icon.
//
// Usage in templates:
//
//	{{ lucide "tags" }}
//
// Direct usage in Go:
//
//	lucide.Tags()
//	lucide.Tags(lucide.Options{Size: 32, Class: "my-icon"})
func Tags(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.172 2a2 2 0 0 1 1.414.586l6.71 6.71a2.4 2.4 0 0 1 0 3.408l-4.592 4.592a2.4 2.4 0 0 1-3.408 0l-6.71-6.71A2 2 0 0 1 6 9.172V3a1 1 0 0 1 1-1z" /> <path d="M2 7v6.172a2 2 0 0 0 .586 1.414l6.71 6.71a2.4 2.4 0 0 0 3.191.193" /> <circle cx="10.5" cy="6.5" r=".5" fill="currentColor" />`, opt)
}

// Tally1 renders the "tally-1" icon.
//
// Usage in templates:
//
//	{{ lucide "tally-1" }}
//
// Direct usage in Go:
//
//	lucide.Tally1()
//	lucide.Tally1(lucide.Options{Size: 32, Class: "my-icon"})
func Tally1(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 4v16" />`, opt)
}

// Tally2 renders the "tally-2" icon.
//
// Usage in templates:
//
//	{{ lucide "tally-2" }}
//
// Direct usage in Go:
//
//	lucide.Tally2()
//	lucide.Tally2(lucide.Options{Size: 32, Class: "my-icon"})
func Tally2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 4v16" /> <path d="M9 4v16" />`, opt)
}

// Tally3 renders the "tally-3" icon.
//
// Usage in templates:
//
//	{{ lucide "tally-3" }}
//
// Direct usage in Go:
//
//	lucide.Tally3()
//	lucide.Tally3(lucide.Options{Size: 32, Class: "my-icon"})
func Tally3(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 4v16" /> <path d="M9 4v16" /> <path d="M14 4v16" />`, opt)
}

// Tally4 renders the "tally-4" icon.
//
// Usage in templates:
//
//	{{ lucide "tally-4" }}
//
// Direct usage in Go:
//
//	lucide.Tally4()
//	lucide.Tally4(lucide.Options{Size: 32, Class: "my-icon"})
func Tally4(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 4v16" /> <path d="M9 4v16" /> <path d="M14 4v16" /> <path d="M19 4v16" />`, opt)
}

// Tally5 renders the "tally-5" icon.
//
// Usage in templates:
//
//	{{ lucide "tally-5" }}
//
// Direct usage in Go:
//
//	lucide.Tally5()
//	lucide.Tally5(lucide.Options{Size: 32, Class: "my-icon"})
func Tally5(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 4v16" /> <path d="M9 4v16" /> <path d="M14 4v16" /> <path d="M19 4v16" /> <path d="M22 6 2 18" />`, opt)
}

// Tangent renders the "tangent" icon.
//
// Usage in templates:
//
//	{{ lucide "tangent" }}
//
// Direct usage in Go:
//
//	lucide.Tangent()
//	lucide.Tangent(lucide.Options{Size: 32, Class: "my-icon"})
func Tangent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="17" cy="4" r="2" /> <path d="M15.59 5.41 5.41 15.59" /> <circle cx="4" cy="17" r="2" /> <path d="M12 22s-4-9-1.5-11.5S22 12 22 12" />`, opt)
}

// Target renders the "target" icon.
//
// Usage in templates:
//
//	{{ lucide "target" }}
//
// Direct usage in Go:
//
//	lucide.Target()
//	lucide.Target(lucide.Options{Size: 32, Class: "my-icon"})
func Target(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="12" r="10" /> <circle cx="12" cy="12" r="6" /> <circle cx="12" cy="12" r="2" />`, opt)
}

// Telescope renders the "telescope" icon.
//
// Usage in templates:
//
//	{{ lucide "telescope" }}
//
// Direct usage in Go:
//
//	lucide.Telescope()
//	lucide.Telescope(lucide.Options{Size: 32, Class: "my-icon"})
func Telescope(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10.065 12.493-6.18 1.318a.934.934 0 0 1-1.108-.702l-.537-2.15a1.07 1.07 0 0 1 .691-1.265l13.504-4.44" /> <path d="m13.56 11.747 4.332-.924" /> <path d="m16 21-3.105-6.21" /> <path d="M16.485 5.94a2 2 0 0 1 1.455-2.425l1.09-.272a1 1 0 0 1 1.212.727l1.515 6.06a1 1 0 0 1-.727 1.213l-1.09.272a2 2 0 0 1-2.425-1.455z" /> <path d="m6.158 8.633 1.114 4.456" /> <path d="m8 21 3.105-6.21" /> <circle cx="12" cy="13" r="2" />`, opt)
}

// Tent renders the "tent" icon.
//
// Usage in templates:
//
//	{{ lucide "tent" }}
//
// Direct usage in Go:
//
//	lucide.Tent()
//	lucide.Tent(lucide.Options{Size: 32, Class: "my-icon"})
func Tent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3.5 21 14 3" /> <path d="M20.5 21 10 3" /> <path d="M15.5 21 12 15l-3.5 6" /> <path d="M2 21h20" />`, opt)
}

// TentTree renders the "tent-tree" icon.
//
// Usage in templates:
//
//	{{ lucide "tent-tree" }}
//
// Direct usage in Go:
//
//	lucide.TentTree()
//	lucide.TentTree(lucide.Options{Size: 32, Class: "my-icon"})
func TentTree(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="4" cy="4" r="2" /> <path d="m14 5 3-3 3 3" /> <path d="m14 10 3-3 3 3" /> <path d="M17 14V2" /> <path d="M17 14H7l-5 8h20Z" /> <path d="M8 14v8" /> <path d="m9 14 5 8" />`, opt)
}

// Terminal renders the "terminal" icon.
//
// Usage in templates:
//
//	{{ lucide "terminal" }}
//
// Direct usage in Go:
//
//	lucide.Terminal()
//	lucide.Terminal(lucide.Options{Size: 32, Class: "my-icon"})
func Terminal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 19h8" /> <path d="m4 17 6-6-6-6" />`, opt)
}

// TestTube renders the "test-tube" icon.
//
// Usage in templates:
//
//	{{ lucide "test-tube" }}
//
// Direct usage in Go:
//
//	lucide.TestTube()
//	lucide.TestTube(lucide.Options{Size: 32, Class: "my-icon"})
func TestTube(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5c-1.4 0-2.5-1.1-2.5-2.5V2" /> <path d="M8.5 2h7" /> <path d="M14.5 16h-5" />`, opt)
}

// TestTubeDiagonal renders the "test-tube-diagonal" icon.
//
// Usage in templates:
//
//	{{ lucide "test-tube-diagonal" }}
//
// Direct usage in Go:
//
//	lucide.TestTubeDiagonal()
//	lucide.TestTubeDiagonal(lucide.Options{Size: 32, Class: "my-icon"})
func TestTubeDiagonal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 7 6.82 21.18a2.83 2.83 0 0 1-3.99-.01a2.83 2.83 0 0 1 0-4L17 3" /> <path d="m16 2 6 6" /> <path d="M12 16H4" />`, opt)
}

// TestTubes renders the "test-tubes" icon.
//
// Usage in templates:
//
//	{{ lucide "test-tubes" }}
//
// Direct usage in Go:
//
//	lucide.TestTubes()
//	lucide.TestTubes(lucide.Options{Size: 32, Class: "my-icon"})
func TestTubes(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 2v17.5A2.5 2.5 0 0 1 6.5 22A2.5 2.5 0 0 1 4 19.5V2" /> <path d="M20 2v17.5a2.5 2.5 0 0 1-2.5 2.5a2.5 2.5 0 0 1-2.5-2.5V2" /> <path d="M3 2h7" /> <path d="M14 2h7" /> <path d="M9 16H4" /> <path d="M20 16h-5" />`, opt)
}

// TextAlignCenter renders the "text-align-center" icon.
//
// Usage in templates:
//
//	{{ lucide "text-align-center" }}
//
// Direct usage in Go:
//
//	lucide.TextAlignCenter()
//	lucide.TextAlignCenter(lucide.Options{Size: 32, Class: "my-icon"})
func TextAlignCenter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 5H3" /> <path d="M17 12H7" /> <path d="M19 19H5" />`, opt)
}

// TextAlignEnd renders the "text-align-end" icon.
//
// Usage in templates:
//
//	{{ lucide "text-align-end" }}
//
// Direct usage in Go:
//
//	lucide.TextAlignEnd()
//	lucide.TextAlignEnd(lucide.Options{Size: 32, Class: "my-icon"})
func TextAlignEnd(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 5H3" /> <path d="M21 12H9" /> <path d="M21 19H7" />`, opt)
}

// TextAlignJustify renders the "text-align-justify" icon.
//
// Usage in templates:
//
//	{{ lucide "text-align-justify" }}
//
// Direct usage in Go:
//
//	lucide.TextAlignJustify()
//	lucide.TextAlignJustify(lucide.Options{Size: 32, Class: "my-icon"})
func TextAlignJustify(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 5h18" /> <path d="M3 12h18" /> <path d="M3 19h18" />`, opt)
}

// TextAlignStart renders the "text-align-start" icon.
//
// Usage in templates:
//
//	{{ lucide "text-align-start" }}
//
// Direct usage in Go:
//
//	lucide.TextAlignStart()
//	lucide.TextAlignStart(lucide.Options{Size: 32, Class: "my-icon"})
func TextAlignStart(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 5H3" /> <path d="M15 12H3" /> <path d="M17 19H3" />`, opt)
}

// TextCursor renders the "text-cursor" icon.
//
// Usage in templates:
//
//	{{ lucide "text-cursor" }}
//
// Direct usage in Go:
//
//	lucide.TextCursor()
//	lucide.TextCursor(lucide.Options{Size: 32, Class: "my-icon"})
func TextCursor(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1" /> <path d="M7 22h1a4 4 0 0 0 4-4v-1" /> <path d="M7 2h1a4 4 0 0 1 4 4v1" />`, opt)
}

// TextCursorInput renders the "text-cursor-input" icon.
//
// Usage in templates:
//
//	{{ lucide "text-cursor-input" }}
//
// Direct usage in Go:
//
//	lucide.TextCursorInput()
//	lucide.TextCursorInput(lucide.Options{Size: 32, Class: "my-icon"})
func TextCursorInput(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20h-1a2 2 0 0 1-2-2 2 2 0 0 1-2 2H6" /> <path d="M13 8h7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-7" /> <path d="M5 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h1" /> <path d="M6 4h1a2 2 0 0 1 2 2 2 2 0 0 1 2-2h1" /> <path d="M9 6v12" />`, opt)
}

// TextInitial renders the "text-initial" icon.
//
// Usage in templates:
//
//	{{ lucide "text-initial" }}
//
// Direct usage in Go:
//
//	lucide.TextInitial()
//	lucide.TextInitial(lucide.Options{Size: 32, Class: "my-icon"})
func TextInitial(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 5h6" /> <path d="M15 12h6" /> <path d="M3 19h18" /> <path d="m3 12 3.553-7.724a.5.5 0 0 1 .894 0L11 12" /> <path d="M3.92 10h6.16" />`, opt)
}

// TextQuote renders the "text-quote" icon.
//
// Usage in templates:
//
//	{{ lucide "text-quote" }}
//
// Direct usage in Go:
//
//	lucide.TextQuote()
//	lucide.TextQuote(lucide.Options{Size: 32, Class: "my-icon"})
func TextQuote(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 5H3" /> <path d="M21 12H8" /> <path d="M21 19H8" /> <path d="M3 12v7" />`, opt)
}

// TextSearch renders the "text-search" icon.
//
// Usage in templates:
//
//	{{ lucide "text-search" }}
//
// Direct usage in Go:
//
//	lucide.TextSearch()
//	lucide.TextSearch(lucide.Options{Size: 32, Class: "my-icon"})
func TextSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 5H3" /> <path d="M10 12H3" /> <path d="M10 19H3" /> <circle cx="17" cy="15" r="3" /> <path d="m21 19-1.9-1.9" />`, opt)
}

// TextSelect renders the "text-select" icon.
//
// Usage in templates:
//
//	{{ lucide "text-select" }}
//
// Direct usage in Go:
//
//	lucide.TextSelect()
//	lucide.TextSelect(lucide.Options{Size: 32, Class: "my-icon"})
func TextSelect(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 21h1" /> <path d="M14 3h1" /> <path d="M19 3a2 2 0 0 1 2 2" /> <path d="M21 14v1" /> <path d="M21 19a2 2 0 0 1-2 2" /> <path d="M21 9v1" /> <path d="M3 14v1" /> <path d="M3 9v1" /> <path d="M5 21a2 2 0 0 1-2-2" /> <path d="M5 3a2 2 0 0 0-2 2" /> <path d="M7 12h10" /> <path d="M7 16h6" /> <path d="M7 8h8" /> <path d="M9 21h1" /> <path d="M9 3h1" />`, opt)
}

// TextWrap renders the "text-wrap" icon.
//
// Usage in templates:
//
//	{{ lucide "text-wrap" }}
//
// Direct usage in Go:
//
//	lucide.TextWrap()
//	lucide.TextWrap(lucide.Options{Size: 32, Class: "my-icon"})
func TextWrap(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 16-3 3 3 3" /> <path d="M3 12h14.5a1 1 0 0 1 0 7H13" /> <path d="M3 19h6" /> <path d="M3 5h18" />`, opt)
}

// Theater renders the "theater" icon.
//
// Usage in templates:
//
//	{{ lucide "theater" }}
//
// Direct usage in Go:
//
//	lucide.Theater()
//	lucide.Theater(lucide.Options{Size: 32, Class: "my-icon"})
func Theater(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 10s3-3 3-8" /> <path d="M22 10s-3-3-3-8" /> <path d="M10 2c0 4.4-3.6 8-8 8" /> <path d="M14 2c0 4.4 3.6 8 8 8" /> <path d="M2 10s2 2 2 5" /> <path d="M22 10s-2 2-2 5" /> <path d="M8 15h8" /> <path d="M2 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1" /> <path d="M14 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1" />`, opt)
}

// Thermometer renders the "thermometer" icon.
//
// Usage in templates:
//
//	{{ lucide "thermometer" }}
//
// Direct usage in Go:
//
//	lucide.Thermometer()
//	lucide.Thermometer(lucide.Options{Size: 32, Class: "my-icon"})
func Thermometer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z" />`, opt)
}

// ThermometerSnowflake renders the "thermometer-snowflake" icon.
//
// Usage in templates:
//
//	{{ lucide "thermometer-snowflake" }}
//
// Direct usage in Go:
//
//	lucide.ThermometerSnowflake()
//	lucide.ThermometerSnowflake(lucide.Options{Size: 32, Class: "my-icon"})
func ThermometerSnowflake(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 20-1.25-2.5L6 18" /> <path d="M10 4 8.75 6.5 6 6" /> <path d="M10.585 15H10" /> <path d="M2 12h6.5L10 9" /> <path d="M20 14.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0z" /> <path d="m4 10 1.5 2L4 14" /> <path d="m7 21 3-6-1.5-3" /> <path d="m7 3 3 6h2" />`, opt)
}

// ThermometerSun renders the "thermometer-sun" icon.
//
// Usage in templates:
//
//	{{ lucide "thermometer-sun" }}
//
// Direct usage in Go:
//
//	lucide.ThermometerSun()
//	lucide.ThermometerSun(lucide.Options{Size: 32, Class: "my-icon"})
func ThermometerSun(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 9a4 4 0 0 0-2 7.5" /> <path d="M12 3v2" /> <path d="m6.6 18.4-1.4 1.4" /> <path d="M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z" /> <path d="M4 13H2" /> <path d="M6.34 7.34 4.93 5.93" />`, opt)
}

// ThumbsDown renders the "thumbs-down" icon.
//
// Usage in templates:
//
//	{{ lucide "thumbs-down" }}
//
// Direct usage in Go:
//
//	lucide.ThumbsDown()
//	lucide.ThumbsDown(lucide.Options{Size: 32, Class: "my-icon"})
func ThumbsDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 14V2" /> <path d="M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22a3.13 3.13 0 0 1-3-3.88Z" />`, opt)
}

// ThumbsUp renders the "thumbs-up" icon.
//
// Usage in templates:
//
//	{{ lucide "thumbs-up" }}
//
// Direct usage in Go:
//
//	lucide.ThumbsUp()
//	lucide.ThumbsUp(lucide.Options{Size: 32, Class: "my-icon"})
func ThumbsUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 10v12" /> <path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z" />`, opt)
}

// Ticket renders the "ticket" icon.
//
// Usage in templates:
//
//	{{ lucide "ticket" }}
//
// Direct usage in Go:
//
//	lucide.Ticket()
//	lucide.Ticket(lucide.Options{Size: 32, Class: "my-icon"})
func Ticket(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" /> <path d="M13 5v2" /> <path d="M13 17v2" /> <path d="M13 11v2" />`, opt)
}

// TicketCheck renders the "ticket-check" icon.
//
// Usage in templates:
//
//	{{ lucide "ticket-check" }}
//
// Direct usage in Go:
//
//	lucide.TicketCheck()
//	lucide.TicketCheck(lucide.Options{Size: 32, Class: "my-icon"})
func TicketCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" /> <path d="m9 12 2 2 4-4" />`, opt)
}

// TicketMinus renders the "ticket-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "ticket-minus" }}
//
// Direct usage in Go:
//
//	lucide.TicketMinus()
//	lucide.TicketMinus(lucide.Options{Size: 32, Class: "my-icon"})
func TicketMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" /> <path d="M9 12h6" />`, opt)
}

// TicketPercent renders the "ticket-percent" icon.
//
// Usage in templates:
//
//	{{ lucide "ticket-percent" }}
//
// Direct usage in Go:
//
//	lucide.TicketPercent()
//	lucide.TicketPercent(lucide.Options{Size: 32, Class: "my-icon"})
func TicketPercent(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9a3 3 0 1 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" /> <path d="M9 9h.01" /> <path d="m15 9-6 6" /> <path d="M15 15h.01" />`, opt)
}

// TicketPlus renders the "ticket-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "ticket-plus" }}
//
// Direct usage in Go:
//
//	lucide.TicketPlus()
//	lucide.TicketPlus(lucide.Options{Size: 32, Class: "my-icon"})
func TicketPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" /> <path d="M9 12h6" /> <path d="M12 9v6" />`, opt)
}

// TicketSlash renders the "ticket-slash" icon.
//
// Usage in templates:
//
//	{{ lucide "ticket-slash" }}
//
// Direct usage in Go:
//
//	lucide.TicketSlash()
//	lucide.TicketSlash(lucide.Options{Size: 32, Class: "my-icon"})
func TicketSlash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" /> <path d="m9.5 14.5 5-5" />`, opt)
}

// TicketX renders the "ticket-x" icon.
//
// Usage in templates:
//
//	{{ lucide "ticket-x" }}
//
// Direct usage in Go:
//
//	lucide.TicketX()
//	lucide.TicketX(lucide.Options{Size: 32, Class: "my-icon"})
func TicketX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" /> <path d="m9.5 14.5 5-5" /> <path d="m9.5 9.5 5 5" />`, opt)
}

// Tickets renders the "tickets" icon.
//
// Usage in templates:
//
//	{{ lucide "tickets" }}
//
// Direct usage in Go:
//
//	lucide.Tickets()
//	lucide.Tickets(lucide.Options{Size: 32, Class: "my-icon"})
func Tickets(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8" /> <path d="M6 10V8" /> <path d="M6 14v1" /> <path d="M6 19v2" /> <rect x="2" y="8" width="20" height="13" rx="2" />`, opt)
}

// TicketsPlane renders the "tickets-plane" icon.
//
// Usage in templates:
//
//	{{ lucide "tickets-plane" }}
//
// Direct usage in Go:
//
//	lucide.TicketsPlane()
//	lucide.TicketsPlane(lucide.Options{Size: 32, Class: "my-icon"})
func TicketsPlane(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.5 17h1.227a2 2 0 0 0 1.345-.52L18 12" /> <path d="m12 13.5 3.75.5" /> <path d="m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8" /> <path d="M6 10V8" /> <path d="M6 14v1" /> <path d="M6 19v2" /> <rect x="2" y="8" width="20" height="13" rx="2" />`, opt)
}

// Timer renders the "timer" icon.
//
// Usage in templates:
//
//	{{ lucide "timer" }}
//
// Direct usage in Go:
//
//	lucide.Timer()
//	lucide.Timer(lucide.Options{Size: 32, Class: "my-icon"})
func Timer(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<line x1="10" x2="14" y1="2" y2="2" /> <line x1="12" x2="15" y1="14" y2="11" /> <circle cx="12" cy="14" r="8" />`, opt)
}

// TimerOff renders the "timer-off" icon.
//
// Usage in templates:
//
//	{{ lucide "timer-off" }}
//
// Direct usage in Go:
//
//	lucide.TimerOff()
//	lucide.TimerOff(lucide.Options{Size: 32, Class: "my-icon"})
func TimerOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2h4" /> <path d="M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7" /> <path d="M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2" /> <path d="m2 2 20 20" /> <path d="M12 12v-2" />`, opt)
}

// TimerReset renders the "timer-reset" icon.
//
// Usage in templates:
//
//	{{ lucide "timer-reset" }}
//
// Direct usage in Go:
//
//	lucide.TimerReset()
//	lucide.TimerReset(lucide.Options{Size: 32, Class: "my-icon"})
func TimerReset(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2h4" /> <path d="M12 14v-4" /> <path d="M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6" /> <path d="M9 17H4v5" />`, opt)
}

// ToggleLeft renders the "toggle-left" icon.
//
// Usage in templates:
//
//	{{ lucide "toggle-left" }}
//
// Direct usage in Go:
//
//	lucide.ToggleLeft()
//	lucide.ToggleLeft(lucide.Options{Size: 32, Class: "my-icon"})
func ToggleLeft(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="9" cy="12" r="3" /> <rect width="20" height="14" x="2" y="5" rx="7" />`, opt)
}

// ToggleRight renders the "toggle-right" icon.
//
// Usage in templates:
//
//	{{ lucide "toggle-right" }}
//
// Direct usage in Go:
//
//	lucide.ToggleRight()
//	lucide.ToggleRight(lucide.Options{Size: 32, Class: "my-icon"})
func ToggleRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="15" cy="12" r="3" /> <rect width="20" height="14" x="2" y="5" rx="7" />`, opt)
}

// Toilet renders the "toilet" icon.
//
// Usage in templates:
//
//	{{ lucide "toilet" }}
//
// Direct usage in Go:
//
//	lucide.Toilet()
//	lucide.Toilet(lucide.Options{Size: 32, Class: "my-icon"})
func Toilet(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 12h13a1 1 0 0 1 1 1 5 5 0 0 1-5 5h-.598a.5.5 0 0 0-.424.765l1.544 2.47a.5.5 0 0 1-.424.765H5.402a.5.5 0 0 1-.424-.765L7 18" /> <path d="M8 18a5 5 0 0 1-5-5V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8" />`, opt)
}

// ToolCase renders the "tool-case" icon.
//
// Usage in templates:
//
//	{{ lucide "tool-case" }}
//
// Direct usage in Go:
//
//	lucide.ToolCase()
//	lucide.ToolCase(lucide.Options{Size: 32, Class: "my-icon"})
func ToolCase(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 15h4" /> <path d="m14.817 10.995-.971-1.45 1.034-1.232a2 2 0 0 0-2.025-3.238l-1.82.364L9.91 3.885a2 2 0 0 0-3.625.748L6.141 6.55l-1.725.426a2 2 0 0 0-.19 3.756l.657.27" /> <path d="m18.822 10.995 2.26-5.38a1 1 0 0 0-.557-1.318L16.954 2.9a1 1 0 0 0-1.281.533l-.924 2.122" /> <path d="M4 12.006A1 1 0 0 1 4.994 11H19a1 1 0 0 1 1 1v7a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z" />`, opt)
}

// Tornado renders the "tornado" icon.
//
// Usage in templates:
//
//	{{ lucide "tornado" }}
//
// Direct usage in Go:
//
//	lucide.Tornado()
//	lucide.Tornado(lucide.Options{Size: 32, Class: "my-icon"})
func Tornado(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 4H3" /> <path d="M18 8H6" /> <path d="M19 12H9" /> <path d="M16 16h-6" /> <path d="M11 20H9" />`, opt)
}

// Torus renders the "torus" icon.
//
// Usage in templates:
//
//	{{ lucide "torus" }}
//
// Direct usage in Go:
//
//	lucide.Torus()
//	lucide.Torus(lucide.Options{Size: 32, Class: "my-icon"})
func Torus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<ellipse cx="12" cy="11" rx="3" ry="2" /> <ellipse cx="12" cy="12.5" rx="10" ry="8.5" />`, opt)
}

// Touchpad renders the "touchpad" icon.
//
// Usage in templates:
//
//	{{ lucide "touchpad" }}
//
// Direct usage in Go:
//
//	lucide.Touchpad()
//	lucide.Touchpad(lucide.Options{Size: 32, Class: "my-icon"})
func Touchpad(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="16" x="2" y="4" rx="2" /> <path d="M2 14h20" /> <path d="M12 20v-6" />`, opt)
}

// TouchpadOff renders the "touchpad-off" icon.
//
// Usage in templates:
//
//	{{ lucide "touchpad-off" }}
//
// Direct usage in Go:
//
//	lucide.TouchpadOff()
//	lucide.TouchpadOff(lucide.Options{Size: 32, Class: "my-icon"})
func TouchpadOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20v-6" /> <path d="M19.656 14H22" /> <path d="M2 14h12" /> <path d="m2 2 20 20" /> <path d="M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2" /> <path d="M9.656 4H20a2 2 0 0 1 2 2v10.344" />`, opt)
}

// TowerControl renders the "tower-control" icon.
//
// Usage in templates:
//
//	{{ lucide "tower-control" }}
//
// Direct usage in Go:
//
//	lucide.TowerControl()
//	lucide.TowerControl(lucide.Options{Size: 32, Class: "my-icon"})
func TowerControl(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z" /> <path d="M8 13v9" /> <path d="M16 22v-9" /> <path d="m9 6 1 7" /> <path d="m15 6-1 7" /> <path d="M12 6V2" /> <path d="M13 2h-2" />`, opt)
}

// ToyBrick renders the "toy-brick" icon.
//
// Usage in templates:
//
//	{{ lucide "toy-brick" }}
//
// Direct usage in Go:
//
//	lucide.ToyBrick()
//	lucide.ToyBrick(lucide.Options{Size: 32, Class: "my-icon"})
func ToyBrick(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="12" x="3" y="8" rx="1" /> <path d="M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3" /> <path d="M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3" />`, opt)
}

// Tractor renders the "tractor" icon.
//
// Usage in templates:
//
//	{{ lucide "tractor" }}
//
// Direct usage in Go:
//
//	lucide.Tractor()
//	lucide.Tractor(lucide.Options{Size: 32, Class: "my-icon"})
func Tractor(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m10 11 11 .9a1 1 0 0 1 .8 1.1l-.665 4.158a1 1 0 0 1-.988.842H20" /> <path d="M16 18h-5" /> <path d="M18 5a1 1 0 0 0-1 1v5.573" /> <path d="M3 4h8.129a1 1 0 0 1 .99.863L13 11.246" /> <path d="M4 11V4" /> <path d="M7 15h.01" /> <path d="M8 10.1V4" /> <circle cx="18" cy="18" r="2" /> <circle cx="7" cy="15" r="5" />`, opt)
}

// TrafficCone renders the "traffic-cone" icon.
//
// Usage in templates:
//
//	{{ lucide "traffic-cone" }}
//
// Direct usage in Go:
//
//	lucide.TrafficCone()
//	lucide.TrafficCone(lucide.Options{Size: 32, Class: "my-icon"})
func TrafficCone(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16.05 10.966a5 2.5 0 0 1-8.1 0" /> <path d="m16.923 14.049 4.48 2.04a1 1 0 0 1 .001 1.831l-8.574 3.9a2 2 0 0 1-1.66 0l-8.574-3.91a1 1 0 0 1 0-1.83l4.484-2.04" /> <path d="M16.949 14.14a5 2.5 0 1 1-9.9 0L10.063 3.5a2 2 0 0 1 3.874 0z" /> <path d="M9.194 6.57a5 2.5 0 0 0 5.61 0" />`, opt)
}

// TrainFront renders the "train-front" icon.
//
// Usage in templates:
//
//	{{ lucide "train-front" }}
//
// Direct usage in Go:
//
//	lucide.TrainFront()
//	lucide.TrainFront(lucide.Options{Size: 32, Class: "my-icon"})
func TrainFront(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 3.1V7a4 4 0 0 0 8 0V3.1" /> <path d="m9 15-1-1" /> <path d="m15 15 1-1" /> <path d="M9 19c-2.8 0-5-2.2-5-5v-4a8 8 0 0 1 16 0v4c0 2.8-2.2 5-5 5Z" /> <path d="m8 19-2 3" /> <path d="m16 19 2 3" />`, opt)
}

// TrainFrontTunnel renders the "train-front-tunnel" icon.
//
// Usage in templates:
//
//	{{ lucide "train-front-tunnel" }}
//
// Direct usage in Go:
//
//	lucide.TrainFrontTunnel()
//	lucide.TrainFrontTunnel(lucide.Options{Size: 32, Class: "my-icon"})
func TrainFrontTunnel(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 22V12a10 10 0 1 1 20 0v10" /> <path d="M15 6.8v1.4a3 2.8 0 1 1-6 0V6.8" /> <path d="M10 15h.01" /> <path d="M14 15h.01" /> <path d="M10 19a4 4 0 0 1-4-4v-3a6 6 0 1 1 12 0v3a4 4 0 0 1-4 4Z" /> <path d="m9 19-2 3" /> <path d="m15 19 2 3" />`, opt)
}

// TrainTrack renders the "train-track" icon.
//
// Usage in templates:
//
//	{{ lucide "train-track" }}
//
// Direct usage in Go:
//
//	lucide.TrainTrack()
//	lucide.TrainTrack(lucide.Options{Size: 32, Class: "my-icon"})
func TrainTrack(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 17 17 2" /> <path d="m2 14 8 8" /> <path d="m5 11 8 8" /> <path d="m8 8 8 8" /> <path d="m11 5 8 8" /> <path d="m14 2 8 8" /> <path d="M7 22 22 7" />`, opt)
}

// TramFront renders the "tram-front" icon.
//
// Usage in templates:
//
//	{{ lucide "tram-front" }}
//
// Direct usage in Go:
//
//	lucide.TramFront()
//	lucide.TramFront(lucide.Options{Size: 32, Class: "my-icon"})
func TramFront(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="16" height="16" x="4" y="3" rx="2" /> <path d="M4 11h16" /> <path d="M12 3v8" /> <path d="m8 19-2 3" /> <path d="m18 22-2-3" /> <path d="M8 15h.01" /> <path d="M16 15h.01" />`, opt)
}

// Transgender renders the "transgender" icon.
//
// Usage in templates:
//
//	{{ lucide "transgender" }}
//
// Direct usage in Go:
//
//	lucide.Transgender()
//	lucide.Transgender(lucide.Options{Size: 32, Class: "my-icon"})
func Transgender(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 16v6" /> <path d="M14 20h-4" /> <path d="M18 2h4v4" /> <path d="m2 2 7.17 7.17" /> <path d="M2 5.355V2h3.357" /> <path d="m22 2-7.17 7.17" /> <path d="M8 5 5 8" /> <circle cx="12" cy="12" r="4" />`, opt)
}

// Trash renders the "trash" icon.
//
// Usage in templates:
//
//	{{ lucide "trash" }}
//
// Direct usage in Go:
//
//	lucide.Trash()
//	lucide.Trash(lucide.Options{Size: 32, Class: "my-icon"})
func Trash(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6" /> <path d="M3 6h18" /> <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" />`, opt)
}

// Trash2 renders the "trash-2" icon.
//
// Usage in templates:
//
//	{{ lucide "trash-2" }}
//
// Direct usage in Go:
//
//	lucide.Trash2()
//	lucide.Trash2(lucide.Options{Size: 32, Class: "my-icon"})
func Trash2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 11v6" /> <path d="M14 11v6" /> <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6" /> <path d="M3 6h18" /> <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" />`, opt)
}

// TreeDeciduous renders the "tree-deciduous" icon.
//
// Usage in templates:
//
//	{{ lucide "tree-deciduous" }}
//
// Direct usage in Go:
//
//	lucide.TreeDeciduous()
//	lucide.TreeDeciduous(lucide.Options{Size: 32, Class: "my-icon"})
func TreeDeciduous(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 19a4 4 0 0 1-2.24-7.32A3.5 3.5 0 0 1 9 6.03V6a3 3 0 1 1 6 0v.04a3.5 3.5 0 0 1 3.24 5.65A4 4 0 0 1 16 19Z" /> <path d="M12 19v3" />`, opt)
}

// TreePalm renders the "tree-palm" icon.
//
// Usage in templates:
//
//	{{ lucide "tree-palm" }}
//
// Direct usage in Go:
//
//	lucide.TreePalm()
//	lucide.TreePalm(lucide.Options{Size: 32, Class: "my-icon"})
func TreePalm(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4" /> <path d="M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3" /> <path d="M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35" /> <path d="M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14" />`, opt)
}

// TreePine renders the "tree-pine" icon.
//
// Usage in templates:
//
//	{{ lucide "tree-pine" }}
//
// Direct usage in Go:
//
//	lucide.TreePine()
//	lucide.TreePine(lucide.Options{Size: 32, Class: "my-icon"})
func TreePine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z" /> <path d="M12 22v-3" />`, opt)
}

// Trees renders the "trees" icon.
//
// Usage in templates:
//
//	{{ lucide "trees" }}
//
// Direct usage in Go:
//
//	lucide.Trees()
//	lucide.Trees(lucide.Options{Size: 32, Class: "my-icon"})
func Trees(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 10v.2A3 3 0 0 1 8.9 16H5a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z" /> <path d="M7 16v6" /> <path d="M13 19v3" /> <path d="M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5" />`, opt)
}

// Trello renders the "trello" icon.
//
// Usage in templates:
//
//	{{ lucide "trello" }}
//
// Direct usage in Go:
//
//	lucide.Trello()
//	lucide.Trello(lucide.Options{Size: 32, Class: "my-icon"})
func Trello(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" ry="2" /> <rect width="3" height="9" x="7" y="7" /> <rect width="3" height="5" x="14" y="7" />`, opt)
}

// TrendingDown renders the "trending-down" icon.
//
// Usage in templates:
//
//	{{ lucide "trending-down" }}
//
// Direct usage in Go:
//
//	lucide.TrendingDown()
//	lucide.TrendingDown(lucide.Options{Size: 32, Class: "my-icon"})
func TrendingDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 17h6v-6" /> <path d="m22 17-8.5-8.5-5 5L2 7" />`, opt)
}

// TrendingUp renders the "trending-up" icon.
//
// Usage in templates:
//
//	{{ lucide "trending-up" }}
//
// Direct usage in Go:
//
//	lucide.TrendingUp()
//	lucide.TrendingUp(lucide.Options{Size: 32, Class: "my-icon"})
func TrendingUp(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 7h6v6" /> <path d="m22 7-8.5 8.5-5-5L2 17" />`, opt)
}

// TrendingUpDown renders the "trending-up-down" icon.
//
// Usage in templates:
//
//	{{ lucide "trending-up-down" }}
//
// Direct usage in Go:
//
//	lucide.TrendingUpDown()
//	lucide.TrendingUpDown(lucide.Options{Size: 32, Class: "my-icon"})
func TrendingUpDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14.828 14.828 21 21" /> <path d="M21 16v5h-5" /> <path d="m21 3-9 9-4-4-6 6" /> <path d="M21 8V3h-5" />`, opt)
}

// Triangle renders the "triangle" icon.
//
// Usage in templates:
//
//	{{ lucide "triangle" }}
//
// Direct usage in Go:
//
//	lucide.Triangle()
//	lucide.Triangle(lucide.Options{Size: 32, Class: "my-icon"})
func Triangle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M13.73 4a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" />`, opt)
}

// TriangleAlert renders the "triangle-alert" icon.
//
// Usage in templates:
//
//	{{ lucide "triangle-alert" }}
//
// Direct usage in Go:
//
//	lucide.TriangleAlert()
//	lucide.TriangleAlert(lucide.Options{Size: 32, Class: "my-icon"})
func TriangleAlert(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3" /> <path d="M12 9v4" /> <path d="M12 17h.01" />`, opt)
}

// TriangleDashed renders the "triangle-dashed" icon.
//
// Usage in templates:
//
//	{{ lucide "triangle-dashed" }}
//
// Direct usage in Go:
//
//	lucide.TriangleDashed()
//	lucide.TriangleDashed(lucide.Options{Size: 32, Class: "my-icon"})
func TriangleDashed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.17 4.193a2 2 0 0 1 3.666.013" /> <path d="M14 21h2" /> <path d="m15.874 7.743 1 1.732" /> <path d="m18.849 12.952 1 1.732" /> <path d="M21.824 18.18a2 2 0 0 1-1.835 2.824" /> <path d="M4.024 21a2 2 0 0 1-1.839-2.839" /> <path d="m5.136 12.952-1 1.732" /> <path d="M8 21h2" /> <path d="m8.102 7.743-1 1.732" />`, opt)
}

// TriangleRight renders the "triangle-right" icon.
//
// Usage in templates:
//
//	{{ lucide "triangle-right" }}
//
// Direct usage in Go:
//
//	lucide.TriangleRight()
//	lucide.TriangleRight(lucide.Options{Size: 32, Class: "my-icon"})
func TriangleRight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 18a2 2 0 0 1-2 2H3c-1.1 0-1.3-.6-.4-1.3L20.4 4.3c.9-.7 1.6-.4 1.6.7Z" />`, opt)
}

// Trophy renders the "trophy" icon.
//
// Usage in templates:
//
//	{{ lucide "trophy" }}
//
// Direct usage in Go:
//
//	lucide.Trophy()
//	lucide.Trophy(lucide.Options{Size: 32, Class: "my-icon"})
func Trophy(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 14.66v1.626a2 2 0 0 1-.976 1.696A5 5 0 0 0 7 21.978" /> <path d="M14 14.66v1.626a2 2 0 0 0 .976 1.696A5 5 0 0 1 17 21.978" /> <path d="M18 9h1.5a1 1 0 0 0 0-5H18" /> <path d="M4 22h16" /> <path d="M6 9a6 6 0 0 0 12 0V3a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1z" /> <path d="M6 9H4.5a1 1 0 0 1 0-5H6" />`, opt)
}

// Truck renders the "truck" icon.
//
// Usage in templates:
//
//	{{ lucide "truck" }}
//
// Direct usage in Go:
//
//	lucide.Truck()
//	lucide.Truck(lucide.Options{Size: 32, Class: "my-icon"})
func Truck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2" /> <path d="M15 18H9" /> <path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14" /> <circle cx="17" cy="18" r="2" /> <circle cx="7" cy="18" r="2" />`, opt)
}

// TruckElectric renders the "truck-electric" icon.
//
// Usage in templates:
//
//	{{ lucide "truck-electric" }}
//
// Direct usage in Go:
//
//	lucide.TruckElectric()
//	lucide.TruckElectric(lucide.Options{Size: 32, Class: "my-icon"})
func TruckElectric(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 19V7a2 2 0 0 0-2-2H9" /> <path d="M15 19H9" /> <path d="M19 19h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.62L18.3 9.38a1 1 0 0 0-.78-.38H14" /> <path d="M2 13v5a1 1 0 0 0 1 1h2" /> <path d="M4 3 2.15 5.15a.495.495 0 0 0 .35.86h2.15a.47.47 0 0 1 .35.86L3 9.02" /> <circle cx="17" cy="19" r="2" /> <circle cx="7" cy="19" r="2" />`, opt)
}

// TurkishLira renders the "turkish-lira" icon.
//
// Usage in templates:
//
//	{{ lucide "turkish-lira" }}
//
// Direct usage in Go:
//
//	lucide.TurkishLira()
//	lucide.TurkishLira(lucide.Options{Size: 32, Class: "my-icon"})
func TurkishLira(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 4 5 9" /> <path d="m15 8.5-10 5" /> <path d="M18 12a9 9 0 0 1-9 9V3" />`, opt)
}

// Turntable renders the "turntable" icon.
//
// Usage in templates:
//
//	{{ lucide "turntable" }}
//
// Direct usage in Go:
//
//	lucide.Turntable()
//	lucide.Turntable(lucide.Options{Size: 32, Class: "my-icon"})
func Turntable(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 12.01h.01" /> <path d="M18 8v4a8 8 0 0 1-1.07 4" /> <circle cx="10" cy="12" r="4" /> <rect x="2" y="4" width="20" height="16" rx="2" />`, opt)
}

// Turtle renders the "turtle" icon.
//
// Usage in templates:
//
//	{{ lucide "turtle" }}
//
// Direct usage in Go:
//
//	lucide.Turtle()
//	lucide.Turtle(lucide.Options{Size: 32, Class: "my-icon"})
func Turtle(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m12 10 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a8 8 0 1 0-16 0v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3l2-4h4Z" /> <path d="M4.82 7.9 8 10" /> <path d="M15.18 7.9 12 10" /> <path d="M16.93 10H20a2 2 0 0 1 0 4H2" />`, opt)
}

// Tv renders the "tv" icon.
//
// Usage in templates:
//
//	{{ lucide "tv" }}
//
// Direct usage in Go:
//
//	lucide.Tv()
//	lucide.Tv(lucide.Options{Size: 32, Class: "my-icon"})
func Tv(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m17 2-5 5-5-5" /> <rect width="20" height="15" x="2" y="7" rx="2" />`, opt)
}

// TvMinimal renders the "tv-minimal" icon.
//
// Usage in templates:
//
//	{{ lucide "tv-minimal" }}
//
// Direct usage in Go:
//
//	lucide.TvMinimal()
//	lucide.TvMinimal(lucide.Options{Size: 32, Class: "my-icon"})
func TvMinimal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M7 21h10" /> <rect width="20" height="14" x="2" y="3" rx="2" />`, opt)
}

// TvMinimalPlay renders the "tv-minimal-play" icon.
//
// Usage in templates:
//
//	{{ lucide "tv-minimal-play" }}
//
// Direct usage in Go:
//
//	lucide.TvMinimalPlay()
//	lucide.TvMinimalPlay(lucide.Options{Size: 32, Class: "my-icon"})
func TvMinimalPlay(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15.033 9.44a.647.647 0 0 1 0 1.12l-4.065 2.352a.645.645 0 0 1-.968-.56V7.648a.645.645 0 0 1 .967-.56z" /> <path d="M7 21h10" /> <rect width="20" height="14" x="2" y="3" rx="2" />`, opt)
}

// Twitch renders the "twitch" icon.
//
// Usage in templates:
//
//	{{ lucide "twitch" }}
//
// Direct usage in Go:
//
//	lucide.Twitch()
//	lucide.Twitch(lucide.Options{Size: 32, Class: "my-icon"})
func Twitch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7" />`, opt)
}

// Twitter renders the "twitter" icon.
//
// Usage in templates:
//
//	{{ lucide "twitter" }}
//
// Direct usage in Go:
//
//	lucide.Twitter()
//	lucide.Twitter(lucide.Options{Size: 32, Class: "my-icon"})
func Twitter(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z" />`, opt)
}

// Type renders the "type" icon.
//
// Usage in templates:
//
//	{{ lucide "type" }}
//
// Direct usage in Go:
//
//	lucide.Type()
//	lucide.Type(lucide.Options{Size: 32, Class: "my-icon"})
func Type(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 4v16" /> <path d="M4 7V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2" /> <path d="M9 20h6" />`, opt)
}

// TypeOutline renders the "type-outline" icon.
//
// Usage in templates:
//
//	{{ lucide "type-outline" }}
//
// Direct usage in Go:
//
//	lucide.TypeOutline()
//	lucide.TypeOutline(lucide.Options{Size: 32, Class: "my-icon"})
func TypeOutline(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 16.5a.5.5 0 0 0 .5.5h.5a2 2 0 0 1 0 4H9a2 2 0 0 1 0-4h.5a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V8a2 2 0 0 1-4 0V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v3a2 2 0 0 1-4 0v-.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5Z" />`, opt)
}

// Umbrella renders the "umbrella" icon.
//
// Usage in templates:
//
//	{{ lucide "umbrella" }}
//
// Direct usage in Go:
//
//	lucide.Umbrella()
//	lucide.Umbrella(lucide.Options{Size: 32, Class: "my-icon"})
func Umbrella(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13v7a2 2 0 0 0 4 0" /> <path d="M12 2v2" /> <path d="M20.992 13a1 1 0 0 0 .97-1.274 10.284 10.284 0 0 0-19.923 0A1 1 0 0 0 3 13z" />`, opt)
}

// UmbrellaOff renders the "umbrella-off" icon.
//
// Usage in templates:
//
//	{{ lucide "umbrella-off" }}
//
// Direct usage in Go:
//
//	lucide.UmbrellaOff()
//	lucide.UmbrellaOff(lucide.Options{Size: 32, Class: "my-icon"})
func UmbrellaOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 13v7a2 2 0 0 0 4 0" /> <path d="M12 2v2" /> <path d="M18.656 13h2.336a1 1 0 0 0 .97-1.274 10.284 10.284 0 0 0-12.07-7.51" /> <path d="m2 2 20 20" /> <path d="M5.961 5.957a10.28 10.28 0 0 0-3.922 5.769A1 1 0 0 0 3 13h10" />`, opt)
}

// Underline renders the "underline" icon.
//
// Usage in templates:
//
//	{{ lucide "underline" }}
//
// Direct usage in Go:
//
//	lucide.Underline()
//	lucide.Underline(lucide.Options{Size: 32, Class: "my-icon"})
func Underline(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M6 4v6a6 6 0 0 0 12 0V4" /> <line x1="4" x2="20" y1="20" y2="20" />`, opt)
}

// Undo renders the "undo" icon.
//
// Usage in templates:
//
//	{{ lucide "undo" }}
//
// Direct usage in Go:
//
//	lucide.Undo()
//	lucide.Undo(lucide.Options{Size: 32, Class: "my-icon"})
func Undo(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 7v6h6" /> <path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13" />`, opt)
}

// Undo2 renders the "undo-2" icon.
//
// Usage in templates:
//
//	{{ lucide "undo-2" }}
//
// Direct usage in Go:
//
//	lucide.Undo2()
//	lucide.Undo2(lucide.Options{Size: 32, Class: "my-icon"})
func Undo2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M9 14 4 9l5-5" /> <path d="M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11" />`, opt)
}

// UndoDot renders the "undo-dot" icon.
//
// Usage in templates:
//
//	{{ lucide "undo-dot" }}
//
// Direct usage in Go:
//
//	lucide.UndoDot()
//	lucide.UndoDot(lucide.Options{Size: 32, Class: "my-icon"})
func UndoDot(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 17a9 9 0 0 0-15-6.7L3 13" /> <path d="M3 7v6h6" /> <circle cx="12" cy="17" r="1" />`, opt)
}

// UnfoldHorizontal renders the "unfold-horizontal" icon.
//
// Usage in templates:
//
//	{{ lucide "unfold-horizontal" }}
//
// Direct usage in Go:
//
//	lucide.UnfoldHorizontal()
//	lucide.UnfoldHorizontal(lucide.Options{Size: 32, Class: "my-icon"})
func UnfoldHorizontal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 12h6" /> <path d="M8 12H2" /> <path d="M12 2v2" /> <path d="M12 8v2" /> <path d="M12 14v2" /> <path d="M12 20v2" /> <path d="m19 15 3-3-3-3" /> <path d="m5 9-3 3 3 3" />`, opt)
}

// UnfoldVertical renders the "unfold-vertical" icon.
//
// Usage in templates:
//
//	{{ lucide "unfold-vertical" }}
//
// Direct usage in Go:
//
//	lucide.UnfoldVertical()
//	lucide.UnfoldVertical(lucide.Options{Size: 32, Class: "my-icon"})
func UnfoldVertical(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 22v-6" /> <path d="M12 8V2" /> <path d="M4 12H2" /> <path d="M10 12H8" /> <path d="M16 12h-2" /> <path d="M22 12h-2" /> <path d="m15 19-3 3-3-3" /> <path d="m15 5-3-3-3 3" />`, opt)
}

// Ungroup renders the "ungroup" icon.
//
// Usage in templates:
//
//	{{ lucide "ungroup" }}
//
// Direct usage in Go:
//
//	lucide.Ungroup()
//	lucide.Ungroup(lucide.Options{Size: 32, Class: "my-icon"})
func Ungroup(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="6" x="5" y="4" rx="1" /> <rect width="8" height="6" x="11" y="14" rx="1" />`, opt)
}

// University renders the "university" icon.
//
// Usage in templates:
//
//	{{ lucide "university" }}
//
// Direct usage in Go:
//
//	lucide.University()
//	lucide.University(lucide.Options{Size: 32, Class: "my-icon"})
func University(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14 21v-3a2 2 0 0 0-4 0v3" /> <path d="M18 12h.01" /> <path d="M18 16h.01" /> <path d="M22 7a1 1 0 0 0-1-1h-2a2 2 0 0 1-1.143-.359L13.143 2.36a2 2 0 0 0-2.286-.001L6.143 5.64A2 2 0 0 1 5 6H3a1 1 0 0 0-1 1v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2z" /> <path d="M6 12h.01" /> <path d="M6 16h.01" /> <circle cx="12" cy="10" r="2" />`, opt)
}

// Unlink renders the "unlink" icon.
//
// Usage in templates:
//
//	{{ lucide "unlink" }}
//
// Direct usage in Go:
//
//	lucide.Unlink()
//	lucide.Unlink(lucide.Options{Size: 32, Class: "my-icon"})
func Unlink(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71" /> <path d="m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71" /> <line x1="8" x2="8" y1="2" y2="5" /> <line x1="2" x2="5" y1="8" y2="8" /> <line x1="16" x2="16" y1="19" y2="22" /> <line x1="19" x2="22" y1="16" y2="16" />`, opt)
}

// Unlink2 renders the "unlink-2" icon.
//
// Usage in templates:
//
//	{{ lucide "unlink-2" }}
//
// Direct usage in Go:
//
//	lucide.Unlink2()
//	lucide.Unlink2(lucide.Options{Size: 32, Class: "my-icon"})
func Unlink2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2" />`, opt)
}

// Unplug renders the "unplug" icon.
//
// Usage in templates:
//
//	{{ lucide "unplug" }}
//
// Direct usage in Go:
//
//	lucide.Unplug()
//	lucide.Unplug(lucide.Options{Size: 32, Class: "my-icon"})
func Unplug(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 5 3-3" /> <path d="m2 22 3-3" /> <path d="M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z" /> <path d="M7.5 13.5 10 11" /> <path d="M10.5 16.5 13 14" /> <path d="m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z" />`, opt)
}

// Upload renders the "upload" icon.
//
// Usage in templates:
//
//	{{ lucide "upload" }}
//
// Direct usage in Go:
//
//	lucide.Upload()
//	lucide.Upload(lucide.Options{Size: 32, Class: "my-icon"})
func Upload(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 3v12" /> <path d="m17 8-5-5-5 5" /> <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />`, opt)
}

// Usb renders the "usb" icon.
//
// Usage in templates:
//
//	{{ lucide "usb" }}
//
// Direct usage in Go:
//
//	lucide.Usb()
//	lucide.Usb(lucide.Options{Size: 32, Class: "my-icon"})
func Usb(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="10" cy="7" r="1" /> <circle cx="4" cy="20" r="1" /> <path d="M4.7 19.3 19 5" /> <path d="m21 3-3 1 2 2Z" /> <path d="M9.26 7.68 5 12l2 5" /> <path d="m10 14 5 2 3.5-3.5" /> <path d="m18 12 1-1 1 1-1 1Z" />`, opt)
}

// User renders the "user" icon.
//
// Usage in templates:
//
//	{{ lucide "user" }}
//
// Direct usage in Go:
//
//	lucide.User()
//	lucide.User(lucide.Options{Size: 32, Class: "my-icon"})
func User(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" /> <circle cx="12" cy="7" r="4" />`, opt)
}

// UserCheck renders the "user-check" icon.
//
// Usage in templates:
//
//	{{ lucide "user-check" }}
//
// Direct usage in Go:
//
//	lucide.UserCheck()
//	lucide.UserCheck(lucide.Options{Size: 32, Class: "my-icon"})
func UserCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 11 2 2 4-4" /> <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> <circle cx="9" cy="7" r="4" />`, opt)
}

// UserCog renders the "user-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "user-cog" }}
//
// Direct usage in Go:
//
//	lucide.UserCog()
//	lucide.UserCog(lucide.Options{Size: 32, Class: "my-icon"})
func UserCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 15H6a4 4 0 0 0-4 4v2" /> <path d="m14.305 16.53.923-.382" /> <path d="m15.228 13.852-.923-.383" /> <path d="m16.852 12.228-.383-.923" /> <path d="m16.852 17.772-.383.924" /> <path d="m19.148 12.228.383-.923" /> <path d="m19.53 18.696-.382-.924" /> <path d="m20.772 13.852.924-.383" /> <path d="m20.772 16.148.924.383" /> <circle cx="18" cy="15" r="3" /> <circle cx="9" cy="7" r="4" />`, opt)
}

// UserLock renders the "user-lock" icon.
//
// Usage in templates:
//
//	{{ lucide "user-lock" }}
//
// Direct usage in Go:
//
//	lucide.UserLock()
//	lucide.UserLock(lucide.Options{Size: 32, Class: "my-icon"})
func UserLock(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="10" cy="7" r="4" /> <path d="M10.3 15H7a4 4 0 0 0-4 4v2" /> <path d="M15 15.5V14a2 2 0 0 1 4 0v1.5" /> <rect width="8" height="5" x="13" y="16" rx=".899" />`, opt)
}

// UserMinus renders the "user-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "user-minus" }}
//
// Direct usage in Go:
//
//	lucide.UserMinus()
//	lucide.UserMinus(lucide.Options{Size: 32, Class: "my-icon"})
func UserMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> <circle cx="9" cy="7" r="4" /> <line x1="22" x2="16" y1="11" y2="11" />`, opt)
}

// UserPen renders the "user-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "user-pen" }}
//
// Direct usage in Go:
//
//	lucide.UserPen()
//	lucide.UserPen(lucide.Options{Size: 32, Class: "my-icon"})
func UserPen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.5 15H7a4 4 0 0 0-4 4v2" /> <path d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" /> <circle cx="10" cy="7" r="4" />`, opt)
}

// UserPlus renders the "user-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "user-plus" }}
//
// Direct usage in Go:
//
//	lucide.UserPlus()
//	lucide.UserPlus(lucide.Options{Size: 32, Class: "my-icon"})
func UserPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> <circle cx="9" cy="7" r="4" /> <line x1="19" x2="19" y1="8" y2="14" /> <line x1="22" x2="16" y1="11" y2="11" />`, opt)
}

// UserRound renders the "user-round" icon.
//
// Usage in templates:
//
//	{{ lucide "user-round" }}
//
// Direct usage in Go:
//
//	lucide.UserRound()
//	lucide.UserRound(lucide.Options{Size: 32, Class: "my-icon"})
func UserRound(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="8" r="5" /> <path d="M20 21a8 8 0 0 0-16 0" />`, opt)
}

// UserRoundCheck renders the "user-round-check" icon.
//
// Usage in templates:
//
//	{{ lucide "user-round-check" }}
//
// Direct usage in Go:
//
//	lucide.UserRoundCheck()
//	lucide.UserRoundCheck(lucide.Options{Size: 32, Class: "my-icon"})
func UserRoundCheck(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 21a8 8 0 0 1 13.292-6" /> <circle cx="10" cy="8" r="5" /> <path d="m16 19 2 2 4-4" />`, opt)
}

// UserRoundCog renders the "user-round-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "user-round-cog" }}
//
// Direct usage in Go:
//
//	lucide.UserRoundCog()
//	lucide.UserRoundCog(lucide.Options{Size: 32, Class: "my-icon"})
func UserRoundCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14.305 19.53.923-.382" /> <path d="m15.228 16.852-.923-.383" /> <path d="m16.852 15.228-.383-.923" /> <path d="m16.852 20.772-.383.924" /> <path d="m19.148 15.228.383-.923" /> <path d="m19.53 21.696-.382-.924" /> <path d="M2 21a8 8 0 0 1 10.434-7.62" /> <path d="m20.772 16.852.924-.383" /> <path d="m20.772 19.148.924.383" /> <circle cx="10" cy="8" r="5" /> <circle cx="18" cy="18" r="3" />`, opt)
}

// UserRoundMinus renders the "user-round-minus" icon.
//
// Usage in templates:
//
//	{{ lucide "user-round-minus" }}
//
// Direct usage in Go:
//
//	lucide.UserRoundMinus()
//	lucide.UserRoundMinus(lucide.Options{Size: 32, Class: "my-icon"})
func UserRoundMinus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 21a8 8 0 0 1 13.292-6" /> <circle cx="10" cy="8" r="5" /> <path d="M22 19h-6" />`, opt)
}

// UserRoundPen renders the "user-round-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "user-round-pen" }}
//
// Direct usage in Go:
//
//	lucide.UserRoundPen()
//	lucide.UserRoundPen(lucide.Options{Size: 32, Class: "my-icon"})
func UserRoundPen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 21a8 8 0 0 1 10.821-7.487" /> <path d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" /> <circle cx="10" cy="8" r="5" />`, opt)
}

// UserRoundPlus renders the "user-round-plus" icon.
//
// Usage in templates:
//
//	{{ lucide "user-round-plus" }}
//
// Direct usage in Go:
//
//	lucide.UserRoundPlus()
//	lucide.UserRoundPlus(lucide.Options{Size: 32, Class: "my-icon"})
func UserRoundPlus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 21a8 8 0 0 1 13.292-6" /> <circle cx="10" cy="8" r="5" /> <path d="M19 16v6" /> <path d="M22 19h-6" />`, opt)
}

// UserRoundSearch renders the "user-round-search" icon.
//
// Usage in templates:
//
//	{{ lucide "user-round-search" }}
//
// Direct usage in Go:
//
//	lucide.UserRoundSearch()
//	lucide.UserRoundSearch(lucide.Options{Size: 32, Class: "my-icon"})
func UserRoundSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="10" cy="8" r="5" /> <path d="M2 21a8 8 0 0 1 10.434-7.62" /> <circle cx="18" cy="18" r="3" /> <path d="m22 22-1.9-1.9" />`, opt)
}

// UserRoundX renders the "user-round-x" icon.
//
// Usage in templates:
//
//	{{ lucide "user-round-x" }}
//
// Direct usage in Go:
//
//	lucide.UserRoundX()
//	lucide.UserRoundX(lucide.Options{Size: 32, Class: "my-icon"})
func UserRoundX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 21a8 8 0 0 1 11.873-7" /> <circle cx="10" cy="8" r="5" /> <path d="m17 17 5 5" /> <path d="m22 17-5 5" />`, opt)
}

// UserSearch renders the "user-search" icon.
//
// Usage in templates:
//
//	{{ lucide "user-search" }}
//
// Direct usage in Go:
//
//	lucide.UserSearch()
//	lucide.UserSearch(lucide.Options{Size: 32, Class: "my-icon"})
func UserSearch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="10" cy="7" r="4" /> <path d="M10.3 15H7a4 4 0 0 0-4 4v2" /> <circle cx="17" cy="17" r="3" /> <path d="m21 21-1.9-1.9" />`, opt)
}

// UserStar renders the "user-star" icon.
//
// Usage in templates:
//
//	{{ lucide "user-star" }}
//
// Direct usage in Go:
//
//	lucide.UserStar()
//	lucide.UserStar(lucide.Options{Size: 32, Class: "my-icon"})
func UserStar(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16.051 12.616a1 1 0 0 1 1.909.024l.737 1.452a1 1 0 0 0 .737.535l1.634.256a1 1 0 0 1 .588 1.806l-1.172 1.168a1 1 0 0 0-.282.866l.259 1.613a1 1 0 0 1-1.541 1.134l-1.465-.75a1 1 0 0 0-.912 0l-1.465.75a1 1 0 0 1-1.539-1.133l.258-1.613a1 1 0 0 0-.282-.866l-1.156-1.153a1 1 0 0 1 .572-1.822l1.633-.256a1 1 0 0 0 .737-.535z" /> <path d="M8 15H7a4 4 0 0 0-4 4v2" /> <circle cx="10" cy="7" r="4" />`, opt)
}

// UserX renders the "user-x" icon.
//
// Usage in templates:
//
//	{{ lucide "user-x" }}
//
// Direct usage in Go:
//
//	lucide.UserX()
//	lucide.UserX(lucide.Options{Size: 32, Class: "my-icon"})
func UserX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> <circle cx="9" cy="7" r="4" /> <line x1="17" x2="22" y1="8" y2="13" /> <line x1="22" x2="17" y1="8" y2="13" />`, opt)
}

// Users renders the "users" icon.
//
// Usage in templates:
//
//	{{ lucide "users" }}
//
// Direct usage in Go:
//
//	lucide.Users()
//	lucide.Users(lucide.Options{Size: 32, Class: "my-icon"})
func Users(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> <path d="M16 3.128a4 4 0 0 1 0 7.744" /> <path d="M22 21v-2a4 4 0 0 0-3-3.87" /> <circle cx="9" cy="7" r="4" />`, opt)
}

// UsersRound renders the "users-round" icon.
//
// Usage in templates:
//
//	{{ lucide "users-round" }}
//
// Direct usage in Go:
//
//	lucide.UsersRound()
//	lucide.UsersRound(lucide.Options{Size: 32, Class: "my-icon"})
func UsersRound(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 21a8 8 0 0 0-16 0" /> <circle cx="10" cy="8" r="5" /> <path d="M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3" />`, opt)
}

// Utensils renders the "utensils" icon.
//
// Usage in templates:
//
//	{{ lucide "utensils" }}
//
// Direct usage in Go:
//
//	lucide.Utensils()
//	lucide.Utensils(lucide.Options{Size: 32, Class: "my-icon"})
func Utensils(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2" /> <path d="M7 2v20" /> <path d="M21 15V2a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7" />`, opt)
}

// UtensilsCrossed renders the "utensils-crossed" icon.
//
// Usage in templates:
//
//	{{ lucide "utensils-crossed" }}
//
// Direct usage in Go:
//
//	lucide.UtensilsCrossed()
//	lucide.UtensilsCrossed(lucide.Options{Size: 32, Class: "my-icon"})
func UtensilsCrossed(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8" /> <path d="M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7" /> <path d="m2.1 21.8 6.4-6.3" /> <path d="m19 5-7 7" />`, opt)
}

// UtilityPole renders the "utility-pole" icon.
//
// Usage in templates:
//
//	{{ lucide "utility-pole" }}
//
// Direct usage in Go:
//
//	lucide.UtilityPole()
//	lucide.UtilityPole(lucide.Options{Size: 32, Class: "my-icon"})
func UtilityPole(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 2v20" /> <path d="M2 5h20" /> <path d="M3 3v2" /> <path d="M7 3v2" /> <path d="M17 3v2" /> <path d="M21 3v2" /> <path d="m19 5-7 7-7-7" />`, opt)
}

// Variable renders the "variable" icon.
//
// Usage in templates:
//
//	{{ lucide "variable" }}
//
// Direct usage in Go:
//
//	lucide.Variable()
//	lucide.Variable(lucide.Options{Size: 32, Class: "my-icon"})
func Variable(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 21s-4-3-4-9 4-9 4-9" /> <path d="M16 3s4 3 4 9-4 9-4 9" /> <line x1="15" x2="9" y1="9" y2="15" /> <line x1="9" x2="15" y1="9" y2="15" />`, opt)
}

// Vault renders the "vault" icon.
//
// Usage in templates:
//
//	{{ lucide "vault" }}
//
// Direct usage in Go:
//
//	lucide.Vault()
//	lucide.Vault(lucide.Options{Size: 32, Class: "my-icon"})
func Vault(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <circle cx="7.5" cy="7.5" r=".5" fill="currentColor" /> <path d="m7.9 7.9 2.7 2.7" /> <circle cx="16.5" cy="7.5" r=".5" fill="currentColor" /> <path d="m13.4 10.6 2.7-2.7" /> <circle cx="7.5" cy="16.5" r=".5" fill="currentColor" /> <path d="m7.9 16.1 2.7-2.7" /> <circle cx="16.5" cy="16.5" r=".5" fill="currentColor" /> <path d="m13.4 13.4 2.7 2.7" /> <circle cx="12" cy="12" r="2" />`, opt)
}

// VectorSquare renders the "vector-square" icon.
//
// Usage in templates:
//
//	{{ lucide "vector-square" }}
//
// Direct usage in Go:
//
//	lucide.VectorSquare()
//	lucide.VectorSquare(lucide.Options{Size: 32, Class: "my-icon"})
func VectorSquare(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19.5 7a24 24 0 0 1 0 10" /> <path d="M4.5 7a24 24 0 0 0 0 10" /> <path d="M7 19.5a24 24 0 0 0 10 0" /> <path d="M7 4.5a24 24 0 0 1 10 0" /> <rect x="17" y="17" width="5" height="5" rx="1" /> <rect x="17" y="2" width="5" height="5" rx="1" /> <rect x="2" y="17" width="5" height="5" rx="1" /> <rect x="2" y="2" width="5" height="5" rx="1" />`, opt)
}

// Vegan renders the "vegan" icon.
//
// Usage in templates:
//
//	{{ lucide "vegan" }}
//
// Direct usage in Go:
//
//	lucide.Vegan()
//	lucide.Vegan(lucide.Options{Size: 32, Class: "my-icon"})
func Vegan(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 8q6 0 6-6-6 0-6 6" /> <path d="M17.41 3.59a10 10 0 1 0 3 3" /> <path d="M2 2a26.6 26.6 0 0 1 10 20c.9-6.82 1.5-9.5 4-14" />`, opt)
}

// VenetianMask renders the "venetian-mask" icon.
//
// Usage in templates:
//
//	{{ lucide "venetian-mask" }}
//
// Direct usage in Go:
//
//	lucide.VenetianMask()
//	lucide.VenetianMask(lucide.Options{Size: 32, Class: "my-icon"})
func VenetianMask(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 11c-1.5 0-2.5.5-3 2" /> <path d="M4 6a2 2 0 0 0-2 2v4a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3a8 8 0 0 0-5 2 8 8 0 0 0-5-2z" /> <path d="M6 11c1.5 0 2.5.5 3 2" />`, opt)
}

// Venus renders the "venus" icon.
//
// Usage in templates:
//
//	{{ lucide "venus" }}
//
// Direct usage in Go:
//
//	lucide.Venus()
//	lucide.Venus(lucide.Options{Size: 32, Class: "my-icon"})
func Venus(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 15v7" /> <path d="M9 19h6" /> <circle cx="12" cy="9" r="6" />`, opt)
}

// VenusAndMars renders the "venus-and-mars" icon.
//
// Usage in templates:
//
//	{{ lucide "venus-and-mars" }}
//
// Direct usage in Go:
//
//	lucide.VenusAndMars()
//	lucide.VenusAndMars(lucide.Options{Size: 32, Class: "my-icon"})
func VenusAndMars(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 20h4" /> <path d="M12 16v6" /> <path d="M17 2h4v4" /> <path d="m21 2-5.46 5.46" /> <circle cx="12" cy="11" r="5" />`, opt)
}

// Vibrate renders the "vibrate" icon.
//
// Usage in templates:
//
//	{{ lucide "vibrate" }}
//
// Direct usage in Go:
//
//	lucide.Vibrate()
//	lucide.Vibrate(lucide.Options{Size: 32, Class: "my-icon"})
func Vibrate(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 8 2 2-2 2 2 2-2 2" /> <path d="m22 8-2 2 2 2-2 2 2 2" /> <rect width="8" height="14" x="8" y="5" rx="1" />`, opt)
}

// VibrateOff renders the "vibrate-off" icon.
//
// Usage in templates:
//
//	{{ lucide "vibrate-off" }}
//
// Direct usage in Go:
//
//	lucide.VibrateOff()
//	lucide.VibrateOff(lucide.Options{Size: 32, Class: "my-icon"})
func VibrateOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 8 2 2-2 2 2 2-2 2" /> <path d="m22 8-2 2 2 2-2 2 2 2" /> <path d="M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2" /> <path d="M16 10.34V6c0-.55-.45-1-1-1h-4.34" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// Video renders the "video" icon.
//
// Usage in templates:
//
//	{{ lucide "video" }}
//
// Direct usage in Go:
//
//	lucide.Video()
//	lucide.Video(lucide.Options{Size: 32, Class: "my-icon"})
func Video(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5" /> <rect x="2" y="6" width="14" height="12" rx="2" />`, opt)
}

// VideoOff renders the "video-off" icon.
//
// Usage in templates:
//
//	{{ lucide "video-off" }}
//
// Direct usage in Go:
//
//	lucide.VideoOff()
//	lucide.VideoOff(lucide.Options{Size: 32, Class: "my-icon"})
func VideoOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.66 6H14a2 2 0 0 1 2 2v2.5l5.248-3.062A.5.5 0 0 1 22 7.87v8.196" /> <path d="M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2" /> <path d="m2 2 20 20" />`, opt)
}

// Videotape renders the "videotape" icon.
//
// Usage in templates:
//
//	{{ lucide "videotape" }}
//
// Direct usage in Go:
//
//	lucide.Videotape()
//	lucide.Videotape(lucide.Options{Size: 32, Class: "my-icon"})
func Videotape(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="20" height="16" x="2" y="4" rx="2" /> <path d="M2 8h20" /> <circle cx="8" cy="14" r="2" /> <path d="M8 12h8" /> <circle cx="16" cy="14" r="2" />`, opt)
}

// View renders the "view" icon.
//
// Usage in templates:
//
//	{{ lucide "view" }}
//
// Direct usage in Go:
//
//	lucide.View()
//	lucide.View(lucide.Options{Size: 32, Class: "my-icon"})
func View(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2" /> <path d="M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2" /> <circle cx="12" cy="12" r="1" /> <path d="M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0" />`, opt)
}

// Voicemail renders the "voicemail" icon.
//
// Usage in templates:
//
//	{{ lucide "voicemail" }}
//
// Direct usage in Go:
//
//	lucide.Voicemail()
//	lucide.Voicemail(lucide.Options{Size: 32, Class: "my-icon"})
func Voicemail(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="6" cy="12" r="4" /> <circle cx="18" cy="12" r="4" /> <line x1="6" x2="18" y1="16" y2="16" />`, opt)
}

// Volleyball renders the "volleyball" icon.
//
// Usage in templates:
//
//	{{ lucide "volleyball" }}
//
// Direct usage in Go:
//
//	lucide.Volleyball()
//	lucide.Volleyball(lucide.Options{Size: 32, Class: "my-icon"})
func Volleyball(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.1 7.1a16.55 16.55 0 0 1 10.9 4" /> <path d="M12 12a12.6 12.6 0 0 1-8.7 5" /> <path d="M16.8 13.6a16.55 16.55 0 0 1-9 7.5" /> <path d="M20.7 17a12.8 12.8 0 0 0-8.7-5 13.3 13.3 0 0 1 0-10" /> <path d="M6.3 3.8a16.55 16.55 0 0 0 1.9 11.5" /> <circle cx="12" cy="12" r="10" />`, opt)
}

// Volume renders the "volume" icon.
//
// Usage in templates:
//
//	{{ lucide "volume" }}
//
// Direct usage in Go:
//
//	lucide.Volume()
//	lucide.Volume(lucide.Options{Size: 32, Class: "my-icon"})
func Volume(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z" />`, opt)
}

// Volume1 renders the "volume-1" icon.
//
// Usage in templates:
//
//	{{ lucide "volume-1" }}
//
// Direct usage in Go:
//
//	lucide.Volume1()
//	lucide.Volume1(lucide.Options{Size: 32, Class: "my-icon"})
func Volume1(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z" /> <path d="M16 9a5 5 0 0 1 0 6" />`, opt)
}

// Volume2 renders the "volume-2" icon.
//
// Usage in templates:
//
//	{{ lucide "volume-2" }}
//
// Direct usage in Go:
//
//	lucide.Volume2()
//	lucide.Volume2(lucide.Options{Size: 32, Class: "my-icon"})
func Volume2(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z" /> <path d="M16 9a5 5 0 0 1 0 6" /> <path d="M19.364 18.364a9 9 0 0 0 0-12.728" />`, opt)
}

// VolumeOff renders the "volume-off" icon.
//
// Usage in templates:
//
//	{{ lucide "volume-off" }}
//
// Direct usage in Go:
//
//	lucide.VolumeOff()
//	lucide.VolumeOff(lucide.Options{Size: 32, Class: "my-icon"})
func VolumeOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M16 9a5 5 0 0 1 .95 2.293" /> <path d="M19.364 5.636a9 9 0 0 1 1.889 9.96" /> <path d="m2 2 20 20" /> <path d="m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11" /> <path d="M9.828 4.172A.686.686 0 0 1 11 4.657v.686" />`, opt)
}

// VolumeX renders the "volume-x" icon.
//
// Usage in templates:
//
//	{{ lucide "volume-x" }}
//
// Direct usage in Go:
//
//	lucide.VolumeX()
//	lucide.VolumeX(lucide.Options{Size: 32, Class: "my-icon"})
func VolumeX(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z" /> <line x1="22" x2="16" y1="9" y2="15" /> <line x1="16" x2="22" y1="9" y2="15" />`, opt)
}

// Vote renders the "vote" icon.
//
// Usage in templates:
//
//	{{ lucide "vote" }}
//
// Direct usage in Go:
//
//	lucide.Vote()
//	lucide.Vote(lucide.Options{Size: 32, Class: "my-icon"})
func Vote(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m9 12 2 2 4-4" /> <path d="M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z" /> <path d="M22 19H2" />`, opt)
}

// Wallet renders the "wallet" icon.
//
// Usage in templates:
//
//	{{ lucide "wallet" }}
//
// Direct usage in Go:
//
//	lucide.Wallet()
//	lucide.Wallet(lucide.Options{Size: 32, Class: "my-icon"})
func Wallet(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1" /> <path d="M3 5v14a2 2 0 0 0 2 2h15a1 1 0 0 0 1-1v-4" />`, opt)
}

// WalletCards renders the "wallet-cards" icon.
//
// Usage in templates:
//
//	{{ lucide "wallet-cards" }}
//
// Direct usage in Go:
//
//	lucide.WalletCards()
//	lucide.WalletCards(lucide.Options{Size: 32, Class: "my-icon"})
func WalletCards(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="18" height="18" x="3" y="3" rx="2" /> <path d="M3 9a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2" /> <path d="M3 11h3c.8 0 1.6.3 2.1.9l1.1.9c1.6 1.6 4.1 1.6 5.7 0l1.1-.9c.5-.5 1.3-.9 2.1-.9H21" />`, opt)
}

// WalletMinimal renders the "wallet-minimal" icon.
//
// Usage in templates:
//
//	{{ lucide "wallet-minimal" }}
//
// Direct usage in Go:
//
//	lucide.WalletMinimal()
//	lucide.WalletMinimal(lucide.Options{Size: 32, Class: "my-icon"})
func WalletMinimal(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 14h.01" /> <path d="M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14" />`, opt)
}

// Wallpaper renders the "wallpaper" icon.
//
// Usage in templates:
//
//	{{ lucide "wallpaper" }}
//
// Direct usage in Go:
//
//	lucide.Wallpaper()
//	lucide.Wallpaper(lucide.Options{Size: 32, Class: "my-icon"})
func Wallpaper(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 17v4" /> <path d="M8 21h8" /> <path d="m9 17 6.1-6.1a2 2 0 0 1 2.81.01L22 15" /> <circle cx="8" cy="9" r="2" /> <rect x="2" y="3" width="20" height="14" rx="2" />`, opt)
}

// Wand renders the "wand" icon.
//
// Usage in templates:
//
//	{{ lucide "wand" }}
//
// Direct usage in Go:
//
//	lucide.Wand()
//	lucide.Wand(lucide.Options{Size: 32, Class: "my-icon"})
func Wand(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M15 4V2" /> <path d="M15 16v-2" /> <path d="M8 9h2" /> <path d="M20 9h2" /> <path d="M17.8 11.8 19 13" /> <path d="M15 9h.01" /> <path d="M17.8 6.2 19 5" /> <path d="m3 21 9-9" /> <path d="M12.2 6.2 11 5" />`, opt)
}

// WandSparkles renders the "wand-sparkles" icon.
//
// Usage in templates:
//
//	{{ lucide "wand-sparkles" }}
//
// Direct usage in Go:
//
//	lucide.WandSparkles()
//	lucide.WandSparkles(lucide.Options{Size: 32, Class: "my-icon"})
func WandSparkles(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72" /> <path d="m14 7 3 3" /> <path d="M5 6v4" /> <path d="M19 14v4" /> <path d="M10 2v2" /> <path d="M7 8H3" /> <path d="M21 16h-4" /> <path d="M11 3H9" />`, opt)
}

// Warehouse renders the "warehouse" icon.
//
// Usage in templates:
//
//	{{ lucide "warehouse" }}
//
// Direct usage in Go:
//
//	lucide.Warehouse()
//	lucide.Warehouse(lucide.Options{Size: 32, Class: "my-icon"})
func Warehouse(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 21V10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v11" /> <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 1.132-1.803l7.95-3.974a2 2 0 0 1 1.837 0l7.948 3.974A2 2 0 0 1 22 8z" /> <path d="M6 13h12" /> <path d="M6 17h12" />`, opt)
}

// WashingMachine renders the "washing-machine" icon.
//
// Usage in templates:
//
//	{{ lucide "washing-machine" }}
//
// Direct usage in Go:
//
//	lucide.WashingMachine()
//	lucide.WashingMachine(lucide.Options{Size: 32, Class: "my-icon"})
func WashingMachine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M3 6h3" /> <path d="M17 6h.01" /> <rect width="18" height="20" x="3" y="2" rx="2" /> <circle cx="12" cy="13" r="5" /> <path d="M12 18a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 1 0-5" />`, opt)
}

// Watch renders the "watch" icon.
//
// Usage in templates:
//
//	{{ lucide "watch" }}
//
// Direct usage in Go:
//
//	lucide.Watch()
//	lucide.Watch(lucide.Options{Size: 32, Class: "my-icon"})
func Watch(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 10v2.2l1.6 1" /> <path d="m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05" /> <path d="m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05" /> <circle cx="12" cy="12" r="6" />`, opt)
}

// Waves renders the "waves" icon.
//
// Usage in templates:
//
//	{{ lucide "waves" }}
//
// Direct usage in Go:
//
//	lucide.Waves()
//	lucide.Waves(lucide.Options{Size: 32, Class: "my-icon"})
func Waves(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" /> <path d="M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" /> <path d="M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" />`, opt)
}

// WavesLadder renders the "waves-ladder" icon.
//
// Usage in templates:
//
//	{{ lucide "waves-ladder" }}
//
// Direct usage in Go:
//
//	lucide.WavesLadder()
//	lucide.WavesLadder(lucide.Options{Size: 32, Class: "my-icon"})
func WavesLadder(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M19 5a2 2 0 0 0-2 2v11" /> <path d="M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" /> <path d="M7 13h10" /> <path d="M7 9h10" /> <path d="M9 5a2 2 0 0 0-2 2v11" />`, opt)
}

// Waypoints renders the "waypoints" icon.
//
// Usage in templates:
//
//	{{ lucide "waypoints" }}
//
// Direct usage in Go:
//
//	lucide.Waypoints()
//	lucide.Waypoints(lucide.Options{Size: 32, Class: "my-icon"})
func Waypoints(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="4.5" r="2.5" /> <path d="m10.2 6.3-3.9 3.9" /> <circle cx="4.5" cy="12" r="2.5" /> <path d="M7 12h10" /> <circle cx="19.5" cy="12" r="2.5" /> <path d="m13.8 17.7 3.9-3.9" /> <circle cx="12" cy="19.5" r="2.5" />`, opt)
}

// Webcam renders the "webcam" icon.
//
// Usage in templates:
//
//	{{ lucide "webcam" }}
//
// Direct usage in Go:
//
//	lucide.Webcam()
//	lucide.Webcam(lucide.Options{Size: 32, Class: "my-icon"})
func Webcam(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="10" r="8" /> <circle cx="12" cy="10" r="3" /> <path d="M7 22h10" /> <path d="M12 22v-4" />`, opt)
}

// Webhook renders the "webhook" icon.
//
// Usage in templates:
//
//	{{ lucide "webhook" }}
//
// Direct usage in Go:
//
//	lucide.Webhook()
//	lucide.Webhook(lucide.Options{Size: 32, Class: "my-icon"})
func Webhook(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2" /> <path d="m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06" /> <path d="m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8" />`, opt)
}

// WebhookOff renders the "webhook-off" icon.
//
// Usage in templates:
//
//	{{ lucide "webhook-off" }}
//
// Direct usage in Go:
//
//	lucide.WebhookOff()
//	lucide.WebhookOff(lucide.Options{Size: 32, Class: "my-icon"})
func WebhookOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M17 17h-5c-1.09-.02-1.94.92-2.5 1.9A3 3 0 1 1 2.57 15" /> <path d="M9 3.4a4 4 0 0 1 6.52.66" /> <path d="m6 17 3.1-5.8a2.5 2.5 0 0 0 .057-2.05" /> <path d="M20.3 20.3a4 4 0 0 1-2.3.7" /> <path d="M18.6 13a4 4 0 0 1 3.357 3.414" /> <path d="m12 6 .6 1" /> <path d="m2 2 20 20" />`, opt)
}

// Weight renders the "weight" icon.
//
// Usage in templates:
//
//	{{ lucide "weight" }}
//
// Direct usage in Go:
//
//	lucide.Weight()
//	lucide.Weight(lucide.Options{Size: 32, Class: "my-icon"})
func Weight(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="12" cy="5" r="3" /> <path d="M6.5 8a2 2 0 0 0-1.905 1.46L2.1 18.5A2 2 0 0 0 4 21h16a2 2 0 0 0 1.925-2.54L19.4 9.5A2 2 0 0 0 17.48 8Z" />`, opt)
}

// Wheat renders the "wheat" icon.
//
// Usage in templates:
//
//	{{ lucide "wheat" }}
//
// Direct usage in Go:
//
//	lucide.Wheat()
//	lucide.Wheat(lucide.Options{Size: 32, Class: "my-icon"})
func Wheat(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 22 16 8" /> <path d="M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z" /> <path d="M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z" /> <path d="M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z" /> <path d="M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z" /> <path d="M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z" /> <path d="M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z" /> <path d="M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z" />`, opt)
}

// WheatOff renders the "wheat-off" icon.
//
// Usage in templates:
//
//	{{ lucide "wheat-off" }}
//
// Direct usage in Go:
//
//	lucide.WheatOff()
//	lucide.WheatOff(lucide.Options{Size: 32, Class: "my-icon"})
func WheatOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m2 22 10-10" /> <path d="m16 8-1.17 1.17" /> <path d="M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z" /> <path d="m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97" /> <path d="M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62" /> <path d="M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z" /> <path d="M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z" /> <path d="m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98" /> <path d="M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// WholeWord renders the "whole-word" icon.
//
// Usage in templates:
//
//	{{ lucide "whole-word" }}
//
// Direct usage in Go:
//
//	lucide.WholeWord()
//	lucide.WholeWord(lucide.Options{Size: 32, Class: "my-icon"})
func WholeWord(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="7" cy="12" r="3" /> <path d="M10 9v6" /> <circle cx="17" cy="12" r="3" /> <path d="M14 7v8" /> <path d="M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1" />`, opt)
}

// Wifi renders the "wifi" icon.
//
// Usage in templates:
//
//	{{ lucide "wifi" }}
//
// Direct usage in Go:
//
//	lucide.Wifi()
//	lucide.Wifi(lucide.Options{Size: 32, Class: "my-icon"})
func Wifi(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20h.01" /> <path d="M2 8.82a15 15 0 0 1 20 0" /> <path d="M5 12.859a10 10 0 0 1 14 0" /> <path d="M8.5 16.429a5 5 0 0 1 7 0" />`, opt)
}

// WifiCog renders the "wifi-cog" icon.
//
// Usage in templates:
//
//	{{ lucide "wifi-cog" }}
//
// Direct usage in Go:
//
//	lucide.WifiCog()
//	lucide.WifiCog(lucide.Options{Size: 32, Class: "my-icon"})
func WifiCog(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m14.305 19.53.923-.382" /> <path d="m15.228 16.852-.923-.383" /> <path d="m16.852 15.228-.383-.923" /> <path d="m16.852 20.772-.383.924" /> <path d="m19.148 15.228.383-.923" /> <path d="m19.53 21.696-.382-.924" /> <path d="M2 7.82a15 15 0 0 1 20 0" /> <path d="m20.772 16.852.924-.383" /> <path d="m20.772 19.148.924.383" /> <path d="M5 11.858a10 10 0 0 1 11.5-1.785" /> <path d="M8.5 15.429a5 5 0 0 1 2.413-1.31" /> <circle cx="18" cy="18" r="3" />`, opt)
}

// WifiHigh renders the "wifi-high" icon.
//
// Usage in templates:
//
//	{{ lucide "wifi-high" }}
//
// Direct usage in Go:
//
//	lucide.WifiHigh()
//	lucide.WifiHigh(lucide.Options{Size: 32, Class: "my-icon"})
func WifiHigh(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20h.01" /> <path d="M5 12.859a10 10 0 0 1 14 0" /> <path d="M8.5 16.429a5 5 0 0 1 7 0" />`, opt)
}

// WifiLow renders the "wifi-low" icon.
//
// Usage in templates:
//
//	{{ lucide "wifi-low" }}
//
// Direct usage in Go:
//
//	lucide.WifiLow()
//	lucide.WifiLow(lucide.Options{Size: 32, Class: "my-icon"})
func WifiLow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20h.01" /> <path d="M8.5 16.429a5 5 0 0 1 7 0" />`, opt)
}

// WifiOff renders the "wifi-off" icon.
//
// Usage in templates:
//
//	{{ lucide "wifi-off" }}
//
// Direct usage in Go:
//
//	lucide.WifiOff()
//	lucide.WifiOff(lucide.Options{Size: 32, Class: "my-icon"})
func WifiOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20h.01" /> <path d="M8.5 16.429a5 5 0 0 1 7 0" /> <path d="M5 12.859a10 10 0 0 1 5.17-2.69" /> <path d="M19 12.859a10 10 0 0 0-2.007-1.523" /> <path d="M2 8.82a15 15 0 0 1 4.177-2.643" /> <path d="M22 8.82a15 15 0 0 0-11.288-3.764" /> <path d="m2 2 20 20" />`, opt)
}

// WifiPen renders the "wifi-pen" icon.
//
// Usage in templates:
//
//	{{ lucide "wifi-pen" }}
//
// Direct usage in Go:
//
//	lucide.WifiPen()
//	lucide.WifiPen(lucide.Options{Size: 32, Class: "my-icon"})
func WifiPen(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2 8.82a15 15 0 0 1 20 0" /> <path d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" /> <path d="M5 12.859a10 10 0 0 1 10.5-2.222" /> <path d="M8.5 16.429a5 5 0 0 1 3-1.406" />`, opt)
}

// WifiSync renders the "wifi-sync" icon.
//
// Usage in templates:
//
//	{{ lucide "wifi-sync" }}
//
// Direct usage in Go:
//
//	lucide.WifiSync()
//	lucide.WifiSync(lucide.Options{Size: 32, Class: "my-icon"})
func WifiSync(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M11.965 10.105v4L13.5 12.5a5 5 0 0 1 8 1.5" /> <path d="M11.965 14.105h4" /> <path d="M17.965 18.105h4L20.43 19.71a5 5 0 0 1-8-1.5" /> <path d="M2 8.82a15 15 0 0 1 20 0" /> <path d="M21.965 22.105v-4" /> <path d="M5 12.86a10 10 0 0 1 3-2.032" /> <path d="M8.5 16.429h.01" />`, opt)
}

// WifiZero renders the "wifi-zero" icon.
//
// Usage in templates:
//
//	{{ lucide "wifi-zero" }}
//
// Direct usage in Go:
//
//	lucide.WifiZero()
//	lucide.WifiZero(lucide.Options{Size: 32, Class: "my-icon"})
func WifiZero(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12 20h.01" />`, opt)
}

// Wind renders the "wind" icon.
//
// Usage in templates:
//
//	{{ lucide "wind" }}
//
// Direct usage in Go:
//
//	lucide.Wind()
//	lucide.Wind(lucide.Options{Size: 32, Class: "my-icon"})
func Wind(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M12.8 19.6A2 2 0 1 0 14 16H2" /> <path d="M17.5 8a2.5 2.5 0 1 1 2 4H2" /> <path d="M9.8 4.4A2 2 0 1 1 11 8H2" />`, opt)
}

// WindArrowDown renders the "wind-arrow-down" icon.
//
// Usage in templates:
//
//	{{ lucide "wind-arrow-down" }}
//
// Direct usage in Go:
//
//	lucide.WindArrowDown()
//	lucide.WindArrowDown(lucide.Options{Size: 32, Class: "my-icon"})
func WindArrowDown(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10 2v8" /> <path d="M12.8 21.6A2 2 0 1 0 14 18H2" /> <path d="M17.5 10a2.5 2.5 0 1 1 2 4H2" /> <path d="m6 6 4 4 4-4" />`, opt)
}

// Wine renders the "wine" icon.
//
// Usage in templates:
//
//	{{ lucide "wine" }}
//
// Direct usage in Go:
//
//	lucide.Wine()
//	lucide.Wine(lucide.Options{Size: 32, Class: "my-icon"})
func Wine(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 22h8" /> <path d="M7 10h10" /> <path d="M12 15v7" /> <path d="M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z" />`, opt)
}

// WineOff renders the "wine-off" icon.
//
// Usage in templates:
//
//	{{ lucide "wine-off" }}
//
// Direct usage in Go:
//
//	lucide.WineOff()
//	lucide.WineOff(lucide.Options{Size: 32, Class: "my-icon"})
func WineOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M8 22h8" /> <path d="M7 10h3m7 0h-1.343" /> <path d="M12 15v7" /> <path d="M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198" /> <line x1="2" x2="22" y1="2" y2="22" />`, opt)
}

// Workflow renders the "workflow" icon.
//
// Usage in templates:
//
//	{{ lucide "workflow" }}
//
// Direct usage in Go:
//
//	lucide.Workflow()
//	lucide.Workflow(lucide.Options{Size: 32, Class: "my-icon"})
func Workflow(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<rect width="8" height="8" x="3" y="3" rx="2" /> <path d="M7 11v4a2 2 0 0 0 2 2h4" /> <rect width="8" height="8" x="13" y="13" rx="2" />`, opt)
}

// Worm renders the "worm" icon.
//
// Usage in templates:
//
//	{{ lucide "worm" }}
//
// Direct usage in Go:
//
//	lucide.Worm()
//	lucide.Worm(lucide.Options{Size: 32, Class: "my-icon"})
func Worm(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="m19 12-1.5 3" /> <path d="M19.63 18.81 22 20" /> <path d="M6.47 8.23a1.68 1.68 0 0 1 2.44 1.93l-.64 2.08a6.76 6.76 0 0 0 10.16 7.67l.42-.27a1 1 0 1 0-2.73-4.21l-.42.27a1.76 1.76 0 0 1-2.63-1.99l.64-2.08A6.66 6.66 0 0 0 3.94 3.9l-.7.4a1 1 0 1 0 2.55 4.34z" />`, opt)
}

// Wrench renders the "wrench" icon.
//
// Usage in templates:
//
//	{{ lucide "wrench" }}
//
// Direct usage in Go:
//
//	lucide.Wrench()
//	lucide.Wrench(lucide.Options{Size: 32, Class: "my-icon"})
func Wrench(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.106-3.105c.32-.322.863-.22.983.218a6 6 0 0 1-8.259 7.057l-7.91 7.91a1 1 0 0 1-2.999-3l7.91-7.91a6 6 0 0 1 7.057-8.259c.438.12.54.662.219.984z" />`, opt)
}

// X renders the "x" icon.
//
// Usage in templates:
//
//	{{ lucide "x" }}
//
// Direct usage in Go:
//
//	lucide.X()
//	lucide.X(lucide.Options{Size: 32, Class: "my-icon"})
func X(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M18 6 6 18" /> <path d="m6 6 12 12" />`, opt)
}

// Youtube renders the "youtube" icon.
//
// Usage in templates:
//
//	{{ lucide "youtube" }}
//
// Direct usage in Go:
//
//	lucide.Youtube()
//	lucide.Youtube(lucide.Options{Size: 32, Class: "my-icon"})
func Youtube(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17" /> <path d="m10 15 5-3-5-3z" />`, opt)
}

// Zap renders the "zap" icon.
//
// Usage in templates:
//
//	{{ lucide "zap" }}
//
// Direct usage in Go:
//
//	lucide.Zap()
//	lucide.Zap(lucide.Options{Size: 32, Class: "my-icon"})
func Zap(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z" />`, opt)
}

// ZapOff renders the "zap-off" icon.
//
// Usage in templates:
//
//	{{ lucide "zap-off" }}
//
// Direct usage in Go:
//
//	lucide.ZapOff()
//	lucide.ZapOff(lucide.Options{Size: 32, Class: "my-icon"})
func ZapOff(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<path d="M10.513 4.856 13.12 2.17a.5.5 0 0 1 .86.46l-1.377 4.317" /> <path d="M15.656 10H20a1 1 0 0 1 .78 1.63l-1.72 1.773" /> <path d="M16.273 16.273 10.88 21.83a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14H4a1 1 0 0 1-.78-1.63l4.507-4.643" /> <path d="m2 2 20 20" />`, opt)
}

// ZoomIn renders the "zoom-in" icon.
//
// Usage in templates:
//
//	{{ lucide "zoom-in" }}
//
// Direct usage in Go:
//
//	lucide.ZoomIn()
//	lucide.ZoomIn(lucide.Options{Size: 32, Class: "my-icon"})
func ZoomIn(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="11" cy="11" r="8" /> <line x1="21" x2="16.65" y1="21" y2="16.65" /> <line x1="11" x2="11" y1="8" y2="14" /> <line x1="8" x2="14" y1="11" y2="11" />`, opt)
}

// ZoomOut renders the "zoom-out" icon.
//
// Usage in templates:
//
//	{{ lucide "zoom-out" }}
//
// Direct usage in Go:
//
//	lucide.ZoomOut()
//	lucide.ZoomOut(lucide.Options{Size: 32, Class: "my-icon"})
func ZoomOut(opts ...Options) template.HTML {
	opt := Options{Size: 24, StrokeWidth: 2}
	if len(opts) > 0 {
		opt = opts[0]
		if opt.Size == 0 {
			opt.Size = 24
		}
		if opt.StrokeWidth == 0 {
			opt.StrokeWidth = 2
		}
	}
	return buildSVG(`<circle cx="11" cy="11" r="8" /> <line x1="21" x2="16.65" y1="21" y2="16.65" /> <line x1="8" x2="14" y1="11" y2="11" />`, opt)
}
